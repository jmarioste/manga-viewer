!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=11)}([function(e,t,r){(function(t){e.exports=t.jQuery=r(10)}).call(this,r(1))},function(e,t){var r;r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){"use strict";r.r(t),function(e){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.3
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var r="undefined"!=typeof window&&"undefined"!=typeof document,n=["Edge","Trident","Firefox"],i=0,o=0;o<n.length;o+=1)if(r&&navigator.userAgent.indexOf(n[o])>=0){i=1;break}var s=r&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},i))}};function a(e){return e&&"[object Function]"==={}.toString.call(e)}function u(e,t){if(1!==e.nodeType)return[];var r=getComputedStyle(e,null);return t?r[t]:r}function l(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function c(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=u(e),r=t.overflow,n=t.overflowX,i=t.overflowY;return/(auto|scroll|overlay)/.test(r+i+n)?e:c(l(e))}var p=r&&!(!window.MSInputMethodContext||!document.documentMode),d=r&&/MSIE 10/.test(navigator.userAgent);function h(e){return 11===e?p:10===e?d:p||d}function f(e){if(!e)return document.documentElement;for(var t=h(10)?document.body:null,r=e.offsetParent;r===t&&e.nextElementSibling;)r=(e=e.nextElementSibling).offsetParent;var n=r&&r.nodeName;return n&&"BODY"!==n&&"HTML"!==n?-1!==["TD","TABLE"].indexOf(r.nodeName)&&"static"===u(r,"position")?f(r):r:e?e.ownerDocument.documentElement:document.documentElement}function m(e){return null!==e.parentNode?m(e.parentNode):e}function g(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var r=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,n=r?e:t,i=r?t:e,o=document.createRange();o.setStart(n,0),o.setEnd(i,0);var s,a,u=o.commonAncestorContainer;if(e!==u&&t!==u||n.contains(i))return"BODY"===(a=(s=u).nodeName)||"HTML"!==a&&f(s.firstElementChild)!==s?f(u):u;var l=m(e);return l.host?g(l.host,t):g(e,m(t).host)}function v(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",r=e.nodeName;if("BODY"===r||"HTML"===r){var n=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||n)[t]}return e[t]}function b(e,t){var r="x"===t?"Left":"Top",n="Left"===r?"Right":"Bottom";return parseFloat(e["border"+r+"Width"],10)+parseFloat(e["border"+n+"Width"],10)}function y(e,t,r,n){return Math.max(t["offset"+e],t["scroll"+e],r["client"+e],r["offset"+e],r["scroll"+e],h(10)?r["offset"+e]+n["margin"+("Height"===e?"Top":"Left")]+n["margin"+("Height"===e?"Bottom":"Right")]:0)}function _(){var e=document.body,t=document.documentElement,r=h(10)&&getComputedStyle(t);return{height:y("Height",e,t,r),width:y("Width",e,t,r)}}var w=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},T=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),j=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e},x=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e};function E(e){return x({},e,{right:e.left+e.width,bottom:e.top+e.height})}function D(e){var t={};try{if(h(10)){t=e.getBoundingClientRect();var r=v(e,"top"),n=v(e,"left");t.top+=r,t.left+=n,t.bottom+=r,t.right+=n}else t=e.getBoundingClientRect()}catch(e){}var i={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},o="HTML"===e.nodeName?_():{},s=o.width||e.clientWidth||i.right-i.left,a=o.height||e.clientHeight||i.bottom-i.top,l=e.offsetWidth-s,c=e.offsetHeight-a;if(l||c){var p=u(e);l-=b(p,"x"),c-=b(p,"y"),i.width-=l,i.height-=c}return E(i)}function C(e,t){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=h(10),i="HTML"===t.nodeName,o=D(e),s=D(t),a=c(e),l=u(t),p=parseFloat(l.borderTopWidth,10),d=parseFloat(l.borderLeftWidth,10);r&&"HTML"===t.nodeName&&(s.top=Math.max(s.top,0),s.left=Math.max(s.left,0));var f=E({top:o.top-s.top-p,left:o.left-s.left-d,width:o.width,height:o.height});if(f.marginTop=0,f.marginLeft=0,!n&&i){var m=parseFloat(l.marginTop,10),g=parseFloat(l.marginLeft,10);f.top-=p-m,f.bottom-=p-m,f.left-=d-g,f.right-=d-g,f.marginTop=m,f.marginLeft=g}return(n&&!r?t.contains(a):t===a&&"BODY"!==a.nodeName)&&(f=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=v(t,"top"),i=v(t,"left"),o=r?-1:1;return e.top+=n*o,e.bottom+=n*o,e.left+=i*o,e.right+=i*o,e}(f,t)),f}function N(e){if(!e||!e.parentElement||h())return document.documentElement;for(var t=e.parentElement;t&&"none"===u(t,"transform");)t=t.parentElement;return t||document.documentElement}function S(e,t,r,n){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},s=i?N(e):g(e,t);if("viewport"===n)o=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=e.ownerDocument.documentElement,n=C(e,r),i=Math.max(r.clientWidth,window.innerWidth||0),o=Math.max(r.clientHeight,window.innerHeight||0),s=t?0:v(r),a=t?0:v(r,"left");return E({top:s-n.top+n.marginTop,left:a-n.left+n.marginLeft,width:i,height:o})}(s,i);else{var a=void 0;"scrollParent"===n?"BODY"===(a=c(l(t))).nodeName&&(a=e.ownerDocument.documentElement):a="window"===n?e.ownerDocument.documentElement:n;var p=C(a,s,i);if("HTML"!==a.nodeName||function e(t){var r=t.nodeName;return"BODY"!==r&&"HTML"!==r&&("fixed"===u(t,"position")||e(l(t)))}(s))o=p;else{var d=_(),h=d.height,f=d.width;o.top+=p.top-p.marginTop,o.bottom=h+p.top,o.left+=p.left-p.marginLeft,o.right=f+p.left}}return o.left+=r,o.top+=r,o.right-=r,o.bottom-=r,o}function O(e,t,r,n,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var s=S(r,n,o,i),a={top:{width:s.width,height:t.top-s.top},right:{width:s.right-t.right,height:s.height},bottom:{width:s.width,height:s.bottom-t.bottom},left:{width:t.left-s.left,height:s.height}},u=Object.keys(a).map(function(e){return x({key:e},a[e],{area:(t=a[e],t.width*t.height)});var t}).sort(function(e,t){return t.area-e.area}),l=u.filter(function(e){var t=e.width,n=e.height;return t>=r.clientWidth&&n>=r.clientHeight}),c=l.length>0?l[0].key:u[0].key,p=e.split("-")[1];return c+(p?"-"+p:"")}function A(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return C(r,n?N(t):g(t,r),n)}function k(e){var t=getComputedStyle(e),r=parseFloat(t.marginTop)+parseFloat(t.marginBottom),n=parseFloat(t.marginLeft)+parseFloat(t.marginRight);return{width:e.offsetWidth+n,height:e.offsetHeight+r}}function I(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function M(e,t,r){r=r.split("-")[0];var n=k(e),i={width:n.width,height:n.height},o=-1!==["right","left"].indexOf(r),s=o?"top":"left",a=o?"left":"top",u=o?"height":"width",l=o?"width":"height";return i[s]=t[s]+t[u]/2-n[u]/2,i[a]=r===a?t[a]-n[l]:t[I(a)],i}function L(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function P(e,t,r){return(void 0===r?e:e.slice(0,function(e,t,r){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===r});var n=L(e,function(e){return e[t]===r});return e.indexOf(n)}(e,"name",r))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var r=e.function||e.fn;e.enabled&&a(r)&&(t.offsets.popper=E(t.offsets.popper),t.offsets.reference=E(t.offsets.reference),t=r(t,e))}),t}function H(e,t){return e.some(function(e){var r=e.name;return e.enabled&&r===t})}function V(e){for(var t=[!1,"ms","Webkit","Moz","O"],r=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<t.length;n++){var i=t[n],o=i?""+i+r:e;if(void 0!==document.body.style[o])return o}return null}function R(e){var t=e.ownerDocument;return t?t.defaultView:window}function B(e,t,r,n){r.updateBound=n,R(e).addEventListener("resize",r.updateBound,{passive:!0});var i=c(e);return function e(t,r,n,i){var o="BODY"===t.nodeName,s=o?t.ownerDocument.defaultView:t;s.addEventListener(r,n,{passive:!0}),o||e(c(s.parentNode),r,n,i),i.push(s)}(i,"scroll",r.updateBound,r.scrollParents),r.scrollElement=i,r.eventsEnabled=!0,r}function F(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,R(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function z(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function W(e,t){Object.keys(t).forEach(function(r){var n="";-1!==["width","height","top","right","bottom","left"].indexOf(r)&&z(t[r])&&(n="px"),e.style[r]=t[r]+n})}function U(e,t,r){var n=L(e,function(e){return e.name===t}),i=!!n&&e.some(function(e){return e.name===r&&e.enabled&&e.order<n.order});if(!i){var o="`"+t+"`",s="`"+r+"`";console.warn(s+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return i}var q=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],G=q.slice(3);function Z(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=G.indexOf(e),n=G.slice(r+1).concat(G.slice(0,r));return t?n.reverse():n}var $={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function Y(e,t,r,n){var i=[0,0],o=-1!==["right","left"].indexOf(n),s=e.split(/(\+|\-)/).map(function(e){return e.trim()}),a=s.indexOf(L(s,function(e){return-1!==e.search(/,|\s/)}));s[a]&&-1===s[a].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var u=/\s*,\s*|\s+/,l=-1!==a?[s.slice(0,a).concat([s[a].split(u)[0]]),[s[a].split(u)[1]].concat(s.slice(a+1))]:[s];return(l=l.map(function(e,n){var i=(1===n?!o:o)?"height":"width",s=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,s=!0,e):s?(e[e.length-1]+=t,s=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,r,n){var i=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+i[1],s=i[2];if(!o)return e;if(0===s.indexOf("%")){var a=void 0;switch(s){case"%p":a=r;break;case"%":case"%r":default:a=n}return E(a)[t]/100*o}if("vh"===s||"vw"===s)return("vh"===s?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o;return o}(e,i,t,r)})})).forEach(function(e,t){e.forEach(function(r,n){z(r)&&(i[t]+=r*("-"===e[n-1]?-1:1))})}),i}var Q={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,r=t.split("-")[0],n=t.split("-")[1];if(n){var i=e.offsets,o=i.reference,s=i.popper,a=-1!==["bottom","top"].indexOf(r),u=a?"left":"top",l=a?"width":"height",c={start:j({},u,o[u]),end:j({},u,o[u]+o[l]-s[l])};e.offsets.popper=x({},s,c[n])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var r=t.offset,n=e.placement,i=e.offsets,o=i.popper,s=i.reference,a=n.split("-")[0],u=void 0;return u=z(+r)?[+r,0]:Y(r,o,s,a),"left"===a?(o.top+=u[0],o.left-=u[1]):"right"===a?(o.top+=u[0],o.left+=u[1]):"top"===a?(o.left+=u[0],o.top-=u[1]):"bottom"===a&&(o.left+=u[0],o.top+=u[1]),e.popper=o,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var r=t.boundariesElement||f(e.instance.popper);e.instance.reference===r&&(r=f(r));var n=V("transform"),i=e.instance.popper.style,o=i.top,s=i.left,a=i[n];i.top="",i.left="",i[n]="";var u=S(e.instance.popper,e.instance.reference,t.padding,r,e.positionFixed);i.top=o,i.left=s,i[n]=a,t.boundaries=u;var l=t.priority,c=e.offsets.popper,p={primary:function(e){var r=c[e];return c[e]<u[e]&&!t.escapeWithReference&&(r=Math.max(c[e],u[e])),j({},e,r)},secondary:function(e){var r="right"===e?"left":"top",n=c[r];return c[e]>u[e]&&!t.escapeWithReference&&(n=Math.min(c[r],u[e]-("right"===e?c.width:c.height))),j({},r,n)}};return l.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";c=x({},c,p[t](e))}),e.offsets.popper=c,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,r=t.popper,n=t.reference,i=e.placement.split("-")[0],o=Math.floor,s=-1!==["top","bottom"].indexOf(i),a=s?"right":"bottom",u=s?"left":"top",l=s?"width":"height";return r[a]<o(n[u])&&(e.offsets.popper[u]=o(n[u])-r[l]),r[u]>o(n[a])&&(e.offsets.popper[u]=o(n[a])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var r;if(!U(e.instance.modifiers,"arrow","keepTogether"))return e;var n=t.element;if("string"==typeof n){if(!(n=e.instance.popper.querySelector(n)))return e}else if(!e.instance.popper.contains(n))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var i=e.placement.split("-")[0],o=e.offsets,s=o.popper,a=o.reference,l=-1!==["left","right"].indexOf(i),c=l?"height":"width",p=l?"Top":"Left",d=p.toLowerCase(),h=l?"left":"top",f=l?"bottom":"right",m=k(n)[c];a[f]-m<s[d]&&(e.offsets.popper[d]-=s[d]-(a[f]-m)),a[d]+m>s[f]&&(e.offsets.popper[d]+=a[d]+m-s[f]),e.offsets.popper=E(e.offsets.popper);var g=a[d]+a[c]/2-m/2,v=u(e.instance.popper),b=parseFloat(v["margin"+p],10),y=parseFloat(v["border"+p+"Width"],10),_=g-e.offsets.popper[d]-b-y;return _=Math.max(Math.min(s[c]-m,_),0),e.arrowElement=n,e.offsets.arrow=(j(r={},d,Math.round(_)),j(r,h,""),r),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(H(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var r=S(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),n=e.placement.split("-")[0],i=I(n),o=e.placement.split("-")[1]||"",s=[];switch(t.behavior){case $.FLIP:s=[n,i];break;case $.CLOCKWISE:s=Z(n);break;case $.COUNTERCLOCKWISE:s=Z(n,!0);break;default:s=t.behavior}return s.forEach(function(a,u){if(n!==a||s.length===u+1)return e;n=e.placement.split("-")[0],i=I(n);var l=e.offsets.popper,c=e.offsets.reference,p=Math.floor,d="left"===n&&p(l.right)>p(c.left)||"right"===n&&p(l.left)<p(c.right)||"top"===n&&p(l.bottom)>p(c.top)||"bottom"===n&&p(l.top)<p(c.bottom),h=p(l.left)<p(r.left),f=p(l.right)>p(r.right),m=p(l.top)<p(r.top),g=p(l.bottom)>p(r.bottom),v="left"===n&&h||"right"===n&&f||"top"===n&&m||"bottom"===n&&g,b=-1!==["top","bottom"].indexOf(n),y=!!t.flipVariations&&(b&&"start"===o&&h||b&&"end"===o&&f||!b&&"start"===o&&m||!b&&"end"===o&&g);(d||v||y)&&(e.flipped=!0,(d||v)&&(n=s[u+1]),y&&(o=function(e){return"end"===e?"start":"start"===e?"end":e}(o)),e.placement=n+(o?"-"+o:""),e.offsets.popper=x({},e.offsets.popper,M(e.instance.popper,e.offsets.reference,e.placement)),e=P(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,r=t.split("-")[0],n=e.offsets,i=n.popper,o=n.reference,s=-1!==["left","right"].indexOf(r),a=-1===["top","left"].indexOf(r);return i[s?"left":"top"]=o[r]-(a?i[s?"width":"height"]:0),e.placement=I(t),e.offsets.popper=E(i),e}},hide:{order:800,enabled:!0,fn:function(e){if(!U(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,r=L(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<r.top||t.left>r.right||t.top>r.bottom||t.right<r.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var r=t.x,n=t.y,i=e.offsets.popper,o=L(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var s=void 0!==o?o:t.gpuAcceleration,a=D(f(e.instance.popper)),u={position:i.position},l={left:Math.floor(i.left),top:Math.round(i.top),bottom:Math.round(i.bottom),right:Math.floor(i.right)},c="bottom"===r?"top":"bottom",p="right"===n?"left":"right",d=V("transform"),h=void 0,m=void 0;if(m="bottom"===c?-a.height+l.bottom:l.top,h="right"===p?-a.width+l.right:l.left,s&&d)u[d]="translate3d("+h+"px, "+m+"px, 0)",u[c]=0,u[p]=0,u.willChange="transform";else{var g="bottom"===c?-1:1,v="right"===p?-1:1;u[c]=m*g,u[p]=h*v,u.willChange=c+", "+p}var b={"x-placement":e.placement};return e.attributes=x({},b,e.attributes),e.styles=x({},u,e.styles),e.arrowStyles=x({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,r;return W(e.instance.popper,e.styles),t=e.instance.popper,r=e.attributes,Object.keys(r).forEach(function(e){!1!==r[e]?t.setAttribute(e,r[e]):t.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&W(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,r,n,i){var o=A(i,t,e,r.positionFixed),s=O(r.placement,o,t,e,r.modifiers.flip.boundariesElement,r.modifiers.flip.padding);return t.setAttribute("x-placement",s),W(t,{position:r.positionFixed?"fixed":"absolute"}),r},gpuAcceleration:void 0}}},X=function(){function e(t,r){var n=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};w(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(n.update)},this.update=s(this.update.bind(this)),this.options=x({},e.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=r&&r.jquery?r[0]:r,this.options.modifiers={},Object.keys(x({},e.Defaults.modifiers,i.modifiers)).forEach(function(t){n.options.modifiers[t]=x({},e.Defaults.modifiers[t]||{},i.modifiers?i.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return x({name:e},n.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&a(e.onLoad)&&e.onLoad(n.reference,n.popper,n.options,e,n.state)}),this.update();var o=this.options.eventsEnabled;o&&this.enableEventListeners(),this.state.eventsEnabled=o}return T(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=A(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=O(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=M(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=P(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,H(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[V("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=B(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return F.call(this)}}]),e}();X.Utils=("undefined"!=typeof window?window:e).PopperUtils,X.placements=q,X.Defaults=Q,t.default=X}.call(this,r(1))},function(e,t,r){var n,i,o;
/*!
 * Knockout JavaScript library v3.4.2
 * (c) The Knockout.js team - http://knockoutjs.com/
 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */!function(s){var a=this||(0,eval)("this"),u=a.document,l=a.navigator,c=a.jQuery,p=a.JSON;i=[t,r],(o="function"==typeof(n=function(e,t){var r=void 0!==e?e:{};r.exportSymbol=function(e,t){for(var n=e.split("."),i=r,o=0;o<n.length-1;o++)i=i[n[o]];i[n[n.length-1]]=t},r.exportProperty=function(e,t,r){e[t]=r},r.version="3.4.2",r.exportSymbol("version",r.version),r.options={deferUpdates:!1,useOnlyNativeEvents:!1},r.utils=function(){function e(e,t){for(var r in e)e.hasOwnProperty(r)&&t(r,e[r])}function t(e,t){if(t)for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);return e}function n(e,t){return e.__proto__=t,e}var i={__proto__:[]}instanceof Array,o={},d={};o[l&&/Firefox\/2/i.test(l.userAgent)?"KeyboardEvent":"UIEvents"]=["keyup","keydown","keypress"],o.MouseEvents=["click","dblclick","mousedown","mouseup","mousemove","mouseover","mouseout","mouseenter","mouseleave"],e(o,function(e,t){if(t.length)for(var r=0,n=t.length;r<n;r++)d[t[r]]=e});var h={propertychange:!0},f=u&&function(){for(var e=3,t=u.createElement("div"),r=t.getElementsByTagName("i");t.innerHTML="\x3c!--[if gt IE "+ ++e+"]><i></i><![endif]--\x3e",r[0];);return e>4?e:s}(),m=/\S+/g;function g(e,t,n,i){var o=e[t].match(m)||[];r.utils.arrayForEach(n.match(m),function(e){r.utils.addOrRemoveItem(o,e,i)}),e[t]=o.join(" ")}return{fieldsIncludedWithJsonPost:["authenticity_token",/^__RequestVerificationToken(_.*)?$/],arrayForEach:function(e,t){for(var r=0,n=e.length;r<n;r++)t(e[r],r)},arrayIndexOf:function(e,t){if("function"==typeof Array.prototype.indexOf)return Array.prototype.indexOf.call(e,t);for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1},arrayFirst:function(e,t,r){for(var n=0,i=e.length;n<i;n++)if(t.call(r,e[n],n))return e[n];return null},arrayRemoveItem:function(e,t){var n=r.utils.arrayIndexOf(e,t);n>0?e.splice(n,1):0===n&&e.shift()},arrayGetDistinctValues:function(e){for(var t=[],n=0,i=(e=e||[]).length;n<i;n++)r.utils.arrayIndexOf(t,e[n])<0&&t.push(e[n]);return t},arrayMap:function(e,t){for(var r=[],n=0,i=(e=e||[]).length;n<i;n++)r.push(t(e[n],n));return r},arrayFilter:function(e,t){for(var r=[],n=0,i=(e=e||[]).length;n<i;n++)t(e[n],n)&&r.push(e[n]);return r},arrayPushAll:function(e,t){if(t instanceof Array)e.push.apply(e,t);else for(var r=0,n=t.length;r<n;r++)e.push(t[r]);return e},addOrRemoveItem:function(e,t,n){var i=r.utils.arrayIndexOf(r.utils.peekObservable(e),t);i<0?n&&e.push(t):n||e.splice(i,1)},canSetPrototype:i,extend:t,setPrototypeOf:n,setPrototypeOfOrExtend:i?n:t,objectForEach:e,objectMap:function(e,t){if(!e)return e;var r={};for(var n in e)e.hasOwnProperty(n)&&(r[n]=t(e[n],n,e));return r},emptyDomNode:function(e){for(;e.firstChild;)r.removeNode(e.firstChild)},moveCleanedNodesToContainerElement:function(e){for(var t=r.utils.makeArray(e),n=(t[0]&&t[0].ownerDocument||u).createElement("div"),i=0,o=t.length;i<o;i++)n.appendChild(r.cleanNode(t[i]));return n},cloneNodes:function(e,t){for(var n=0,i=e.length,o=[];n<i;n++){var s=e[n].cloneNode(!0);o.push(t?r.cleanNode(s):s)}return o},setDomNodeChildren:function(e,t){if(r.utils.emptyDomNode(e),t)for(var n=0,i=t.length;n<i;n++)e.appendChild(t[n])},replaceDomNodes:function(e,t){var n=e.nodeType?[e]:e;if(n.length>0){for(var i=n[0],o=i.parentNode,s=0,a=t.length;s<a;s++)o.insertBefore(t[s],i);for(s=0,a=n.length;s<a;s++)r.removeNode(n[s])}},fixUpContinuousNodeArray:function(e,t){if(e.length){for(t=8===t.nodeType&&t.parentNode||t;e.length&&e[0].parentNode!==t;)e.splice(0,1);for(;e.length>1&&e[e.length-1].parentNode!==t;)e.length--;if(e.length>1){var r=e[0],n=e[e.length-1];for(e.length=0;r!==n;)e.push(r),r=r.nextSibling;e.push(n)}}return e},setOptionNodeSelectionState:function(e,t){f<7?e.setAttribute("selected",t):e.selected=t},stringTrim:function(e){return null===e||e===s?"":e.trim?e.trim():e.toString().replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")},stringStartsWith:function(e,t){return e=e||"",!(t.length>e.length)&&e.substring(0,t.length)===t},domNodeIsContainedBy:function(e,t){if(e===t)return!0;if(11===e.nodeType)return!1;if(t.contains)return t.contains(3===e.nodeType?e.parentNode:e);if(t.compareDocumentPosition)return 16==(16&t.compareDocumentPosition(e));for(;e&&e!=t;)e=e.parentNode;return!!e},domNodeIsAttachedToDocument:function(e){return r.utils.domNodeIsContainedBy(e,e.ownerDocument.documentElement)},anyDomNodeIsAttachedToDocument:function(e){return!!r.utils.arrayFirst(e,r.utils.domNodeIsAttachedToDocument)},tagNameLower:function(e){return e&&e.tagName&&e.tagName.toLowerCase()},catchFunctionErrors:function(e){return r.onError?function(){try{return e.apply(this,arguments)}catch(e){throw r.onError&&r.onError(e),e}}:e},setTimeout:function(e,t){return setTimeout(r.utils.catchFunctionErrors(e),t)},deferError:function(e){setTimeout(function(){throw r.onError&&r.onError(e),e},0)},registerEventHandler:function(e,t,n){var i=r.utils.catchFunctionErrors(n),o=f&&h[t];if(r.options.useOnlyNativeEvents||o||!c)if(o||"function"!=typeof e.addEventListener){if(void 0===e.attachEvent)throw new Error("Browser doesn't support addEventListener or attachEvent");var s=function(t){i.call(e,t)},a="on"+t;e.attachEvent(a,s),r.utils.domNodeDisposal.addDisposeCallback(e,function(){e.detachEvent(a,s)})}else e.addEventListener(t,i,!1);else c(e).bind(t,i)},triggerEvent:function(e,t){if(!e||!e.nodeType)throw new Error("element must be a DOM node when calling triggerEvent");var n=function(e,t){if("input"!==r.utils.tagNameLower(e)||!e.type)return!1;if("click"!=t.toLowerCase())return!1;var n=e.type;return"checkbox"==n||"radio"==n}(e,t);if(r.options.useOnlyNativeEvents||!c||n)if("function"==typeof u.createEvent){if("function"!=typeof e.dispatchEvent)throw new Error("The supplied element doesn't support dispatchEvent");var i=d[t]||"HTMLEvents",o=u.createEvent(i);o.initEvent(t,!0,!0,a,0,0,0,0,0,!1,!1,!1,!1,0,e),e.dispatchEvent(o)}else if(n&&e.click)e.click();else{if(void 0===e.fireEvent)throw new Error("Browser doesn't support triggering events");e.fireEvent("on"+t)}else c(e).trigger(t)},unwrapObservable:function(e){return r.isObservable(e)?e():e},peekObservable:function(e){return r.isObservable(e)?e.peek():e},toggleDomNodeCssClass:function(e,t,n){var i;t&&("object"==typeof e.classList?(i=e.classList[n?"add":"remove"],r.utils.arrayForEach(t.match(m),function(t){i.call(e.classList,t)})):"string"==typeof e.className.baseVal?g(e.className,"baseVal",t,n):g(e,"className",t,n))},setTextContent:function(e,t){var n=r.utils.unwrapObservable(t);null!==n&&n!==s||(n="");var i=r.virtualElements.firstChild(e);!i||3!=i.nodeType||r.virtualElements.nextSibling(i)?r.virtualElements.setDomNodeChildren(e,[e.ownerDocument.createTextNode(n)]):i.data=n,r.utils.forceRefresh(e)},setElementName:function(e,t){if(e.name=t,f<=7)try{e.mergeAttributes(u.createElement("<input name='"+e.name+"'/>"),!1)}catch(e){}},forceRefresh:function(e){if(f>=9){var t=1==e.nodeType?e:e.parentNode;t.style&&(t.style.zoom=t.style.zoom)}},ensureSelectElementIsRenderedCorrectly:function(e){if(f){var t=e.style.width;e.style.width=0,e.style.width=t}},range:function(e,t){e=r.utils.unwrapObservable(e),t=r.utils.unwrapObservable(t);for(var n=[],i=e;i<=t;i++)n.push(i);return n},makeArray:function(e){for(var t=[],r=0,n=e.length;r<n;r++)t.push(e[r]);return t},createSymbolOrString:function(e){return e},isIe6:6===f,isIe7:7===f,ieVersion:f,getFormFields:function(e,t){for(var n=r.utils.makeArray(e.getElementsByTagName("input")).concat(r.utils.makeArray(e.getElementsByTagName("textarea"))),i="string"==typeof t?function(e){return e.name===t}:function(e){return t.test(e.name)},o=[],s=n.length-1;s>=0;s--)i(n[s])&&o.push(n[s]);return o},parseJson:function(e){return"string"==typeof e&&(e=r.utils.stringTrim(e))?p&&p.parse?p.parse(e):new Function("return "+e)():null},stringifyJson:function(e,t,n){if(!p||!p.stringify)throw new Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");return p.stringify(r.utils.unwrapObservable(e),t,n)},postJson:function(t,n,i){var o=(i=i||{}).params||{},s=i.includeFields||this.fieldsIncludedWithJsonPost,a=t;if("object"==typeof t&&"form"===r.utils.tagNameLower(t)){var l=t;a=l.action;for(var c=s.length-1;c>=0;c--)for(var p=r.utils.getFormFields(l,s[c]),d=p.length-1;d>=0;d--)o[p[d].name]=p[d].value}n=r.utils.unwrapObservable(n);var h=u.createElement("form");for(var f in h.style.display="none",h.action=a,h.method="post",n){var m=u.createElement("input");m.type="hidden",m.name=f,m.value=r.utils.stringifyJson(r.utils.unwrapObservable(n[f])),h.appendChild(m)}e(o,function(e,t){var r=u.createElement("input");r.type="hidden",r.name=e,r.value=t,h.appendChild(r)}),u.body.appendChild(h),i.submitter?i.submitter(h):h.submit(),setTimeout(function(){h.parentNode.removeChild(h)},0)}}}(),r.exportSymbol("utils",r.utils),r.exportSymbol("utils.arrayForEach",r.utils.arrayForEach),r.exportSymbol("utils.arrayFirst",r.utils.arrayFirst),r.exportSymbol("utils.arrayFilter",r.utils.arrayFilter),r.exportSymbol("utils.arrayGetDistinctValues",r.utils.arrayGetDistinctValues),r.exportSymbol("utils.arrayIndexOf",r.utils.arrayIndexOf),r.exportSymbol("utils.arrayMap",r.utils.arrayMap),r.exportSymbol("utils.arrayPushAll",r.utils.arrayPushAll),r.exportSymbol("utils.arrayRemoveItem",r.utils.arrayRemoveItem),r.exportSymbol("utils.extend",r.utils.extend),r.exportSymbol("utils.fieldsIncludedWithJsonPost",r.utils.fieldsIncludedWithJsonPost),r.exportSymbol("utils.getFormFields",r.utils.getFormFields),r.exportSymbol("utils.peekObservable",r.utils.peekObservable),r.exportSymbol("utils.postJson",r.utils.postJson),r.exportSymbol("utils.parseJson",r.utils.parseJson),r.exportSymbol("utils.registerEventHandler",r.utils.registerEventHandler),r.exportSymbol("utils.stringifyJson",r.utils.stringifyJson),r.exportSymbol("utils.range",r.utils.range),r.exportSymbol("utils.toggleDomNodeCssClass",r.utils.toggleDomNodeCssClass),r.exportSymbol("utils.triggerEvent",r.utils.triggerEvent),r.exportSymbol("utils.unwrapObservable",r.utils.unwrapObservable),r.exportSymbol("utils.objectForEach",r.utils.objectForEach),r.exportSymbol("utils.addOrRemoveItem",r.utils.addOrRemoveItem),r.exportSymbol("utils.setTextContent",r.utils.setTextContent),r.exportSymbol("unwrap",r.utils.unwrapObservable),Function.prototype.bind||(Function.prototype.bind=function(e){var t=this;if(1===arguments.length)return function(){return t.apply(e,arguments)};var r=Array.prototype.slice.call(arguments,1);return function(){var n=r.slice(0);return n.push.apply(n,arguments),t.apply(e,n)}}),r.utils.domData=new function(){var e=0,t="__ko__"+(new Date).getTime(),r={};function n(n,i){var o=n[t],a=o&&"null"!==o&&r[o];if(!a){if(!i)return s;o=n[t]="ko"+e++,r[o]={}}return r[o]}return{get:function(e,t){var r=n(e,!1);return r===s?s:r[t]},set:function(e,t,r){if(r!==s||n(e,!1)!==s){var i=n(e,!0);i[t]=r}},clear:function(e){var n=e[t];return!!n&&(delete r[n],e[t]=null,!0)},nextKey:function(){return e+++t}}},r.exportSymbol("utils.domData",r.utils.domData),r.exportSymbol("utils.domData.clear",r.utils.domData.clear),r.utils.domNodeDisposal=new function(){var e=r.utils.domData.nextKey(),t={1:!0,8:!0,9:!0},n={1:!0,9:!0};function i(t,n){var i=r.utils.domData.get(t,e);return i===s&&n&&(i=[],r.utils.domData.set(t,e,i)),i}function o(e){var t=i(e,!1);if(t){t=t.slice(0);for(var s=0;s<t.length;s++)t[s](e)}r.utils.domData.clear(e),r.utils.domNodeDisposal.cleanExternalData(e),n[e.nodeType]&&function(e){for(var t,r=e.firstChild;t=r;)r=t.nextSibling,8===t.nodeType&&o(t)}(e)}return{addDisposeCallback:function(e,t){if("function"!=typeof t)throw new Error("Callback must be a function");i(e,!0).push(t)},removeDisposeCallback:function(t,n){var o=i(t,!1);o&&(r.utils.arrayRemoveItem(o,n),0==o.length&&function(t){r.utils.domData.set(t,e,s)}(t))},cleanNode:function(e){if(t[e.nodeType]&&(o(e),n[e.nodeType])){var i=[];r.utils.arrayPushAll(i,e.getElementsByTagName("*"));for(var s=0,a=i.length;s<a;s++)o(i[s])}return e},removeNode:function(e){r.cleanNode(e),e.parentNode&&e.parentNode.removeChild(e)},cleanExternalData:function(e){c&&"function"==typeof c.cleanData&&c.cleanData([e])}}},r.cleanNode=r.utils.domNodeDisposal.cleanNode,r.removeNode=r.utils.domNodeDisposal.removeNode,r.exportSymbol("cleanNode",r.cleanNode),r.exportSymbol("removeNode",r.removeNode),r.exportSymbol("utils.domNodeDisposal",r.utils.domNodeDisposal),r.exportSymbol("utils.domNodeDisposal.addDisposeCallback",r.utils.domNodeDisposal.addDisposeCallback),r.exportSymbol("utils.domNodeDisposal.removeDisposeCallback",r.utils.domNodeDisposal.removeDisposeCallback),function(){var e=[0,"",""],t=[1,"<table>","</table>"],n=[3,"<table><tbody><tr>","</tr></tbody></table>"],i=[1,"<select multiple='multiple'>","</select>"],o={thead:t,tbody:t,tfoot:t,tr:[2,"<table><tbody>","</tbody></table>"],td:n,th:n,option:i,optgroup:i},l=r.utils.ieVersion<=8;function p(t,n){n||(n=u);var i=n.parentWindow||n.defaultView||a,s=r.utils.stringTrim(t).toLowerCase(),c=n.createElement("div"),p=function(t){var r=t.match(/^<([a-z]+)[ >]/);return r&&o[r[1]]||e}(s),d=p[0],h="ignored<div>"+p[1]+t+p[2]+"</div>";for("function"==typeof i.innerShiv?c.appendChild(i.innerShiv(h)):(l&&n.appendChild(c),c.innerHTML=h,l&&c.parentNode.removeChild(c));d--;)c=c.lastChild;return r.utils.makeArray(c.lastChild.childNodes)}r.utils.parseHtmlFragment=function(e,t){return c?function(e,t){if(c.parseHTML)return c.parseHTML(e,t)||[];var r=c.clean([e],t);if(r&&r[0]){for(var n=r[0];n.parentNode&&11!==n.parentNode.nodeType;)n=n.parentNode;n.parentNode&&n.parentNode.removeChild(n)}return r}(e,t):p(e,t)},r.utils.setHtml=function(e,t){if(r.utils.emptyDomNode(e),null!==(t=r.utils.unwrapObservable(t))&&t!==s)if("string"!=typeof t&&(t=t.toString()),c)c(e).html(t);else for(var n=r.utils.parseHtmlFragment(t,e.ownerDocument),i=0;i<n.length;i++)e.appendChild(n[i])}}(),r.exportSymbol("utils.parseHtmlFragment",r.utils.parseHtmlFragment),r.exportSymbol("utils.setHtml",r.utils.setHtml),r.memoization=function(){var e={};function t(){return(4294967296*(1+Math.random())|0).toString(16).substring(1)}return{memoize:function(r){if("function"!=typeof r)throw new Error("You can only pass a function to ko.memoization.memoize()");var n=t()+t();return e[n]=r,"\x3c!--[ko_memo:"+n+"]--\x3e"},unmemoize:function(t,r){var n=e[t];if(n===s)throw new Error("Couldn't find any memo with ID "+t+". Perhaps it's already been unmemoized.");try{return n.apply(null,r||[]),!0}finally{delete e[t]}},unmemoizeDomNodeAndDescendants:function(e,t){var n=[];!function e(t,n){if(t)if(8==t.nodeType){var i=r.memoization.parseMemoText(t.nodeValue);null!=i&&n.push({domNode:t,memoId:i})}else if(1==t.nodeType)for(var o=0,s=t.childNodes,a=s.length;o<a;o++)e(s[o],n)}(e,n);for(var i=0,o=n.length;i<o;i++){var s=n[i].domNode,a=[s];t&&r.utils.arrayPushAll(a,t),r.memoization.unmemoize(n[i].memoId,a),s.nodeValue="",s.parentNode&&s.parentNode.removeChild(s)}},parseMemoText:function(e){var t=e.match(/^\[ko_memo\:(.*?)\]$/);return t?t[1]:null}}}(),r.exportSymbol("memoization",r.memoization),r.exportSymbol("memoization.memoize",r.memoization.memoize),r.exportSymbol("memoization.unmemoize",r.memoization.unmemoize),r.exportSymbol("memoization.parseMemoText",r.memoization.parseMemoText),r.exportSymbol("memoization.unmemoizeDomNodeAndDescendants",r.memoization.unmemoizeDomNodeAndDescendants),r.tasks=function(){var e,t,n,i=[],o=0,s=1,l=0;function c(){if(o)for(var e,t=o,n=0;l<o;)if(e=i[l++]){if(l>t){if(++n>=5e3){l=o,r.utils.deferError(Error("'Too much recursion' after processing "+n+" task groups."));break}t=o}try{e()}catch(e){r.utils.deferError(e)}}}function p(){c(),l=o=i.length=0}a.MutationObserver?(t=p,n=u.createElement("div"),new MutationObserver(t).observe(n,{attributes:!0}),e=function(){n.classList.toggle("foo")}):e=u&&"onreadystatechange"in u.createElement("script")?function(e){var t=u.createElement("script");t.onreadystatechange=function(){t.onreadystatechange=null,u.documentElement.removeChild(t),t=null,e()},u.documentElement.appendChild(t)}:function(e){setTimeout(e,0)};var d={scheduler:e,schedule:function(e){return o||r.tasks.scheduler(p),i[o++]=e,s++},cancel:function(e){var t=e-(s-o);t>=l&&t<o&&(i[t]=null)},resetForTesting:function(){var e=o-l;return l=o=i.length=0,e},runEarly:c};return d}(),r.exportSymbol("tasks",r.tasks),r.exportSymbol("tasks.schedule",r.tasks.schedule),r.exportSymbol("tasks.runEarly",r.tasks.runEarly),r.extenders={throttle:function(e,t){e.throttleEvaluation=t;var n=null;return r.dependentObservable({read:e,write:function(i){clearTimeout(n),n=r.utils.setTimeout(function(){e(i)},t)}})},rateLimit:function(e,t){var r,n,i;"number"==typeof t?r=t:(r=t.timeout,n=t.method),e._deferUpdates=!1,i="notifyWhenChangesStop"==n?d:o,e.limit(function(e){return i(e,r)})},deferred:function(e,t){if(!0!==t)throw new Error("The 'deferred' extender only accepts the value 'true', because it is not supported to turn deferral off once enabled.");e._deferUpdates||(e._deferUpdates=!0,e.limit(function(t){var n,i=!1;return function(){if(!i){r.tasks.cancel(n),n=r.tasks.schedule(t);try{i=!0,e.notifySubscribers(s,"dirty")}finally{i=!1}}}}))},notify:function(e,t){e.equalityComparer="always"==t?null:i}};var n={undefined:1,boolean:1,number:1,string:1};function i(e,t){var r=null===e||typeof e in n;return!!r&&e===t}function o(e,t){var n;return function(){n||(n=r.utils.setTimeout(function(){n=s,e()},t))}}function d(e,t){var n;return function(){clearTimeout(n),n=r.utils.setTimeout(e,t)}}r.exportSymbol("extenders",r.extenders),r.subscription=function(e,t,n){this._target=e,this.callback=t,this.disposeCallback=n,this.isDisposed=!1,r.exportProperty(this,"dispose",this.dispose)},r.subscription.prototype.dispose=function(){this.isDisposed=!0,this.disposeCallback()},r.subscribable=function(){r.utils.setPrototypeOfOrExtend(this,m),m.init(this)};var h="change";function f(e,t){t&&t!==h?"beforeChange"===t?this._limitBeforeChange(e):this._origNotifySubscribers(e,t):this._limitChange(e)}var m={init:function(e){e._subscriptions={change:[]},e._versionNumber=1},subscribe:function(e,t,n){var i=this;n=n||h;var o=t?e.bind(t):e,s=new r.subscription(i,o,function(){r.utils.arrayRemoveItem(i._subscriptions[n],s),i.afterSubscriptionRemove&&i.afterSubscriptionRemove(n)});return i.beforeSubscriptionAdd&&i.beforeSubscriptionAdd(n),i._subscriptions[n]||(i._subscriptions[n]=[]),i._subscriptions[n].push(s),s},notifySubscribers:function(e,t){if((t=t||h)===h&&this.updateVersion(),this.hasSubscriptionsForEvent(t)){var n=t===h&&this._changeSubscriptions||this._subscriptions[t].slice(0);try{r.dependencyDetection.begin();for(var i,o=0;i=n[o];++o)i.isDisposed||i.callback(e)}finally{r.dependencyDetection.end()}}},getVersion:function(){return this._versionNumber},hasChanged:function(e){return this.getVersion()!==e},updateVersion:function(){++this._versionNumber},limit:function(e){var t,n,i,o,s=this,a=r.isObservable(s);s._origNotifySubscribers||(s._origNotifySubscribers=s.notifySubscribers,s.notifySubscribers=f);var u=e(function(){s._notificationIsPending=!1,a&&o===s&&(o=s._evalIfChanged?s._evalIfChanged():s());var e=n||s.isDifferent(i,o);n=t=!1,e&&s._origNotifySubscribers(i=o)});s._limitChange=function(e){s._changeSubscriptions=s._subscriptions[h].slice(0),s._notificationIsPending=t=!0,o=e,u()},s._limitBeforeChange=function(e){t||(i=e,s._origNotifySubscribers(e,"beforeChange"))},s._notifyNextChangeIfValueIsDifferent=function(){s.isDifferent(i,s.peek(!0))&&(n=!0)}},hasSubscriptionsForEvent:function(e){return this._subscriptions[e]&&this._subscriptions[e].length},getSubscriptionsCount:function(e){if(e)return this._subscriptions[e]&&this._subscriptions[e].length||0;var t=0;return r.utils.objectForEach(this._subscriptions,function(e,r){"dirty"!==e&&(t+=r.length)}),t},isDifferent:function(e,t){return!this.equalityComparer||!this.equalityComparer(e,t)},extend:function(e){var t=this;return e&&r.utils.objectForEach(e,function(e,n){var i=r.extenders[e];"function"==typeof i&&(t=i(t,n)||t)}),t}};r.exportProperty(m,"subscribe",m.subscribe),r.exportProperty(m,"extend",m.extend),r.exportProperty(m,"getSubscriptionsCount",m.getSubscriptionsCount),r.utils.canSetPrototype&&r.utils.setPrototypeOf(m,Function.prototype),r.subscribable.fn=m,r.isSubscribable=function(e){return null!=e&&"function"==typeof e.subscribe&&"function"==typeof e.notifySubscribers},r.exportSymbol("subscribable",r.subscribable),r.exportSymbol("isSubscribable",r.isSubscribable),r.computedContext=r.dependencyDetection=function(){var e,t=[],n=0;function i(r){t.push(e),e=r}function o(){e=t.pop()}return{begin:i,end:o,registerDependency:function(t){if(e){if(!r.isSubscribable(t))throw new Error("Only subscribable things can act as dependencies");e.callback.call(e.callbackTarget,t,t._id||(t._id=++n))}},ignore:function(e,t,r){try{return i(),e.apply(t,r||[])}finally{o()}},getDependenciesCount:function(){if(e)return e.computed.getDependenciesCount()},isInitial:function(){if(e)return e.isInitial}}}(),r.exportSymbol("computedContext",r.computedContext),r.exportSymbol("computedContext.getDependenciesCount",r.computedContext.getDependenciesCount),r.exportSymbol("computedContext.isInitial",r.computedContext.isInitial),r.exportSymbol("ignoreDependencies",r.ignoreDependencies=r.dependencyDetection.ignore);var g=r.utils.createSymbolOrString("_latestValue");r.observable=function(e){function t(){return arguments.length>0?(t.isDifferent(t[g],arguments[0])&&(t.valueWillMutate(),t[g]=arguments[0],t.valueHasMutated()),this):(r.dependencyDetection.registerDependency(t),t[g])}return t[g]=e,r.utils.canSetPrototype||r.utils.extend(t,r.subscribable.fn),r.subscribable.fn.init(t),r.utils.setPrototypeOfOrExtend(t,v),r.options.deferUpdates&&r.extenders.deferred(t,!0),t};var v={equalityComparer:i,peek:function(){return this[g]},valueHasMutated:function(){this.notifySubscribers(this[g])},valueWillMutate:function(){this.notifySubscribers(this[g],"beforeChange")}};r.utils.canSetPrototype&&r.utils.setPrototypeOf(v,r.subscribable.fn);var b=r.observable.protoProperty="__ko_proto__";v[b]=r.observable,r.hasPrototype=function(e,t){return null!==e&&e!==s&&e[b]!==s&&(e[b]===t||r.hasPrototype(e[b],t))},r.isObservable=function(e){return r.hasPrototype(e,r.observable)},r.isWriteableObservable=function(e){return"function"==typeof e&&e[b]===r.observable||!("function"!=typeof e||e[b]!==r.dependentObservable||!e.hasWriteFunction)},r.exportSymbol("observable",r.observable),r.exportSymbol("isObservable",r.isObservable),r.exportSymbol("isWriteableObservable",r.isWriteableObservable),r.exportSymbol("isWritableObservable",r.isWriteableObservable),r.exportSymbol("observable.fn",v),r.exportProperty(v,"peek",v.peek),r.exportProperty(v,"valueHasMutated",v.valueHasMutated),r.exportProperty(v,"valueWillMutate",v.valueWillMutate),r.observableArray=function(e){if("object"!=typeof(e=e||[])||!("length"in e))throw new Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");var t=r.observable(e);return r.utils.setPrototypeOfOrExtend(t,r.observableArray.fn),t.extend({trackArrayChanges:!0})},r.observableArray.fn={remove:function(e){for(var t=this.peek(),n=[],i="function"!=typeof e||r.isObservable(e)?function(t){return t===e}:e,o=0;o<t.length;o++){var s=t[o];i(s)&&(0===n.length&&this.valueWillMutate(),n.push(s),t.splice(o,1),o--)}return n.length&&this.valueHasMutated(),n},removeAll:function(e){if(e===s){var t=this.peek(),n=t.slice(0);return this.valueWillMutate(),t.splice(0,t.length),this.valueHasMutated(),n}return e?this.remove(function(t){return r.utils.arrayIndexOf(e,t)>=0}):[]},destroy:function(e){var t=this.peek(),n="function"!=typeof e||r.isObservable(e)?function(t){return t===e}:e;this.valueWillMutate();for(var i=t.length-1;i>=0;i--)n(t[i])&&(t[i]._destroy=!0);this.valueHasMutated()},destroyAll:function(e){return e===s?this.destroy(function(){return!0}):e?this.destroy(function(t){return r.utils.arrayIndexOf(e,t)>=0}):[]},indexOf:function(e){var t=this();return r.utils.arrayIndexOf(t,e)},replace:function(e,t){var r=this.indexOf(e);r>=0&&(this.valueWillMutate(),this.peek()[r]=t,this.valueHasMutated())}},r.utils.canSetPrototype&&r.utils.setPrototypeOf(r.observableArray.fn,r.observable.fn),r.utils.arrayForEach(["pop","push","reverse","shift","sort","splice","unshift"],function(e){r.observableArray.fn[e]=function(){var t=this.peek();this.valueWillMutate(),this.cacheDiffForKnownOperation(t,e,arguments);var r=t[e].apply(t,arguments);return this.valueHasMutated(),r===t?this:r}}),r.utils.arrayForEach(["slice"],function(e){r.observableArray.fn[e]=function(){var t=this();return t[e].apply(t,arguments)}}),r.exportSymbol("observableArray",r.observableArray);var y="arrayChange";r.extenders.trackArrayChanges=function(e,t){if(e.compareArrayOptions={},t&&"object"==typeof t&&r.utils.extend(e.compareArrayOptions,t),e.compareArrayOptions.sparse=!0,!e.cacheDiffForKnownOperation){var n,i,o=!1,a=null,u=0,l=e.beforeSubscriptionAdd,c=e.afterSubscriptionRemove;e.beforeSubscriptionAdd=function(t){l&&l.call(e,t),t===y&&function(){if(!o){o=!0,i=e.notifySubscribers,e.notifySubscribers=function(e,t){return t&&t!==h||++u,i.apply(this,arguments)};var t=[].concat(e.peek()||[]);a=null,n=e.subscribe(function(n){if(n=[].concat(n||[]),e.hasSubscriptionsForEvent(y))var i=function(t,n){return(!a||u>1)&&(a=r.utils.compareArrays(t,n,e.compareArrayOptions)),a}(t,n);t=n,a=null,u=0,i&&i.length&&e.notifySubscribers(i,y)})}}()},e.afterSubscriptionRemove=function(t){c&&c.call(e,t),t!==y||e.hasSubscriptionsForEvent(y)||(i&&(e.notifySubscribers=i,i=s),n.dispose(),o=!1)},e.cacheDiffForKnownOperation=function(e,t,n){if(o&&!u){var i=[],s=e.length,l=n.length,c=0;switch(t){case"push":c=s;case"unshift":for(var p=0;p<l;p++)y("added",n[p],c+p);break;case"pop":c=s-1;case"shift":s&&y("deleted",e[c],c);break;case"splice":for(var d=Math.min(Math.max(0,n[0]<0?s+n[0]:n[0]),s),h=1===l?s:Math.min(d+(n[1]||0),s),f=d+l-2,m=Math.max(h,f),g=[],v=[],p=d,b=2;p<m;++p,++b)p<h&&v.push(y("deleted",e[p],p)),p<f&&g.push(y("added",n[b],p));r.utils.findMovesInArrayComparison(v,g);break;default:return}a=i}function y(e,t,r){return i[i.length]={status:e,value:t,index:r}}}}};var _=r.utils.createSymbolOrString("_state");function w(e,t){null!==t&&t.dispose&&t.dispose()}function T(e,t){var r=this.computedObservable,n=r[_];n.isDisposed||(this.disposalCount&&this.disposalCandidates[t]?(r.addDependencyTracking(t,e,this.disposalCandidates[t]),this.disposalCandidates[t]=null,--this.disposalCount):n.dependencyTracking[t]||r.addDependencyTracking(t,e,n.isSleeping?{_target:e}:r.subscribeToDependency(e)),e._notificationIsPending&&e._notifyNextChangeIfValueIsDifferent())}r.computed=r.dependentObservable=function(e,t,n){if("object"==typeof e?n=e:(n=n||{},e&&(n.read=e)),"function"!=typeof n.read)throw Error("Pass a function that returns the value of the ko.computed");var i=n.write,o={latestValue:s,isStale:!0,isDirty:!0,isBeingEvaluated:!1,suppressDisposalUntilDisposeWhenReturnsFalse:!1,isDisposed:!1,pure:!1,isSleeping:!1,readFunction:n.read,evaluatorFunctionTarget:t||n.owner,disposeWhenNodeIsRemoved:n.disposeWhenNodeIsRemoved||n.disposeWhenNodeIsRemoved||null,disposeWhen:n.disposeWhen||n.disposeWhen,domNodeDisposalCallback:null,dependencyTracking:{},dependenciesCount:0,evaluationTimeoutInstance:null};function a(){if(arguments.length>0){if("function"!=typeof i)throw new Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");return i.apply(o.evaluatorFunctionTarget,arguments),this}return r.dependencyDetection.registerDependency(a),(o.isDirty||o.isSleeping&&a.haveDependenciesChanged())&&a.evaluateImmediate(),o.latestValue}return a[_]=o,a.hasWriteFunction="function"==typeof i,r.utils.canSetPrototype||r.utils.extend(a,r.subscribable.fn),r.subscribable.fn.init(a),r.utils.setPrototypeOfOrExtend(a,j),n.pure?(o.pure=!0,o.isSleeping=!0,r.utils.extend(a,x)):n.deferEvaluation&&r.utils.extend(a,E),r.options.deferUpdates&&r.extenders.deferred(a,!0),a._options=n,o.disposeWhenNodeIsRemoved&&(o.suppressDisposalUntilDisposeWhenReturnsFalse=!0,o.disposeWhenNodeIsRemoved.nodeType||(o.disposeWhenNodeIsRemoved=null)),o.isSleeping||n.deferEvaluation||a.evaluateImmediate(),o.disposeWhenNodeIsRemoved&&a.isActive()&&r.utils.domNodeDisposal.addDisposeCallback(o.disposeWhenNodeIsRemoved,o.domNodeDisposalCallback=function(){a.dispose()}),a};var j={equalityComparer:i,getDependenciesCount:function(){return this[_].dependenciesCount},addDependencyTracking:function(e,t,r){if(this[_].pure&&t===this)throw Error("A 'pure' computed must not be called recursively");this[_].dependencyTracking[e]=r,r._order=this[_].dependenciesCount++,r._version=t.getVersion()},haveDependenciesChanged:function(){var e,t,r=this[_].dependencyTracking;for(e in r)if(r.hasOwnProperty(e)&&(t=r[e],this._evalDelayed&&t._target._notificationIsPending||t._target.hasChanged(t._version)))return!0},markDirty:function(){this._evalDelayed&&!this[_].isBeingEvaluated&&this._evalDelayed(!1)},isActive:function(){var e=this[_];return e.isDirty||e.dependenciesCount>0},respondToChange:function(){this._notificationIsPending?this[_].isDirty&&(this[_].isStale=!0):this.evaluatePossiblyAsync()},subscribeToDependency:function(e){if(e._deferUpdates&&!this[_].disposeWhenNodeIsRemoved){var t=e.subscribe(this.markDirty,this,"dirty"),r=e.subscribe(this.respondToChange,this);return{_target:e,dispose:function(){t.dispose(),r.dispose()}}}return e.subscribe(this.evaluatePossiblyAsync,this)},evaluatePossiblyAsync:function(){var e=this,t=e.throttleEvaluation;t&&t>=0?(clearTimeout(this[_].evaluationTimeoutInstance),this[_].evaluationTimeoutInstance=r.utils.setTimeout(function(){e.evaluateImmediate(!0)},t)):e._evalDelayed?e._evalDelayed(!0):e.evaluateImmediate(!0)},evaluateImmediate:function(e){var t=this[_],n=t.disposeWhen,i=!1;if(!t.isBeingEvaluated&&!t.isDisposed){if(t.disposeWhenNodeIsRemoved&&!r.utils.domNodeIsAttachedToDocument(t.disposeWhenNodeIsRemoved)||n&&n()){if(!t.suppressDisposalUntilDisposeWhenReturnsFalse)return void this.dispose()}else t.suppressDisposalUntilDisposeWhenReturnsFalse=!1;t.isBeingEvaluated=!0;try{i=this.evaluateImmediate_CallReadWithDependencyDetection(e)}finally{t.isBeingEvaluated=!1}return t.dependenciesCount||this.dispose(),i}},evaluateImmediate_CallReadWithDependencyDetection:function(e){var t=this[_],n=!1,i=t.pure?s:!t.dependenciesCount,o={computedObservable:this,disposalCandidates:t.dependencyTracking,disposalCount:t.dependenciesCount};r.dependencyDetection.begin({callbackTarget:o,callback:T,computed:this,isInitial:i}),t.dependencyTracking={},t.dependenciesCount=0;var a=this.evaluateImmediate_CallReadThenEndDependencyDetection(t,o);return this.isDifferent(t.latestValue,a)&&(t.isSleeping||this.notifySubscribers(t.latestValue,"beforeChange"),t.latestValue=a,this._latestValue=a,t.isSleeping?this.updateVersion():e&&this.notifySubscribers(t.latestValue),n=!0),i&&this.notifySubscribers(t.latestValue,"awake"),n},evaluateImmediate_CallReadThenEndDependencyDetection:function(e,t){try{var n=e.readFunction;return e.evaluatorFunctionTarget?n.call(e.evaluatorFunctionTarget):n()}finally{r.dependencyDetection.end(),t.disposalCount&&!e.isSleeping&&r.utils.objectForEach(t.disposalCandidates,w),e.isStale=e.isDirty=!1}},peek:function(e){var t=this[_];return(t.isDirty&&(e||!t.dependenciesCount)||t.isSleeping&&this.haveDependenciesChanged())&&this.evaluateImmediate(),t.latestValue},limit:function(e){r.subscribable.fn.limit.call(this,e),this._evalIfChanged=function(){return this[_].isStale?this.evaluateImmediate():this[_].isDirty=!1,this[_].latestValue},this._evalDelayed=function(e){this._limitBeforeChange(this[_].latestValue),this[_].isDirty=!0,e&&(this[_].isStale=!0),this._limitChange(this)}},dispose:function(){var e=this[_];!e.isSleeping&&e.dependencyTracking&&r.utils.objectForEach(e.dependencyTracking,function(e,t){t.dispose&&t.dispose()}),e.disposeWhenNodeIsRemoved&&e.domNodeDisposalCallback&&r.utils.domNodeDisposal.removeDisposeCallback(e.disposeWhenNodeIsRemoved,e.domNodeDisposalCallback),e.dependencyTracking=null,e.dependenciesCount=0,e.isDisposed=!0,e.isStale=!1,e.isDirty=!1,e.isSleeping=!1,e.disposeWhenNodeIsRemoved=null}},x={beforeSubscriptionAdd:function(e){var t=this,n=t[_];if(!n.isDisposed&&n.isSleeping&&"change"==e){if(n.isSleeping=!1,n.isStale||t.haveDependenciesChanged())n.dependencyTracking=null,n.dependenciesCount=0,t.evaluateImmediate()&&t.updateVersion();else{var i=[];r.utils.objectForEach(n.dependencyTracking,function(e,t){i[t._order]=e}),r.utils.arrayForEach(i,function(e,r){var i=n.dependencyTracking[e],o=t.subscribeToDependency(i._target);o._order=r,o._version=i._version,n.dependencyTracking[e]=o})}n.isDisposed||t.notifySubscribers(n.latestValue,"awake")}},afterSubscriptionRemove:function(e){var t=this[_];t.isDisposed||"change"!=e||this.hasSubscriptionsForEvent("change")||(r.utils.objectForEach(t.dependencyTracking,function(e,r){r.dispose&&(t.dependencyTracking[e]={_target:r._target,_order:r._order,_version:r._version},r.dispose())}),t.isSleeping=!0,this.notifySubscribers(s,"asleep"))},getVersion:function(){var e=this[_];return e.isSleeping&&(e.isStale||this.haveDependenciesChanged())&&this.evaluateImmediate(),r.subscribable.fn.getVersion.call(this)}},E={beforeSubscriptionAdd:function(e){"change"!=e&&"beforeChange"!=e||this.peek()}};r.utils.canSetPrototype&&r.utils.setPrototypeOf(j,r.subscribable.fn);var D,C=r.observable.protoProperty;r.computed[C]=r.observable,j[C]=r.computed,r.isComputed=function(e){return r.hasPrototype(e,r.computed)},r.isPureComputed=function(e){return r.hasPrototype(e,r.computed)&&e[_]&&e[_].pure},r.exportSymbol("computed",r.computed),r.exportSymbol("dependentObservable",r.computed),r.exportSymbol("isComputed",r.isComputed),r.exportSymbol("isPureComputed",r.isPureComputed),r.exportSymbol("computed.fn",j),r.exportProperty(j,"peek",j.peek),r.exportProperty(j,"dispose",j.dispose),r.exportProperty(j,"isActive",j.isActive),r.exportProperty(j,"getDependenciesCount",j.getDependenciesCount),r.pureComputed=function(e,t){return"function"==typeof e?r.computed(e,t,{pure:!0}):((e=r.utils.extend({},e)).pure=!0,r.computed(e,t))},r.exportSymbol("pureComputed",r.pureComputed),function(){function e(){this.keys=[],this.values=[]}r.toJS=function(t){if(0==arguments.length)throw new Error("When calling ko.toJS, pass the object you want to convert.");return function t(r,n,i){i=i||new e;var o=!("object"!=typeof(r=n(r))||null===r||r===s||r instanceof RegExp||r instanceof Date||r instanceof String||r instanceof Number||r instanceof Boolean);if(!o)return r;var a=r instanceof Array?[]:{};return i.save(r,a),function(e,t){if(e instanceof Array){for(var r=0;r<e.length;r++)t(r);"function"==typeof e.toJSON&&t("toJSON")}else for(var n in e)t(n)}(r,function(e){var o=n(r[e]);switch(typeof o){case"boolean":case"number":case"string":case"function":a[e]=o;break;case"object":case"undefined":var u=i.get(o);a[e]=u!==s?u:t(o,n,i)}}),a}(t,function(e){for(var t=0;r.isObservable(e)&&t<10;t++)e=e();return e})},r.toJSON=function(e,t,n){var i=r.toJS(e);return r.utils.stringifyJson(i,t,n)},e.prototype={constructor:e,save:function(e,t){var n=r.utils.arrayIndexOf(this.keys,e);n>=0?this.values[n]=t:(this.keys.push(e),this.values.push(t))},get:function(e){var t=r.utils.arrayIndexOf(this.keys,e);return t>=0?this.values[t]:s}}}(),r.exportSymbol("toJS",r.toJS),r.exportSymbol("toJSON",r.toJSON),r.selectExtensions={readValue:function(e){switch(r.utils.tagNameLower(e)){case"option":return!0===e.__ko__hasDomDataOptionValue__?r.utils.domData.get(e,r.bindingHandlers.options.optionValueDomDataKey):r.utils.ieVersion<=7?e.getAttributeNode("value")&&e.getAttributeNode("value").specified?e.value:e.text:e.value;case"select":return e.selectedIndex>=0?r.selectExtensions.readValue(e.options[e.selectedIndex]):s;default:return e.value}},writeValue:function(e,t,n){switch(r.utils.tagNameLower(e)){case"option":switch(typeof t){case"string":r.utils.domData.set(e,r.bindingHandlers.options.optionValueDomDataKey,s),"__ko__hasDomDataOptionValue__"in e&&delete e.__ko__hasDomDataOptionValue__,e.value=t;break;default:r.utils.domData.set(e,r.bindingHandlers.options.optionValueDomDataKey,t),e.__ko__hasDomDataOptionValue__=!0,e.value="number"==typeof t?t:""}break;case"select":""!==t&&null!==t||(t=s);for(var i,o=-1,a=0,u=e.options.length;a<u;++a)if((i=r.selectExtensions.readValue(e.options[a]))==t||""==i&&t===s){o=a;break}(n||o>=0||t===s&&e.size>1)&&(e.selectedIndex=o);break;default:null!==t&&t!==s||(t=""),e.value=t}}},r.exportSymbol("selectExtensions",r.selectExtensions),r.exportSymbol("selectExtensions.readValue",r.selectExtensions.readValue),r.exportSymbol("selectExtensions.writeValue",r.selectExtensions.writeValue),r.expressionRewriting=function(){var e=["true","false","null","undefined"],t=/^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i,n=RegExp("\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\\\.)*'|/(?:[^/\\\\]|\\\\.)*/w*|[^\\s:,/][^,\"'{}()/:[\\]]*[^\\s,\"'{}()/:[\\]]|[^\\s]","g"),i=/[\])"'A-Za-z0-9_$]+$/,o={in:1,return:1,typeof:1};function s(e){var t=r.utils.stringTrim(e);123===t.charCodeAt(0)&&(t=t.slice(1,-1));var s,a=[],u=t.match(n),l=[],c=0;if(u){u.push(",");for(var p,d=0;p=u[d];++d){var h=p.charCodeAt(0);if(44===h){if(c<=0){a.push(s&&l.length?{key:s,value:l.join("")}:{unknown:s||l.join("")}),s=c=0,l=[];continue}}else if(58===h){if(!c&&!s&&1===l.length){s=l.pop();continue}}else if(47===h&&d&&p.length>1){var f=u[d-1].match(i);f&&!o[f[0]]&&(t=t.substr(t.indexOf(p)+1),(u=t.match(n)).push(","),d=-1,p="/")}else 40===h||123===h||91===h?++c:41===h||125===h||93===h?--c:s||l.length||34!==h&&39!==h||(p=p.slice(1,-1));l.push(p)}}return a}var a={};return{bindingRewriteValidators:[],twoWayBindings:a,parseObjectLiteral:s,preProcessBindings:function(n,i){function o(n,i){var s,d;if(!p){if((d=r.getBindingHandler(n))&&d.preprocess&&!(i=d.preprocess(i,n,o)))return;a[n]&&(s=function(n){if(r.utils.arrayIndexOf(e,n)>=0)return!1;var i=n.match(t);return null!==i&&(i[1]?"Object("+i[1]+")"+i[2]:n)}(i))&&l.push("'"+n+"':function(_z){"+s+"=_z}")}c&&(i="function(){return "+i+" }"),u.push("'"+n+"':"+i)}var u=[],l=[],c=(i=i||{}).valueAccessors,p=i.bindingParams,d="string"==typeof n?s(n):n;return r.utils.arrayForEach(d,function(e){o(e.key||e.unknown,e.value)}),l.length&&o("_ko_property_writers","{"+l.join(",")+" }"),u.join(",")},keyValueArrayContainsKey:function(e,t){for(var r=0;r<e.length;r++)if(e[r].key==t)return!0;return!1},writeValueToProperty:function(e,t,n,i,o){if(e&&r.isObservable(e))!r.isWriteableObservable(e)||o&&e.peek()===i||e(i);else{var s=t.get("_ko_property_writers");s&&s[n]&&s[n](i)}}}}(),r.exportSymbol("expressionRewriting",r.expressionRewriting),r.exportSymbol("expressionRewriting.bindingRewriteValidators",r.expressionRewriting.bindingRewriteValidators),r.exportSymbol("expressionRewriting.parseObjectLiteral",r.expressionRewriting.parseObjectLiteral),r.exportSymbol("expressionRewriting.preProcessBindings",r.expressionRewriting.preProcessBindings),r.exportSymbol("expressionRewriting._twoWayBindings",r.expressionRewriting.twoWayBindings),r.exportSymbol("jsonExpressionRewriting",r.expressionRewriting),r.exportSymbol("jsonExpressionRewriting.insertPropertyAccessorsIntoJson",r.expressionRewriting.preProcessBindings),function(){var e=u&&"\x3c!--test--\x3e"===u.createComment("test").text,t=e?/^<!--\s*ko(?:\s+([\s\S]+))?\s*-->$/:/^\s*ko(?:\s+([\s\S]+))?\s*$/,n=e?/^<!--\s*\/ko\s*-->$/:/^\s*\/ko\s*$/,i={ul:!0,ol:!0};function o(r){return 8==r.nodeType&&t.test(e?r.text:r.nodeValue)}function s(t){return 8==t.nodeType&&n.test(e?t.text:t.nodeValue)}function a(e,t){for(var r=e,n=1,i=[];r=r.nextSibling;){if(s(r)&&0==--n)return i;i.push(r),o(r)&&n++}if(!t)throw new Error("Cannot find closing comment tag to match: "+e.nodeValue);return null}function l(e,t){var r=a(e,t);return r?r.length>0?r[r.length-1].nextSibling:e.nextSibling:null}function c(e){var t=e.firstChild,r=null;if(t)do{if(r)r.push(t);else if(o(t)){var n=l(t,!0);n?t=n:r=[t]}else s(t)&&(r=[t])}while(t=t.nextSibling);return r}r.virtualElements={allowedBindings:{},childNodes:function(e){return o(e)?a(e):e.childNodes},emptyNode:function(e){if(o(e))for(var t=r.virtualElements.childNodes(e),n=0,i=t.length;n<i;n++)r.removeNode(t[n]);else r.utils.emptyDomNode(e)},setDomNodeChildren:function(e,t){if(o(e)){r.virtualElements.emptyNode(e);for(var n=e.nextSibling,i=0,s=t.length;i<s;i++)n.parentNode.insertBefore(t[i],n)}else r.utils.setDomNodeChildren(e,t)},prepend:function(e,t){o(e)?e.parentNode.insertBefore(t,e.nextSibling):e.firstChild?e.insertBefore(t,e.firstChild):e.appendChild(t)},insertAfter:function(e,t,n){n?o(e)?e.parentNode.insertBefore(t,n.nextSibling):n.nextSibling?e.insertBefore(t,n.nextSibling):e.appendChild(t):r.virtualElements.prepend(e,t)},firstChild:function(e){return o(e)?!e.nextSibling||s(e.nextSibling)?null:e.nextSibling:e.firstChild},nextSibling:function(e){return o(e)&&(e=l(e)),e.nextSibling&&s(e.nextSibling)?null:e.nextSibling},hasBindingValue:o,virtualNodeBindingValue:function(r){var n=(e?r.text:r.nodeValue).match(t);return n?n[1]:null},normaliseVirtualElementDomStructure:function(e){if(i[r.utils.tagNameLower(e)]){var t=e.firstChild;if(t)do{if(1===t.nodeType){var n=c(t);if(n)for(var o=t.nextSibling,s=0;s<n.length;s++)o?e.insertBefore(n[s],o):e.appendChild(n[s])}}while(t=t.nextSibling)}}}}(),r.exportSymbol("virtualElements",r.virtualElements),r.exportSymbol("virtualElements.allowedBindings",r.virtualElements.allowedBindings),r.exportSymbol("virtualElements.emptyNode",r.virtualElements.emptyNode),r.exportSymbol("virtualElements.insertAfter",r.virtualElements.insertAfter),r.exportSymbol("virtualElements.prepend",r.virtualElements.prepend),r.exportSymbol("virtualElements.setDomNodeChildren",r.virtualElements.setDomNodeChildren),r.bindingProvider=function(){this.bindingCache={}},r.utils.extend(r.bindingProvider.prototype,{nodeHasBindings:function(e){switch(e.nodeType){case 1:return null!=e.getAttribute("data-bind")||r.components.getComponentNameForNode(e);case 8:return r.virtualElements.hasBindingValue(e);default:return!1}},getBindings:function(e,t){var n=this.getBindingsString(e,t),i=n?this.parseBindingsString(n,t,e):null;return r.components.addBindingsForCustomElement(i,e,t,!1)},getBindingAccessors:function(e,t){var n=this.getBindingsString(e,t),i=n?this.parseBindingsString(n,t,e,{valueAccessors:!0}):null;return r.components.addBindingsForCustomElement(i,e,t,!0)},getBindingsString:function(e,t){switch(e.nodeType){case 1:return e.getAttribute("data-bind");case 8:return r.virtualElements.virtualNodeBindingValue(e);default:return null}},parseBindingsString:function(e,t,n,i){try{var o=function(e,t,n){var i=e+(n&&n.valueAccessors||"");return t[i]||(t[i]=function(e,t){var n=r.expressionRewriting.preProcessBindings(e,t);return new Function("$context","$element","with($context){with($data||{}){return{"+n+"}}}")}(e,n))}(e,this.bindingCache,i);return o(t,n)}catch(t){throw t.message="Unable to parse bindings.\nBindings value: "+e+"\nMessage: "+t.message,t}}}),r.bindingProvider.instance=new r.bindingProvider,r.exportSymbol("bindingProvider",r.bindingProvider),function(){r.bindingHandlers={};var e={script:!0,textarea:!0,template:!0};function t(e){return function(){return e}}function n(e){return e()}function i(e){return r.utils.objectMap(r.dependencyDetection.ignore(e),function(t,r){return function(){return e()[r]}})}function o(e,t){return i(this.getBindings.bind(this,e,t))}function u(e,t,n){var i,o=r.virtualElements.firstChild(t),s=r.bindingProvider.instance,a=s.preprocessNode;if(a){for(;i=o;)o=r.virtualElements.nextSibling(i),a.call(s,i);o=r.virtualElements.firstChild(t)}for(;i=o;)o=r.virtualElements.nextSibling(i),l(e,i,n)}function l(t,n,i){var o=!0,s=1===n.nodeType;s&&r.virtualElements.normaliseVirtualElementDomStructure(n);var a=s&&i||r.bindingProvider.instance.nodeHasBindings(n);a&&(o=d(n,null,t,i).shouldBindDescendants),o&&!e[r.utils.tagNameLower(n)]&&u(t,n,!s)}r.getBindingHandler=function(e){return r.bindingHandlers[e]},r.bindingContext=function(e,t,n,i,o){function a(){var o=p?e():e,s=r.utils.unwrapObservable(o);return t?(t._subscribable&&t._subscribable(),r.utils.extend(c,t),c._subscribable=l):(c.$parents=[],c.$root=s,c.ko=r),c.$rawData=o,c.$data=s,n&&(c[n]=s),i&&i(c,t,s),c.$data}var u,l,c=this,p="function"==typeof e&&!r.isObservable(e);o&&o.exportDependencies?a():(l=r.dependentObservable(a,null,{disposeWhen:function(){return u&&!r.utils.anyDomNodeIsAttachedToDocument(u)},disposeWhenNodeIsRemoved:!0})).isActive()&&(c._subscribable=l,l.equalityComparer=null,u=[],l._addNode=function(e){u.push(e),r.utils.domNodeDisposal.addDisposeCallback(e,function(e){r.utils.arrayRemoveItem(u,e),u.length||(l.dispose(),c._subscribable=l=s)})})},r.bindingContext.prototype.createChildContext=function(e,t,n,i){return new r.bindingContext(e,this,t,function(e,t){e.$parentContext=t,e.$parent=t.$data,e.$parents=(t.$parents||[]).slice(0),e.$parents.unshift(e.$parent),n&&n(e)},i)},r.bindingContext.prototype.extend=function(e){return new r.bindingContext(this._subscribable||this.$data,this,null,function(t,n){t.$rawData=n.$rawData,r.utils.extend(t,"function"==typeof e?e():e)})},r.bindingContext.prototype.createStaticChildContext=function(e,t){return this.createChildContext(e,t,null,{exportDependencies:!0})};var p=r.utils.domData.nextKey();function d(e,t,i,a){var u,l,c=r.utils.domData.get(e,p);if(!t){if(c)throw Error("You cannot apply bindings multiple times to the same element.");r.utils.domData.set(e,p,!0)}if(!c&&a&&r.storedBindingContextForNode(e,i),t&&"function"!=typeof t)u=t;else{var d=r.bindingProvider.instance,h=d.getBindingAccessors||o,f=r.dependentObservable(function(){return(u=t?t(i,e):h.call(d,e,i))&&i._subscribable&&i._subscribable(),u},null,{disposeWhenNodeIsRemoved:e});u&&f.isActive()||(f=null)}if(u){var m=f?function(e){return function(){return n(f()[e])}}:function(e){return u[e]};function g(){return r.utils.objectMap(f?f():u,n)}g.get=function(e){return u[e]&&n(m(e))},g.has=function(e){return e in u};var v=function(e){var t=[],n={},i=[];return r.utils.objectForEach(e,function o(s){if(!n[s]){var a=r.getBindingHandler(s);a&&(a.after&&(i.push(s),r.utils.arrayForEach(a.after,function(t){if(e[t]){if(-1!==r.utils.arrayIndexOf(i,t))throw Error("Cannot combine the following bindings, because they have a cyclic dependency: "+i.join(", "));o(t)}}),i.length--),t.push({key:s,handler:a})),n[s]=!0}}),t}(u);r.utils.arrayForEach(v,function(t){var n=t.handler.init,o=t.handler.update,a=t.key;8===e.nodeType&&function(e){if(!r.virtualElements.allowedBindings[e])throw new Error("The binding '"+e+"' cannot be used with virtual elements")}(a);try{"function"==typeof n&&r.dependencyDetection.ignore(function(){var t=n(e,m(a),g,i.$data,i);if(t&&t.controlsDescendantBindings){if(l!==s)throw new Error("Multiple bindings ("+l+" and "+a+") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");l=a}}),"function"==typeof o&&r.dependentObservable(function(){o(e,m(a),g,i.$data,i)},null,{disposeWhenNodeIsRemoved:e})}catch(e){throw e.message='Unable to process binding "'+a+": "+u[a]+'"\nMessage: '+e.message,e}})}return{shouldBindDescendants:l===s}}var h=r.utils.domData.nextKey();function f(e){return e&&e instanceof r.bindingContext?e:new r.bindingContext(e)}r.storedBindingContextForNode=function(e,t){if(2!=arguments.length)return r.utils.domData.get(e,h);r.utils.domData.set(e,h,t),t._subscribable&&t._subscribable._addNode(e)},r.applyBindingAccessorsToNode=function(e,t,n){return 1===e.nodeType&&r.virtualElements.normaliseVirtualElementDomStructure(e),d(e,t,f(n),!0)},r.applyBindingsToNode=function(e,n,o){var s=f(o);return r.applyBindingAccessorsToNode(e,function(e,n,o){return"function"==typeof e?i(e.bind(null,n,o)):r.utils.objectMap(e,t)}(n,s,e),s)},r.applyBindingsToDescendants=function(e,t){1!==t.nodeType&&8!==t.nodeType||u(f(e),t,!0)},r.applyBindings=function(e,t){if(!c&&a.jQuery&&(c=a.jQuery),t&&1!==t.nodeType&&8!==t.nodeType)throw new Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");t=t||a.document.body,l(f(e),t,!0)},r.contextFor=function(e){switch(e.nodeType){case 1:case 8:var t=r.storedBindingContextForNode(e);if(t)return t;if(e.parentNode)return r.contextFor(e.parentNode)}return s},r.dataFor=function(e){var t=r.contextFor(e);return t?t.$data:s},r.exportSymbol("bindingHandlers",r.bindingHandlers),r.exportSymbol("applyBindings",r.applyBindings),r.exportSymbol("applyBindingsToDescendants",r.applyBindingsToDescendants),r.exportSymbol("applyBindingAccessorsToNode",r.applyBindingAccessorsToNode),r.exportSymbol("applyBindingsToNode",r.applyBindingsToNode),r.exportSymbol("contextFor",r.contextFor),r.exportSymbol("dataFor",r.dataFor)}(),function(e){var t={},n={};function i(t,r){return t.hasOwnProperty(r)?t[r]:e}function o(t,n,i,s){s||(s=r.components.loaders.slice(0));var a=s.shift();if(a){var u=a[t];if(u){var l=!1,c=u.apply(a,n.concat(function(e){l?i(null):null!==e?i(e):o(t,n,i,s)}));if(c!==e&&(l=!0,!a.suppressLoaderExceptions))throw new Error("Component loaders must supply values by invoking the callback, not by returning values synchronously.")}else o(t,n,i,s)}else i(null)}r.components={get:function(e,s){var a=i(n,e);a?a.isSynchronousComponent?r.dependencyDetection.ignore(function(){s(a.definition)}):r.tasks.schedule(function(){s(a.definition)}):function(e,s){var a,u=i(t,e);u?u.subscribe(s):((u=t[e]=new r.subscribable).subscribe(s),function(e,t){o("getConfig",[e],function(r){r?o("loadComponent",[e,r],function(e){t(e,r)}):t(null,null)})}(e,function(i,o){var s=!(!o||!o.synchronous);n[e]={definition:i,isSynchronousComponent:s},delete t[e],a||s?u.notifySubscribers(i):r.tasks.schedule(function(){u.notifySubscribers(i)})}),a=!0)}(e,s)},clearCachedDefinition:function(e){delete n[e]},_getFirstResultFromLoaders:o},r.components.loaders=[],r.exportSymbol("components",r.components),r.exportSymbol("components.get",r.components.get),r.exportSymbol("components.clearCachedDefinition",r.components.clearCachedDefinition)}(),function(e){var n={};r.components.register=function(e,t){if(!t)throw new Error("Invalid configuration for "+e);if(r.components.isRegistered(e))throw new Error("Component "+e+" is already registered");n[e]=t},r.components.isRegistered=function(e){return n.hasOwnProperty(e)},r.components.unregister=function(e){delete n[e],r.components.clearCachedDefinition(e)},r.components.defaultLoader={getConfig:function(e,t){var r=n.hasOwnProperty(e)?n[e]:null;t(r)},loadComponent:function(e,t,n){var o=c(e);l(o,t,function(t){!function(e,t,n,o){var s={},a=2,u=function(){0==--a&&o(s)},c=n.template,p=n.viewModel;c?l(t,c,function(t){r.components._getFirstResultFromLoaders("loadTemplate",[e,t],function(e){s.template=e,u()})}):u(),p?l(t,p,function(t){r.components._getFirstResultFromLoaders("loadViewModel",[e,t],function(e){s[i]=e,u()})}):u()}(e,o,t,n)})},loadTemplate:function(e,t,n){!function(e,t,n){if("string"==typeof t)n(r.utils.parseHtmlFragment(t));else if(t instanceof Array)n(t);else if(s(t))n(r.utils.makeArray(t.childNodes));else if(t.element){var i=t.element;if(c=i,a.HTMLElement?c instanceof HTMLElement:c&&c.tagName&&1===c.nodeType)n(o(i));else if("string"==typeof i){var l=u.getElementById(i);l?n(o(l)):e("Cannot find element with ID "+i)}else e("Unknown element type: "+i)}else e("Unknown template value: "+t);var c}(c(e),t,n)},loadViewModel:function(e,t,r){!function e(t,r,n){if("function"==typeof r)n(function(e){return new r(e)});else if("function"==typeof r[i])n(r[i]);else if("instance"in r){var o=r.instance;n(function(e,t){return o})}else"viewModel"in r?e(t,r.viewModel,n):t("Unknown viewModel value: "+r)}(c(e),t,r)}};var i="createViewModel";function o(e){switch(r.utils.tagNameLower(e)){case"script":return r.utils.parseHtmlFragment(e.text);case"textarea":return r.utils.parseHtmlFragment(e.value);case"template":if(s(e.content))return r.utils.cloneNodes(e.content.childNodes)}return r.utils.cloneNodes(e.childNodes)}function s(e){return a.DocumentFragment?e instanceof DocumentFragment:e&&11===e.nodeType}function l(e,r,n){"string"==typeof r.require?t||a.require?(t||a.require)([r.require],n):e("Uses require, but no AMD loader is present"):n(r)}function c(e){return function(t){throw new Error("Component '"+e+"': "+t)}}r.exportSymbol("components.register",r.components.register),r.exportSymbol("components.isRegistered",r.components.isRegistered),r.exportSymbol("components.unregister",r.components.unregister),r.exportSymbol("components.defaultLoader",r.components.defaultLoader),r.components.loaders.push(r.components.defaultLoader),r.components._allRegisteredComponents=n}(),function(e){r.components.getComponentNameForNode=function(e){var t=r.utils.tagNameLower(e);if(r.components.isRegistered(t)&&(-1!=t.indexOf("-")||""+e=="[object HTMLUnknownElement]"||r.utils.ieVersion<=8&&e.tagName===t))return t},r.components.addBindingsForCustomElement=function(e,t,i,o){if(1===t.nodeType){var s=r.components.getComponentNameForNode(t);if(s){if((e=e||{}).component)throw new Error('Cannot use the "component" binding on a custom element matching a component');var a={name:s,params:function(e,t){var i=e.getAttribute("params");if(i){var o=n.parseBindingsString(i,t,e,{valueAccessors:!0,bindingParams:!0}),s=r.utils.objectMap(o,function(t,n){return r.computed(t,null,{disposeWhenNodeIsRemoved:e})}),a=r.utils.objectMap(s,function(t,n){var i=t.peek();return t.isActive()?r.computed({read:function(){return r.utils.unwrapObservable(t())},write:r.isWriteableObservable(i)&&function(e){t()(e)},disposeWhenNodeIsRemoved:e}):i});return a.hasOwnProperty("$raw")||(a.$raw=s),a}return{$raw:{}}}(t,i)};e.component=o?function(){return a}:a}}return e};var t,n=new r.bindingProvider;r.utils.ieVersion<9&&(r.components.register=(t=r.components.register,function(e){return u.createElement(e),t.apply(this,arguments)}),u.createDocumentFragment=function(e){return function(){var t=e(),n=r.components._allRegisteredComponents;for(var i in n)n.hasOwnProperty(i)&&t.createElement(i);return t}}(u.createDocumentFragment))}(),D=0,r.bindingHandlers.component={init:function(e,t,n,i,o){var s,a,u=function(){var e=s&&s.dispose;"function"==typeof e&&e.call(s),s=null,a=null},l=r.utils.makeArray(r.virtualElements.childNodes(e));return r.utils.domNodeDisposal.addDisposeCallback(e,u),r.computed(function(){var n,i,c=r.utils.unwrapObservable(t());if("string"==typeof c?n=c:(n=r.utils.unwrapObservable(c.name),i=r.utils.unwrapObservable(c.params)),!n)throw new Error("No component name specified");var p=a=++D;r.components.get(n,function(t){if(a===p){if(u(),!t)throw new Error("Unknown component '"+n+"'");!function(e,t,n){var i=t.template;if(!i)throw new Error("Component '"+e+"' has no template");var o=r.utils.cloneNodes(i);r.virtualElements.setDomNodeChildren(n,o)}(n,t,e);var c=function(e,t,r,n){var i=e.createViewModel;return i?i.call(e,n,{element:t,templateNodes:r}):n}(t,e,l,i),d=o.createChildContext(c,void 0,function(e){e.$component=c,e.$componentTemplateNodes=l});s=c,r.applyBindingsToDescendants(d,e)}})},null,{disposeWhenNodeIsRemoved:e}),{controlsDescendantBindings:!0}}},r.virtualElements.allowedBindings.component=!0;var N={class:"className",for:"htmlFor"};function S(e,t,n,i){r.bindingHandlers[e]={init:function(e,o,s,a,u){var l,c;return r.computed(function(){var s=o(),a=r.utils.unwrapObservable(s),p=!n!=!a,d=!c,h=d||t||p!==l;h&&(d&&r.computedContext.getDependenciesCount()&&(c=r.utils.cloneNodes(r.virtualElements.childNodes(e),!0)),p?(d||r.virtualElements.setDomNodeChildren(e,r.utils.cloneNodes(c)),r.applyBindingsToDescendants(i?i(u,s):u,e)):r.virtualElements.emptyNode(e),l=p)},null,{disposeWhenNodeIsRemoved:e}),{controlsDescendantBindings:!0}}},r.expressionRewriting.bindingRewriteValidators[e]=!1,r.virtualElements.allowedBindings[e]=!0}r.bindingHandlers.attr={update:function(e,t,n){var i=r.utils.unwrapObservable(t())||{};r.utils.objectForEach(i,function(t,n){var i=!1===(n=r.utils.unwrapObservable(n))||null===n||n===s;i&&e.removeAttribute(t),r.utils.ieVersion<=8&&t in N?(t=N[t],i?e.removeAttribute(t):e[t]=n):i||e.setAttribute(t,n.toString()),"name"===t&&r.utils.setElementName(e,i?"":n.toString())})}},r.bindingHandlers.checked={after:["value","attr"],init:function(e,t,n){var i=r.pureComputed(function(){return n.has("checkedValue")?r.utils.unwrapObservable(n.get("checkedValue")):n.has("value")?r.utils.unwrapObservable(n.get("value")):e.value});function o(){var o=e.checked,s=h?i():o;if(!r.computedContext.isInitial()&&(!u||o)){var a=r.dependencyDetection.ignore(t);if(c){var l=p?a.peek():a;d!==s?(o&&(r.utils.addOrRemoveItem(l,s,!0),r.utils.addOrRemoveItem(l,d,!1)),d=s):r.utils.addOrRemoveItem(l,s,o),p&&r.isWriteableObservable(a)&&a(l)}else r.expressionRewriting.writeValueToProperty(a,n,"checked",s,!0)}}var a="checkbox"==e.type,u="radio"==e.type;if(a||u){var l=t(),c=a&&r.utils.unwrapObservable(l)instanceof Array,p=!(c&&l.push&&l.splice),d=c?i():s,h=u||c;u&&!e.name&&r.bindingHandlers.uniqueName.init(e,function(){return!0}),r.computed(o,null,{disposeWhenNodeIsRemoved:e}),r.utils.registerEventHandler(e,"click",o),r.computed(function(){var n=r.utils.unwrapObservable(t());e.checked=c?r.utils.arrayIndexOf(n,i())>=0:a?n:i()===n},null,{disposeWhenNodeIsRemoved:e}),l=s}}},r.expressionRewriting.twoWayBindings.checked=!0,r.bindingHandlers.checkedValue={update:function(e,t){e.value=r.utils.unwrapObservable(t())}},r.bindingHandlers.css={update:function(e,t){var n=r.utils.unwrapObservable(t());null!==n&&"object"==typeof n?r.utils.objectForEach(n,function(t,n){n=r.utils.unwrapObservable(n),r.utils.toggleDomNodeCssClass(e,t,n)}):(n=r.utils.stringTrim(String(n||"")),r.utils.toggleDomNodeCssClass(e,e.__ko__cssValue,!1),e.__ko__cssValue=n,r.utils.toggleDomNodeCssClass(e,n,!0))}},r.bindingHandlers.enable={update:function(e,t){var n=r.utils.unwrapObservable(t());n&&e.disabled?e.removeAttribute("disabled"):n||e.disabled||(e.disabled=!0)}},r.bindingHandlers.disable={update:function(e,t){r.bindingHandlers.enable.update(e,function(){return!r.utils.unwrapObservable(t())})}},r.bindingHandlers.event={init:function(e,t,n,i,o){var s=t()||{};r.utils.objectForEach(s,function(s){"string"==typeof s&&r.utils.registerEventHandler(e,s,function(e){var a,u=t()[s];if(u){try{var l=r.utils.makeArray(arguments);i=o.$data,l.unshift(i),a=u.apply(i,l)}finally{!0!==a&&(e.preventDefault?e.preventDefault():e.returnValue=!1)}var c=!1!==n.get(s+"Bubble");c||(e.cancelBubble=!0,e.stopPropagation&&e.stopPropagation())}})})}},r.bindingHandlers.foreach={makeTemplateValueAccessor:function(e){return function(){var t=e(),n=r.utils.peekObservable(t);return n&&"number"!=typeof n.length?(r.utils.unwrapObservable(t),{foreach:n.data,as:n.as,includeDestroyed:n.includeDestroyed,afterAdd:n.afterAdd,beforeRemove:n.beforeRemove,afterRender:n.afterRender,beforeMove:n.beforeMove,afterMove:n.afterMove,templateEngine:r.nativeTemplateEngine.instance}):{foreach:t,templateEngine:r.nativeTemplateEngine.instance}}},init:function(e,t,n,i,o){return r.bindingHandlers.template.init(e,r.bindingHandlers.foreach.makeTemplateValueAccessor(t))},update:function(e,t,n,i,o){return r.bindingHandlers.template.update(e,r.bindingHandlers.foreach.makeTemplateValueAccessor(t),n,i,o)}},r.expressionRewriting.bindingRewriteValidators.foreach=!1,r.virtualElements.allowedBindings.foreach=!0,r.bindingHandlers.hasfocus={init:function(e,t,n){var i=function(i){e.__ko_hasfocusUpdating=!0;var o=e.ownerDocument;if("activeElement"in o){var s;try{s=o.activeElement}catch(e){s=o.body}i=s===e}var a=t();r.expressionRewriting.writeValueToProperty(a,n,"hasfocus",i,!0),e.__ko_hasfocusLastValue=i,e.__ko_hasfocusUpdating=!1},o=i.bind(null,!0),s=i.bind(null,!1);r.utils.registerEventHandler(e,"focus",o),r.utils.registerEventHandler(e,"focusin",o),r.utils.registerEventHandler(e,"blur",s),r.utils.registerEventHandler(e,"focusout",s)},update:function(e,t){var n=!!r.utils.unwrapObservable(t());e.__ko_hasfocusUpdating||e.__ko_hasfocusLastValue===n||(n?e.focus():e.blur(),!n&&e.__ko_hasfocusLastValue&&e.ownerDocument.body.focus(),r.dependencyDetection.ignore(r.utils.triggerEvent,null,[e,n?"focusin":"focusout"]))}},r.expressionRewriting.twoWayBindings.hasfocus=!0,r.bindingHandlers.hasFocus=r.bindingHandlers.hasfocus,r.expressionRewriting.twoWayBindings.hasFocus=!0,r.bindingHandlers.html={init:function(){return{controlsDescendantBindings:!0}},update:function(e,t){r.utils.setHtml(e,t())}},S("if"),S("ifnot",!1,!0),S("with",!0,!1,function(e,t){return e.createStaticChildContext(t)});var O,A={};r.bindingHandlers.options={init:function(e){if("select"!==r.utils.tagNameLower(e))throw new Error("options binding applies only to SELECT elements");for(;e.length>0;)e.remove(0);return{controlsDescendantBindings:!0}},update:function(e,t,n){function i(){return r.utils.arrayFilter(e.options,function(e){return e.selected})}var o,a,u=0==e.length,l=e.multiple,c=!u&&l?e.scrollTop:null,p=r.utils.unwrapObservable(t()),d=n.get("valueAllowUnset")&&n.has("value"),h=n.get("optionsIncludeDestroyed"),f={},m=[];function g(e,t,r){var n=typeof t;return"function"==n?t(e):"string"==n?e[t]:r}d||(l?m=r.utils.arrayMap(i(),r.selectExtensions.readValue):e.selectedIndex>=0&&m.push(r.selectExtensions.readValue(e.options[e.selectedIndex]))),p&&(void 0===p.length&&(p=[p]),a=r.utils.arrayFilter(p,function(e){return h||e===s||null===e||!r.utils.unwrapObservable(e._destroy)}),n.has("optionsCaption")&&null!==(o=r.utils.unwrapObservable(n.get("optionsCaption")))&&o!==s&&a.unshift(A));var v=!1;function b(t,i){if(v&&d)r.selectExtensions.writeValue(e,r.utils.unwrapObservable(n.get("value")),!0);else if(m.length){var o=r.utils.arrayIndexOf(m,r.selectExtensions.readValue(i[0]))>=0;r.utils.setOptionNodeSelectionState(i[0],o),v&&!o&&r.dependencyDetection.ignore(r.utils.triggerEvent,null,[e,"change"])}}f.beforeRemove=function(t){e.removeChild(t)};var y=b;n.has("optionsAfterRender")&&"function"==typeof n.get("optionsAfterRender")&&(y=function(e,t){b(0,t),r.dependencyDetection.ignore(n.get("optionsAfterRender"),null,[t[0],e!==A?e:s])}),r.utils.setDomNodeChildrenFromArrayMapping(e,a,function(t,i,o){o.length&&(m=!d&&o[0].selected?[r.selectExtensions.readValue(o[0])]:[],v=!0);var a=e.ownerDocument.createElement("option");if(t===A)r.utils.setTextContent(a,n.get("optionsCaption")),r.selectExtensions.writeValue(a,s);else{var u=g(t,n.get("optionsValue"),t);r.selectExtensions.writeValue(a,r.utils.unwrapObservable(u));var l=g(t,n.get("optionsText"),u);r.utils.setTextContent(a,l)}return[a]},f,y),r.dependencyDetection.ignore(function(){d?r.selectExtensions.writeValue(e,r.utils.unwrapObservable(n.get("value")),!0):(l?m.length&&i().length<m.length:m.length&&e.selectedIndex>=0?r.selectExtensions.readValue(e.options[e.selectedIndex])!==m[0]:m.length||e.selectedIndex>=0)&&r.utils.triggerEvent(e,"change")}),r.utils.ensureSelectElementIsRenderedCorrectly(e),c&&Math.abs(c-e.scrollTop)>20&&(e.scrollTop=c)}},r.bindingHandlers.options.optionValueDomDataKey=r.utils.domData.nextKey(),r.bindingHandlers.selectedOptions={after:["options","foreach"],init:function(e,t,n){r.utils.registerEventHandler(e,"change",function(){var i=t(),o=[];r.utils.arrayForEach(e.getElementsByTagName("option"),function(e){e.selected&&o.push(r.selectExtensions.readValue(e))}),r.expressionRewriting.writeValueToProperty(i,n,"selectedOptions",o)})},update:function(e,t){if("select"!=r.utils.tagNameLower(e))throw new Error("values binding applies only to SELECT elements");var n=r.utils.unwrapObservable(t()),i=e.scrollTop;n&&"number"==typeof n.length&&r.utils.arrayForEach(e.getElementsByTagName("option"),function(e){var t=r.utils.arrayIndexOf(n,r.selectExtensions.readValue(e))>=0;e.selected!=t&&r.utils.setOptionNodeSelectionState(e,t)}),e.scrollTop=i}},r.expressionRewriting.twoWayBindings.selectedOptions=!0,r.bindingHandlers.style={update:function(e,t){var n=r.utils.unwrapObservable(t()||{});r.utils.objectForEach(n,function(t,n){null!==(n=r.utils.unwrapObservable(n))&&n!==s&&!1!==n||(n=""),e.style[t]=n})}},r.bindingHandlers.submit={init:function(e,t,n,i,o){if("function"!=typeof t())throw new Error("The value for a submit binding must be a function");r.utils.registerEventHandler(e,"submit",function(r){var n,i=t();try{n=i.call(o.$data,e)}finally{!0!==n&&(r.preventDefault?r.preventDefault():r.returnValue=!1)}})}},r.bindingHandlers.text={init:function(){return{controlsDescendantBindings:!0}},update:function(e,t){r.utils.setTextContent(e,t())}},r.virtualElements.allowedBindings.text=!0,function(){if(a&&a.navigator)var e=function(e){if(e)return parseFloat(e[1])},t=a.opera&&a.opera.version&&parseInt(a.opera.version()),n=a.navigator.userAgent,i=e(n.match(/^(?:(?!chrome).)*version\/([^ ]*) safari/i)),o=e(n.match(/Firefox\/([^ ]*)/));if(r.utils.ieVersion<10)var u=r.utils.domData.nextKey(),l=r.utils.domData.nextKey(),c=function(e){var t=this.activeElement,n=t&&r.utils.domData.get(t,l);n&&n(e)},p=function(e,t){var n=e.ownerDocument;r.utils.domData.get(n,u)||(r.utils.domData.set(n,u,!0),r.utils.registerEventHandler(n,"selectionchange",c)),r.utils.domData.set(e,l,t)};r.bindingHandlers.textInput={init:function(e,n,a){var u,l,c=e.value,d=function(t){clearTimeout(u),l=u=s;var i=e.value;c!==i&&(t&&(e._ko_textInputProcessedEvent=t.type),c=i,r.expressionRewriting.writeValueToProperty(n(),a,"textInput",i))},h=function(t){if(!u){l=e.value;var n=d.bind(e,{type:t.type});u=r.utils.setTimeout(n,4)}},f=9==r.utils.ieVersion?h:d,m=function(){var t=r.utils.unwrapObservable(n());null!==t&&t!==s||(t=""),l===s||t!==l?e.value!==t&&(c=t,e.value=t):r.utils.setTimeout(m,4)},g=function(t,n){r.utils.registerEventHandler(e,t,n)};r.bindingHandlers.textInput._forceUpdateOn?r.utils.arrayForEach(r.bindingHandlers.textInput._forceUpdateOn,function(e){"after"==e.slice(0,5)?g(e.slice(5),h):g(e,d)}):r.utils.ieVersion<10?(g("propertychange",function(e){"value"===e.propertyName&&f(e)}),8==r.utils.ieVersion&&(g("keyup",d),g("keydown",d)),r.utils.ieVersion>=8&&(p(e,f),g("dragend",h))):(g("input",d),i<5&&"textarea"===r.utils.tagNameLower(e)?(g("keydown",h),g("paste",h),g("cut",h)):t<11?g("keydown",h):o<4&&(g("DOMAutoComplete",d),g("dragdrop",d),g("drop",d))),g("change",d),r.computed(m,null,{disposeWhenNodeIsRemoved:e})}},r.expressionRewriting.twoWayBindings.textInput=!0,r.bindingHandlers.textinput={preprocess:function(e,t,r){r("textInput",e)}}}(),r.bindingHandlers.uniqueName={init:function(e,t){if(t()){var n="ko_unique_"+ ++r.bindingHandlers.uniqueName.currentIndex;r.utils.setElementName(e,n)}}},r.bindingHandlers.uniqueName.currentIndex=0,r.bindingHandlers.value={after:["options","foreach"],init:function(e,t,n){if("input"!=e.tagName.toLowerCase()||"checkbox"!=e.type&&"radio"!=e.type){var i=["change"],o=n.get("valueUpdate"),s=!1,a=null;o&&("string"==typeof o&&(o=[o]),r.utils.arrayPushAll(i,o),i=r.utils.arrayGetDistinctValues(i));var u=function(){a=null,s=!1;var i=t(),o=r.selectExtensions.readValue(e);r.expressionRewriting.writeValueToProperty(i,n,"value",o)},l=r.utils.ieVersion&&"input"==e.tagName.toLowerCase()&&"text"==e.type&&"off"!=e.autocomplete&&(!e.form||"off"!=e.form.autocomplete);l&&-1==r.utils.arrayIndexOf(i,"propertychange")&&(r.utils.registerEventHandler(e,"propertychange",function(){s=!0}),r.utils.registerEventHandler(e,"focus",function(){s=!1}),r.utils.registerEventHandler(e,"blur",function(){s&&u()})),r.utils.arrayForEach(i,function(t){var n=u;r.utils.stringStartsWith(t,"after")&&(n=function(){a=r.selectExtensions.readValue(e),r.utils.setTimeout(u,0)},t=t.substring("after".length)),r.utils.registerEventHandler(e,t,n)});var c=function(){var i=r.utils.unwrapObservable(t()),o=r.selectExtensions.readValue(e);if(null===a||i!==a){var s=i!==o;if(s)if("select"===r.utils.tagNameLower(e)){var u=n.get("valueAllowUnset"),l=function(){r.selectExtensions.writeValue(e,i,u)};l(),u||i===r.selectExtensions.readValue(e)?r.utils.setTimeout(l,0):r.dependencyDetection.ignore(r.utils.triggerEvent,null,[e,"change"])}else r.selectExtensions.writeValue(e,i)}else r.utils.setTimeout(c,0)};r.computed(c,null,{disposeWhenNodeIsRemoved:e})}else r.applyBindingAccessorsToNode(e,{checkedValue:t})},update:function(){}},r.expressionRewriting.twoWayBindings.value=!0,r.bindingHandlers.visible={update:function(e,t){var n=r.utils.unwrapObservable(t()),i=!("none"==e.style.display);n&&!i?e.style.display="":!n&&i&&(e.style.display="none")}},O="click",r.bindingHandlers[O]={init:function(e,t,n,i,o){return r.bindingHandlers.event.init.call(this,e,function(){var e={};return e[O]=t(),e},n,i,o)}},r.templateEngine=function(){},r.templateEngine.prototype.renderTemplateSource=function(e,t,r,n){throw new Error("Override renderTemplateSource")},r.templateEngine.prototype.createJavaScriptEvaluatorBlock=function(e){throw new Error("Override createJavaScriptEvaluatorBlock")},r.templateEngine.prototype.makeTemplateSource=function(e,t){if("string"==typeof e){var n=(t=t||u).getElementById(e);if(!n)throw new Error("Cannot find template with ID "+e);return new r.templateSources.domElement(n)}if(1==e.nodeType||8==e.nodeType)return new r.templateSources.anonymousTemplate(e);throw new Error("Unknown template type: "+e)},r.templateEngine.prototype.renderTemplate=function(e,t,r,n){var i=this.makeTemplateSource(e,n);return this.renderTemplateSource(i,t,r,n)},r.templateEngine.prototype.isTemplateRewritten=function(e,t){return!1===this.allowTemplateRewriting||this.makeTemplateSource(e,t).data("isRewritten")},r.templateEngine.prototype.rewriteTemplate=function(e,t,r){var n=this.makeTemplateSource(e,r),i=t(n.text());n.text(i),n.data("isRewritten",!0)},r.exportSymbol("templateEngine",r.templateEngine),r.templateRewriting=function(){var e=/(<([a-z]+\d*)(?:\s+(?!data-bind\s*=\s*)[a-z0-9\-]+(?:=(?:\"[^\"]*\"|\'[^\']*\'|[^>]*))?)*\s+)data-bind\s*=\s*(["'])([\s\S]*?)\3/gi,t=/<!--\s*ko\b\s*([\s\S]*?)\s*-->/g;function n(e,t,n,i){var o=r.expressionRewriting.parseObjectLiteral(e);!function(e){for(var t=r.expressionRewriting.bindingRewriteValidators,n=0;n<e.length;n++){var i=e[n].key;if(t.hasOwnProperty(i)){var o=t[i];if("function"==typeof o){var s=o(e[n].value);if(s)throw new Error(s)}else if(!o)throw new Error("This template engine does not support the '"+i+"' binding within its templates")}}}(o);var s=r.expressionRewriting.preProcessBindings(o,{valueAccessors:!0}),a="ko.__tr_ambtns(function($context,$element){return(function(){return{ "+s+" } })()},'"+n.toLowerCase()+"')";return i.createJavaScriptEvaluatorBlock(a)+t}return{ensureTemplateIsRewritten:function(e,t,n){t.isTemplateRewritten(e,n)||t.rewriteTemplate(e,function(e){return r.templateRewriting.memoizeBindingAttributeSyntax(e,t)},n)},memoizeBindingAttributeSyntax:function(r,i){return r.replace(e,function(){return n(arguments[4],arguments[1],arguments[2],i)}).replace(t,function(){return n(arguments[1],"\x3c!-- ko --\x3e","#comment",i)})},applyMemoizedBindingsToNextSibling:function(e,t){return r.memoization.memoize(function(n,i){var o=n.nextSibling;o&&o.nodeName.toLowerCase()===t&&r.applyBindingAccessorsToNode(o,e,i)})}}}(),r.exportSymbol("__tr_ambtns",r.templateRewriting.applyMemoizedBindingsToNextSibling),function(){r.templateSources={},r.templateSources.domElement=function(e){if(this.domElement=e,e){var t=r.utils.tagNameLower(e);this.templateType="script"===t?1:"textarea"===t?2:"template"==t&&e.content&&11===e.content.nodeType?3:4}},r.templateSources.domElement.prototype.text=function(){var e=1===this.templateType?"text":2===this.templateType?"value":"innerHTML";if(0==arguments.length)return this.domElement[e];var t=arguments[0];"innerHTML"===e?r.utils.setHtml(this.domElement,t):this.domElement[e]=t};var e=r.utils.domData.nextKey()+"_";r.templateSources.domElement.prototype.data=function(t){if(1===arguments.length)return r.utils.domData.get(this.domElement,e+t);r.utils.domData.set(this.domElement,e+t,arguments[1])};var t=r.utils.domData.nextKey();function n(e){return r.utils.domData.get(e,t)||{}}function i(e,n){r.utils.domData.set(e,t,n)}r.templateSources.domElement.prototype.nodes=function(){var e=this.domElement;if(0==arguments.length){var t=n(e),r=t.containerData;return r||(3===this.templateType?e.content:4===this.templateType?e:s)}var o=arguments[0];i(e,{containerData:o})},r.templateSources.anonymousTemplate=function(e){this.domElement=e},r.templateSources.anonymousTemplate.prototype=new r.templateSources.domElement,r.templateSources.anonymousTemplate.prototype.constructor=r.templateSources.anonymousTemplate,r.templateSources.anonymousTemplate.prototype.text=function(){if(0==arguments.length){var e=n(this.domElement);return e.textData===s&&e.containerData&&(e.textData=e.containerData.innerHTML),e.textData}var t=arguments[0];i(this.domElement,{textData:t})},r.exportSymbol("templateSources",r.templateSources),r.exportSymbol("templateSources.domElement",r.templateSources.domElement),r.exportSymbol("templateSources.anonymousTemplate",r.templateSources.anonymousTemplate)}(),function(){var e;function t(e,t,n){for(var i,o=e,s=r.virtualElements.nextSibling(t);o&&(i=o)!==s;)o=r.virtualElements.nextSibling(i),n(i,o)}function n(e,n){if(e.length){var i=e[0],o=e[e.length-1],s=i.parentNode,a=r.bindingProvider.instance,u=a.preprocessNode;if(u){if(t(i,o,function(e,t){var r=e.previousSibling,n=u.call(a,e);n&&(e===i&&(i=n[0]||t),e===o&&(o=n[n.length-1]||r))}),e.length=0,!i)return;i===o?e.push(i):(e.push(i,o),r.utils.fixUpContinuousNodeArray(e,s))}t(i,o,function(e){1!==e.nodeType&&8!==e.nodeType||r.applyBindings(n,e)}),t(i,o,function(e){1!==e.nodeType&&8!==e.nodeType||r.memoization.unmemoizeDomNodeAndDescendants(e,[n])}),r.utils.fixUpContinuousNodeArray(e,s)}}function i(e){return e.nodeType?e:e.length>0?e[0]:null}function o(t,o,s,a,u){u=u||{};var l=t&&i(t),c=(l||s||{}).ownerDocument,p=u.templateEngine||e;r.templateRewriting.ensureTemplateIsRewritten(s,p,c);var d=p.renderTemplate(s,a,u,c);if("number"!=typeof d.length||d.length>0&&"number"!=typeof d[0].nodeType)throw new Error("Template engine must return an array of DOM nodes");var h=!1;switch(o){case"replaceChildren":r.virtualElements.setDomNodeChildren(t,d),h=!0;break;case"replaceNode":r.utils.replaceDomNodes(t,d),h=!0;break;case"ignoreTargetNode":break;default:throw new Error("Unknown renderMode: "+o)}return h&&(n(d,a),u.afterRender&&r.dependencyDetection.ignore(u.afterRender,null,[d,a.$data])),d}function a(e,t,n){return r.isObservable(e)?e():"function"==typeof e?e(t,n):e}r.setTemplateEngine=function(t){if(t!=s&&!(t instanceof r.templateEngine))throw new Error("templateEngine must inherit from ko.templateEngine");e=t},r.renderTemplate=function(t,n,u,l,c){if(((u=u||{}).templateEngine||e)==s)throw new Error("Set a template engine before calling renderTemplate");if(c=c||"replaceChildren",l){var p=i(l),d=p&&"replaceNode"==c?p.parentNode:p;return r.dependentObservable(function(){var e=n&&n instanceof r.bindingContext?n:new r.bindingContext(n,null,null,null,{exportDependencies:!0}),s=a(t,e.$data,e),d=o(l,c,s,e,u);"replaceNode"==c&&(p=i(l=d))},null,{disposeWhen:function(){return!p||!r.utils.domNodeIsAttachedToDocument(p)},disposeWhenNodeIsRemoved:d})}return r.memoization.memoize(function(e){r.renderTemplate(t,n,u,e,"replaceNode")})},r.renderTemplateForEach=function(e,t,i,u,l){var c,p=function(t,r){c=l.createChildContext(t,i.as,function(e){e.$index=r});var n=a(e,t,c);return o(null,"ignoreTargetNode",n,c,i)},d=function(e,t,r){n(t,c),i.afterRender&&i.afterRender(t,e),c=null};return r.dependentObservable(function(){var e=r.utils.unwrapObservable(t)||[];void 0===e.length&&(e=[e]);var n=r.utils.arrayFilter(e,function(e){return i.includeDestroyed||e===s||null===e||!r.utils.unwrapObservable(e._destroy)});r.dependencyDetection.ignore(r.utils.setDomNodeChildrenFromArrayMapping,null,[u,n,p,i,d])},null,{disposeWhenNodeIsRemoved:u})};var u=r.utils.domData.nextKey();r.bindingHandlers.template={init:function(e,t){var n=r.utils.unwrapObservable(t());if("string"==typeof n||n.name)r.virtualElements.emptyNode(e);else if("nodes"in n){var i=n.nodes||[];if(r.isObservable(i))throw new Error('The "nodes" option must be a plain, non-observable array.');var o=r.utils.moveCleanedNodesToContainerElement(i);new r.templateSources.anonymousTemplate(e).nodes(o)}else{var s=r.virtualElements.childNodes(e),o=r.utils.moveCleanedNodesToContainerElement(s);new r.templateSources.anonymousTemplate(e).nodes(o)}return{controlsDescendantBindings:!0}},update:function(e,t,n,i,o){var a,l=t(),c=r.utils.unwrapObservable(l),p=!0,d=null;if("string"==typeof c?(a=l,c={}):(a=c.name,"if"in c&&(p=r.utils.unwrapObservable(c.if)),p&&"ifnot"in c&&(p=!r.utils.unwrapObservable(c.ifnot))),"foreach"in c){var h=p&&c.foreach||[];d=r.renderTemplateForEach(a||e,h,c,e,o)}else if(p){var f="data"in c?o.createStaticChildContext(c.data,c.as):o;d=r.renderTemplate(a||e,f,c,e)}else r.virtualElements.emptyNode(e);!function(e,t){var n=r.utils.domData.get(e,u);n&&"function"==typeof n.dispose&&n.dispose(),r.utils.domData.set(e,u,t&&t.isActive()?t:s)}(e,d)}},r.expressionRewriting.bindingRewriteValidators.template=function(e){var t=r.expressionRewriting.parseObjectLiteral(e);return 1==t.length&&t[0].unknown?null:r.expressionRewriting.keyValueArrayContainsKey(t,"name")?null:"This template engine does not support anonymous templates nested within its templates"},r.virtualElements.allowedBindings.template=!0}(),r.exportSymbol("setTemplateEngine",r.setTemplateEngine),r.exportSymbol("renderTemplate",r.renderTemplate),r.utils.findMovesInArrayComparison=function(e,t,r){var n,i,o,s,a;if(e.length&&t.length)for(n=i=0;(!r||n<r)&&(s=e[i]);++i){for(o=0;a=t[o];++o)if(s.value===a.value){s.moved=a.index,a.moved=s.index,t.splice(o,1),n=o=0;break}n+=o}},r.utils.compareArrays=function(){var e="added",t="deleted";function n(e,t,n,i,o){var s,a,u,l,c,p,d=Math.min,h=Math.max,f=[],m=e.length,g=t.length,v=g-m||1,b=m+g+1;for(s=0;s<=m;s++)for(l=u,f.push(u=[]),c=d(g,s+v),p=h(0,s-1),a=p;a<=c;a++)if(a)if(s)if(e[s-1]===t[a-1])u[a]=l[a-1];else{var y=l[a]||b,_=u[a-1]||b;u[a]=d(y,_)+1}else u[a]=a+1;else u[a]=s+1;var w,T=[],j=[],x=[];for(s=m,a=g;s||a;)w=f[s][a]-1,a&&w===f[s][a-1]?j.push(T[T.length]={status:n,value:t[--a],index:a}):s&&w===f[s-1][a]?x.push(T[T.length]={status:i,value:e[--s],index:s}):(--a,--s,o.sparse||T.push({status:"retained",value:t[a]}));return r.utils.findMovesInArrayComparison(x,j,!o.dontLimitMoves&&10*m),T.reverse()}return function(r,i,o){return o="boolean"==typeof o?{dontLimitMoves:o}:o||{},r=r||[],i=i||[],r.length<i.length?n(r,i,e,t,o):n(i,r,t,e,o)}}(),r.exportSymbol("utils.compareArrays",r.utils.compareArrays),function(){function e(e,t,n,i,o){var a=[],u=r.dependentObservable(function(){var s=t(n,o,r.utils.fixUpContinuousNodeArray(a,e))||[];a.length>0&&(r.utils.replaceDomNodes(a,s),i&&r.dependencyDetection.ignore(i,null,[n,s,o])),a.length=0,r.utils.arrayPushAll(a,s)},null,{disposeWhenNodeIsRemoved:e,disposeWhen:function(){return!r.utils.anyDomNodeIsAttachedToDocument(a)}});return{mappedNodes:a,dependentObservable:u.isActive()?u:s}}var t=r.utils.domData.nextKey(),n=r.utils.domData.nextKey();r.utils.setDomNodeChildrenFromArrayMapping=function(i,o,a,u,l){o=o||[],u=u||{};var c,p=r.utils.domData.get(i,t)===s,d=r.utils.domData.get(i,t)||[],h=r.utils.arrayMap(d,function(e){return e.arrayEntry}),f=r.utils.compareArrays(h,o,u.dontLimitMoves),m=[],g=0,v=0,b=[],y=[],_=[],w=[],T=[];function j(e,t){c=d[t],v!==t&&(w[e]=c),c.indexObservable(v++),r.utils.fixUpContinuousNodeArray(c.mappedNodes,i),m.push(c),y.push(c)}function x(e,t){if(e)for(var n=0,i=t.length;n<i;n++)t[n]&&r.utils.arrayForEach(t[n].mappedNodes,function(r){e(r,n,t[n].arrayEntry)})}for(var E,D,C=0;E=f[C];C++)switch(D=E.moved,E.status){case"deleted":D===s&&((c=d[g]).dependentObservable&&(c.dependentObservable.dispose(),c.dependentObservable=s),r.utils.fixUpContinuousNodeArray(c.mappedNodes,i).length&&(u.beforeRemove&&(m.push(c),y.push(c),c.arrayEntry===n?c=null:_[C]=c),c&&b.push.apply(b,c.mappedNodes))),g++;break;case"retained":j(C,g++);break;case"added":D!==s?j(C,D):(c={arrayEntry:E.value,indexObservable:r.observable(v++)},m.push(c),y.push(c),p||(T[C]=c))}r.utils.domData.set(i,t,m),x(u.beforeMove,w),r.utils.arrayForEach(b,u.beforeRemove?r.cleanNode:r.removeNode);for(var N,S,C=0,O=r.virtualElements.firstChild(i);c=y[C];C++){c.mappedNodes||r.utils.extend(c,e(i,a,c.arrayEntry,l,c.indexObservable));for(var A=0;S=c.mappedNodes[A];O=S.nextSibling,N=S,A++)S!==O&&r.virtualElements.insertAfter(i,S,N);!c.initialized&&l&&(l(c.arrayEntry,c.mappedNodes,c.indexObservable),c.initialized=!0)}for(x(u.beforeRemove,_),C=0;C<_.length;++C)_[C]&&(_[C].arrayEntry=n);x(u.afterMove,w),x(u.afterAdd,T)}}(),r.exportSymbol("utils.setDomNodeChildrenFromArrayMapping",r.utils.setDomNodeChildrenFromArrayMapping),r.nativeTemplateEngine=function(){this.allowTemplateRewriting=!1},r.nativeTemplateEngine.prototype=new r.templateEngine,r.nativeTemplateEngine.prototype.constructor=r.nativeTemplateEngine,r.nativeTemplateEngine.prototype.renderTemplateSource=function(e,t,n,i){var o=!(r.utils.ieVersion<9),s=o?e.nodes:null,a=s?e.nodes():null;if(a)return r.utils.makeArray(a.cloneNode(!0).childNodes);var u=e.text();return r.utils.parseHtmlFragment(u,i)},r.nativeTemplateEngine.instance=new r.nativeTemplateEngine,r.setTemplateEngine(r.nativeTemplateEngine.instance),r.exportSymbol("nativeTemplateEngine",r.nativeTemplateEngine),function(){r.jqueryTmplTemplateEngine=function(){var e=this.jQueryTmplVersion=function(){if(!c||!c.tmpl)return 0;try{if(c.tmpl.tag.tmpl.open.toString().indexOf("__")>=0)return 2}catch(e){}return 1}();this.renderTemplateSource=function(t,r,n,i){i=i||u,n=n||{},function(){if(e<2)throw new Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.")}();var o=t.data("precompiled");if(!o){var s=t.text()||"";s="{{ko_with $item.koBindingContext}}"+s+"{{/ko_with}}",o=c.template(null,s),t.data("precompiled",o)}var a=[r.$data],l=c.extend({koBindingContext:r},n.templateOptions),p=function(e,t,r){return c.tmpl(e,t,r)}(o,a,l);return p.appendTo(i.createElement("div")),c.fragments={},p},this.createJavaScriptEvaluatorBlock=function(e){return"{{ko_code ((function() { return "+e+" })()) }}"},this.addTemplate=function(e,t){u.write("<script type='text/html' id='"+e+"'>"+t+"<\/script>")},e>0&&(c.tmpl.tag.ko_code={open:"__.push($1 || '');"},c.tmpl.tag.ko_with={open:"with($1) {",close:"} "})},r.jqueryTmplTemplateEngine.prototype=new r.templateEngine,r.jqueryTmplTemplateEngine.prototype.constructor=r.jqueryTmplTemplateEngine;var e=new r.jqueryTmplTemplateEngine;e.jQueryTmplVersion>0&&r.setTemplateEngine(e),r.exportSymbol("jqueryTmplTemplateEngine",r.jqueryTmplTemplateEngine)}()})?n.apply(t,i):n)===s||(e.exports=o)}()},function(e){e.exports=[{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/11302302",assets_url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/11302302/assets",upload_url:"https://uploads.github.com/repos/jmarioste/manga-viewer/releases/11302302/assets{?name,label}",html_url:"https://github.com/jmarioste/manga-viewer/releases/tag/v1.2.3",id:11302302,node_id:"MDc6UmVsZWFzZTExMzAyMzAy",tag_name:"v1.2.3",target_commitish:"master",name:"v1.2.3",draft:!1,author:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},prerelease:!1,created_at:"2018-06-04T05:36:15Z",published_at:"2018-06-04T05:50:29Z",assets:[{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7396921",id:7396921,node_id:"MDEyOlJlbGVhc2VBc3NldDczOTY5MjE=",name:"baiji-manga-viewer-1.2.3-mac.zip",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/zip",state:"uploaded",size:68787930,download_count:2,created_at:"2018-06-04T05:49:06Z",updated_at:"2018-06-04T05:49:10Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.3/baiji-manga-viewer-1.2.3-mac.zip"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7396901",id:7396901,node_id:"MDEyOlJlbGVhc2VBc3NldDczOTY5MDE=",name:"baiji-manga-viewer-1.2.3-x86_64.AppImage",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:72181793,download_count:0,created_at:"2018-06-04T05:46:58Z",updated_at:"2018-06-04T05:47:01Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.3/baiji-manga-viewer-1.2.3-x86_64.AppImage"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7396916",id:7396916,node_id:"MDEyOlJlbGVhc2VBc3NldDczOTY5MTY=",name:"baiji-manga-viewer-1.2.3.dmg",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:70732459,download_count:1,created_at:"2018-06-04T05:48:42Z",updated_at:"2018-06-04T05:48:45Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.3/baiji-manga-viewer-1.2.3.dmg"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7396917",id:7396917,node_id:"MDEyOlJlbGVhc2VBc3NldDczOTY5MTc=",name:"baiji-manga-viewer-1.2.3.dmg.blockmap",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:75101,download_count:0,created_at:"2018-06-04T05:48:42Z",updated_at:"2018-06-04T05:48:42Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.3/baiji-manga-viewer-1.2.3.dmg.blockmap"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7396896",id:7396896,node_id:"MDEyOlJlbGVhc2VBc3NldDczOTY4OTY=",name:"baiji-manga-viewer-setup-1.2.3.exe",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:68148144,download_count:10,created_at:"2018-06-04T05:45:35Z",updated_at:"2018-06-04T05:45:37Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.3/baiji-manga-viewer-setup-1.2.3.exe"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7396895",id:7396895,node_id:"MDEyOlJlbGVhc2VBc3NldDczOTY4OTU=",name:"baiji-manga-viewer-setup-1.2.3.exe.blockmap",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:61590,download_count:0,created_at:"2018-06-04T05:45:35Z",updated_at:"2018-06-04T05:45:35Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.3/baiji-manga-viewer-setup-1.2.3.exe.blockmap"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7396911",id:7396911,node_id:"MDEyOlJlbGVhc2VBc3NldDczOTY5MTE=",name:"baiji-manga-viewer_1.2.3_amd64.deb",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:46788602,download_count:0,created_at:"2018-06-04T05:48:23Z",updated_at:"2018-06-04T05:48:25Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.3/baiji-manga-viewer_1.2.3_amd64.deb"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7396912",id:7396912,node_id:"MDEyOlJlbGVhc2VBc3NldDczOTY5MTI=",name:"latest-linux.yml",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"text/yaml",state:"uploaded",size:400,download_count:0,created_at:"2018-06-04T05:48:25Z",updated_at:"2018-06-04T05:48:25Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.3/latest-linux.yml"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7396922",id:7396922,node_id:"MDEyOlJlbGVhc2VBc3NldDczOTY5MjI=",name:"latest-mac.json",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/json",state:"uploaded",size:182,download_count:0,created_at:"2018-06-04T05:49:06Z",updated_at:"2018-06-04T05:49:06Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.3/latest-mac.json"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7396923",id:7396923,node_id:"MDEyOlJlbGVhc2VBc3NldDczOTY5MjM=",name:"latest-mac.yml",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"text/yaml",state:"uploaded",size:499,download_count:0,created_at:"2018-06-04T05:49:10Z",updated_at:"2018-06-04T05:49:10Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.3/latest-mac.yml"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7396897",id:7396897,node_id:"MDEyOlJlbGVhc2VBc3NldDczOTY4OTc=",name:"latest.yml",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"text/yaml",state:"uploaded",size:435,download_count:1,created_at:"2018-06-04T05:45:37Z",updated_at:"2018-06-04T05:45:37Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.3/latest.yml"}],tarball_url:"https://api.github.com/repos/jmarioste/manga-viewer/tarball/v1.2.3",zipball_url:"https://api.github.com/repos/jmarioste/manga-viewer/zipball/v1.2.3",body:"Fix installerSidebar"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/10833117",assets_url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/10833117/assets",upload_url:"https://uploads.github.com/repos/jmarioste/manga-viewer/releases/10833117/assets{?name,label}",html_url:"https://github.com/jmarioste/manga-viewer/releases/tag/v1.2.2",id:10833117,node_id:"MDc6UmVsZWFzZTEwODMzMTE3",tag_name:"v1.2.2",target_commitish:"master",name:"Bug fixes",draft:!1,author:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},prerelease:!1,created_at:"2018-05-03T14:43:50Z",published_at:"2018-05-03T15:00:40Z",assets:[{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7058463",id:7058463,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTg0NjM=",name:"baiji-manga-viewer-1.2.2-mac.zip",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/zip",state:"uploaded",size:67201207,download_count:1,created_at:"2018-05-03T14:50:04Z",updated_at:"2018-05-03T14:50:15Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.2/baiji-manga-viewer-1.2.2-mac.zip"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7058483",id:7058483,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTg0ODM=",name:"baiji-manga-viewer-1.2.2-x86_64.AppImage",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:70751122,download_count:38,created_at:"2018-05-03T14:50:35Z",updated_at:"2018-05-03T14:50:45Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.2/baiji-manga-viewer-1.2.2-x86_64.AppImage"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7058440",id:7058440,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTg0NDA=",name:"baiji-manga-viewer-1.2.2.dmg",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:69664953,download_count:1,created_at:"2018-05-03T14:49:10Z",updated_at:"2018-05-03T14:49:21Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.2/baiji-manga-viewer-1.2.2.dmg"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7058439",id:7058439,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTg0Mzk=",name:"baiji-manga-viewer-1.2.2.dmg.blockmap",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:74201,download_count:0,created_at:"2018-05-03T14:49:10Z",updated_at:"2018-05-03T14:49:11Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.2/baiji-manga-viewer-1.2.2.dmg.blockmap"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7058427",id:7058427,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTg0Mjc=",name:"baiji-manga-viewer-setup-1.2.2.exe",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:66735580,download_count:49,created_at:"2018-05-03T14:48:22Z",updated_at:"2018-05-03T14:48:47Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.2/baiji-manga-viewer-setup-1.2.2.exe"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7058426",id:7058426,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTg0MjY=",name:"baiji-manga-viewer-setup-1.2.2.exe.blockmap",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:60143,download_count:0,created_at:"2018-05-03T14:48:22Z",updated_at:"2018-05-03T14:48:22Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.2/baiji-manga-viewer-setup-1.2.2.exe.blockmap"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7058503",id:7058503,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTg1MDM=",name:"baiji-manga-viewer_1.2.2_amd64.deb",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:45759530,download_count:6,created_at:"2018-05-03T14:51:49Z",updated_at:"2018-05-03T14:51:54Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.2/baiji-manga-viewer_1.2.2_amd64.deb"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7058504",id:7058504,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTg1MDQ=",name:"latest-linux.yml",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"text/yaml",state:"uploaded",size:400,download_count:2,created_at:"2018-05-03T14:51:55Z",updated_at:"2018-05-03T14:51:55Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.2/latest-linux.yml"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7058464",id:7058464,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTg0NjQ=",name:"latest-mac.json",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/json",state:"uploaded",size:182,download_count:0,created_at:"2018-05-03T14:50:05Z",updated_at:"2018-05-03T14:50:05Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.2/latest-mac.json"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7058477",id:7058477,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTg0Nzc=",name:"latest-mac.yml",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"text/yaml",state:"uploaded",size:499,download_count:0,created_at:"2018-05-03T14:50:15Z",updated_at:"2018-05-03T14:50:15Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.2/latest-mac.yml"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7058431",id:7058431,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTg0MzE=",name:"latest.yml",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"text/yaml",state:"uploaded",size:435,download_count:49,created_at:"2018-05-03T14:48:47Z",updated_at:"2018-05-03T14:48:47Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.2/latest.yml"}],tarball_url:"https://api.github.com/repos/jmarioste/manga-viewer/tarball/v1.2.2",zipball_url:"https://api.github.com/repos/jmarioste/manga-viewer/zipball/v1.2.2",body:"## New stuff\r\n- Supported .cbr for manga file format\r\n\r\n## Bug fixes\r\n- Fixed #10 \r\n- Fixed #11 \r\n"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/10827278",assets_url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/10827278/assets",upload_url:"https://uploads.github.com/repos/jmarioste/manga-viewer/releases/10827278/assets{?name,label}",html_url:"https://github.com/jmarioste/manga-viewer/releases/tag/v1.2.1",id:10827278,node_id:"MDc6UmVsZWFzZTEwODI3Mjc4",tag_name:"v1.2.1",target_commitish:"master",name:"New feature and bug fix.",draft:!1,author:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},prerelease:!1,created_at:"2018-05-03T06:55:49Z",published_at:"2018-05-03T08:06:43Z",assets:[{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7052986",id:7052986,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTI5ODY=",name:"baiji-manga-viewer-1.2.1-mac.zip",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/zip",state:"uploaded",size:67201129,download_count:0,created_at:"2018-05-03T07:01:30Z",updated_at:"2018-05-03T07:01:54Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.1/baiji-manga-viewer-1.2.1-mac.zip"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7052975",id:7052975,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTI5NzU=",name:"baiji-manga-viewer-1.2.1-x86_64.AppImage",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:70751163,download_count:4,created_at:"2018-05-03T07:00:42Z",updated_at:"2018-05-03T07:01:09Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.1/baiji-manga-viewer-1.2.1-x86_64.AppImage"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7052976",id:7052976,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTI5NzY=",name:"baiji-manga-viewer-1.2.1.dmg",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:69665062,download_count:0,created_at:"2018-05-03T07:00:42Z",updated_at:"2018-05-03T07:01:07Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.1/baiji-manga-viewer-1.2.1.dmg"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7052977",id:7052977,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTI5Nzc=",name:"baiji-manga-viewer-1.2.1.dmg.blockmap",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:74296,download_count:0,created_at:"2018-05-03T07:00:42Z",updated_at:"2018-05-03T07:00:42Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.1/baiji-manga-viewer-1.2.1.dmg.blockmap"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7052971",id:7052971,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTI5NzE=",name:"baiji-manga-viewer-setup-1.2.1.exe",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:66680397,download_count:15,created_at:"2018-05-03T06:59:36Z",updated_at:"2018-05-03T06:59:52Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.1/baiji-manga-viewer-setup-1.2.1.exe"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7052970",id:7052970,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTI5NzA=",name:"baiji-manga-viewer-setup-1.2.1.exe.blockmap",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:60200,download_count:0,created_at:"2018-05-03T06:59:36Z",updated_at:"2018-05-03T06:59:36Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.1/baiji-manga-viewer-setup-1.2.1.exe.blockmap"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7052990",id:7052990,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTI5OTA=",name:"baiji-manga-viewer_1.2.1_amd64.deb",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:45763522,download_count:1,created_at:"2018-05-03T07:01:54Z",updated_at:"2018-05-03T07:02:11Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.1/baiji-manga-viewer_1.2.1_amd64.deb"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7052997",id:7052997,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTI5OTc=",name:"latest-linux.yml",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"text/yaml",state:"uploaded",size:400,download_count:3,created_at:"2018-05-03T07:02:11Z",updated_at:"2018-05-03T07:02:11Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.1/latest-linux.yml"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7052987",id:7052987,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTI5ODc=",name:"latest-mac.json",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/json",state:"uploaded",size:182,download_count:0,created_at:"2018-05-03T07:01:30Z",updated_at:"2018-05-03T07:01:30Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.1/latest-mac.json"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7052991",id:7052991,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTI5OTE=",name:"latest-mac.yml",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"text/yaml",state:"uploaded",size:499,download_count:0,created_at:"2018-05-03T07:01:55Z",updated_at:"2018-05-03T07:01:55Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.1/latest-mac.yml"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7052972",id:7052972,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNTI5NzI=",name:"latest.yml",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"text/yaml",state:"uploaded",size:435,download_count:18,created_at:"2018-05-03T06:59:52Z",updated_at:"2018-05-03T06:59:52Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.1/latest.yml"}],tarball_url:"https://api.github.com/repos/jmarioste/manga-viewer/tarball/v1.2.1",zipball_url:"https://api.github.com/repos/jmarioste/manga-viewer/zipball/v1.2.1",body:"## New feature\r\n. Add a overlay when hovering left/right parts of view manga page to go to previous/next page.\r\n\r\n## Bug fix\r\n- Fixed a bug where drag/drop results in flickering UI\r\n- Fixed a bug where dragging an image file will open in the app resulting in an unusable app\r\n- Fixed a bug where hotkey for Toggle Favorite manga does not update"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/10807943",assets_url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/10807943/assets",upload_url:"https://uploads.github.com/repos/jmarioste/manga-viewer/releases/10807943/assets{?name,label}",html_url:"https://github.com/jmarioste/manga-viewer/releases/tag/v1.1.1",id:10807943,node_id:"MDc6UmVsZWFzZTEwODA3OTQz",tag_name:"v1.1.1",target_commitish:"master",name:"Fix product name",draft:!1,author:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},prerelease:!1,created_at:"2018-05-02T06:58:26Z",published_at:"2018-05-02T11:20:59Z",assets:[{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7041663",id:7041663,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNDE2NjM=",name:"baiji-manga-viewer-1.1.1-mac.zip",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/zip",state:"uploaded",size:67176145,download_count:0,created_at:"2018-05-02T10:26:10Z",updated_at:"2018-05-02T10:26:14Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.1/baiji-manga-viewer-1.1.1-mac.zip"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7041636",id:7041636,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNDE2MzY=",name:"baiji-manga-viewer-1.1.1-x86_64.AppImage",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:70722521,download_count:1,created_at:"2018-05-02T10:23:42Z",updated_at:"2018-05-02T10:23:44Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.1/baiji-manga-viewer-1.1.1-x86_64.AppImage"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7041661",id:7041661,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNDE2NjE=",name:"baiji-manga-viewer-1.1.1.dmg",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:69637683,download_count:0,created_at:"2018-05-02T10:25:06Z",updated_at:"2018-05-02T10:25:10Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.1/baiji-manga-viewer-1.1.1.dmg"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7041662",id:7041662,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNDE2NjI=",name:"baiji-manga-viewer-1.1.1.dmg.blockmap",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:74412,download_count:0,created_at:"2018-05-02T10:25:06Z",updated_at:"2018-05-02T10:25:06Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.1/baiji-manga-viewer-1.1.1.dmg.blockmap"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7041638",id:7041638,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNDE2Mzg=",name:"baiji-manga-viewer-setup-1.1.1.exe",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:66664950,download_count:9,created_at:"2018-05-02T10:23:45Z",updated_at:"2018-05-02T10:23:50Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.1/baiji-manga-viewer-setup-1.1.1.exe"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7041639",id:7041639,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNDE2Mzk=",name:"baiji-manga-viewer-setup-1.1.1.exe.blockmap",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:60042,download_count:0,created_at:"2018-05-02T10:23:45Z",updated_at:"2018-05-02T10:23:46Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.1/baiji-manga-viewer-setup-1.1.1.exe.blockmap"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7041649",id:7041649,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNDE2NDk=",name:"baiji-manga-viewer_1.1.1_amd64.deb",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:45730986,download_count:1,created_at:"2018-05-02T10:24:56Z",updated_at:"2018-05-02T10:24:58Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.1/baiji-manga-viewer_1.1.1_amd64.deb"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7041651",id:7041651,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNDE2NTE=",name:"latest-linux.yml",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"text/yaml",state:"uploaded",size:400,download_count:0,created_at:"2018-05-02T10:24:59Z",updated_at:"2018-05-02T10:24:59Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.1/latest-linux.yml"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7041664",id:7041664,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNDE2NjQ=",name:"latest-mac.json",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/json",state:"uploaded",size:182,download_count:0,created_at:"2018-05-02T10:26:10Z",updated_at:"2018-05-02T10:26:11Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.1/latest-mac.json"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7041665",id:7041665,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNDE2NjU=",name:"latest-mac.yml",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"text/yaml",state:"uploaded",size:499,download_count:0,created_at:"2018-05-02T10:26:15Z",updated_at:"2018-05-02T10:26:16Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.1/latest-mac.yml"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7041640",id:7041640,node_id:"MDEyOlJlbGVhc2VBc3NldDcwNDE2NDA=",name:"latest.yml",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"text/yaml",state:"uploaded",size:435,download_count:0,created_at:"2018-05-02T10:23:51Z",updated_at:"2018-05-02T10:23:51Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.1/latest.yml"}],tarball_url:"https://api.github.com/repos/jmarioste/manga-viewer/tarball/v1.1.1",zipball_url:"https://api.github.com/repos/jmarioste/manga-viewer/zipball/v1.1.1",body:"Fixed bug #9 ."},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/10765296",assets_url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/10765296/assets",upload_url:"https://uploads.github.com/repos/jmarioste/manga-viewer/releases/10765296/assets{?name,label}",html_url:"https://github.com/jmarioste/manga-viewer/releases/tag/v1.1.0",id:10765296,node_id:"MDc6UmVsZWFzZTEwNzY1Mjk2",tag_name:"v1.1.0",target_commitish:"master",name:"New functionality added!",draft:!1,author:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},prerelease:!1,created_at:"2018-04-28T02:29:19Z",published_at:"2018-04-28T08:47:32Z",assets:[{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7007201",id:7007201,node_id:"MDEyOlJlbGVhc2VBc3NldDcwMDcyMDE=",name:"baiji-manga-viewer-1.1.0-mac.zip",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/zip",state:"uploaded",size:66444721,download_count:0,created_at:"2018-04-28T08:28:20Z",updated_at:"2018-04-28T08:28:25Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.0/baiji-manga-viewer-1.1.0-mac.zip"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7007199",id:7007199,node_id:"MDEyOlJlbGVhc2VBc3NldDcwMDcxOTk=",name:"baiji-manga-viewer-1.1.0-x86_64.AppImage",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:70411508,download_count:2,created_at:"2018-04-28T08:28:05Z",updated_at:"2018-04-28T08:28:11Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.0/baiji-manga-viewer-1.1.0-x86_64.AppImage"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7007196",id:7007196,node_id:"MDEyOlJlbGVhc2VBc3NldDcwMDcxOTY=",name:"baiji-manga-viewer-1.1.0.dmg",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:68873308,download_count:3,created_at:"2018-04-28T08:27:40Z",updated_at:"2018-04-28T08:27:45Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.0/baiji-manga-viewer-1.1.0.dmg"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7007197",id:7007197,node_id:"MDEyOlJlbGVhc2VBc3NldDcwMDcxOTc=",name:"baiji-manga-viewer-1.1.0.dmg.blockmap",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:73205,download_count:0,created_at:"2018-04-28T08:27:40Z",updated_at:"2018-04-28T08:27:40Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.0/baiji-manga-viewer-1.1.0.dmg.blockmap"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7007195",id:7007195,node_id:"MDEyOlJlbGVhc2VBc3NldDcwMDcxOTU=",name:"baiji-manga-viewer-setup-1.1.0.exe",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:62491874,download_count:14,created_at:"2018-04-28T08:27:40Z",updated_at:"2018-04-28T08:27:44Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.0/baiji-manga-viewer-setup-1.1.0.exe"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7007194",id:7007194,node_id:"MDEyOlJlbGVhc2VBc3NldDcwMDcxOTQ=",name:"baiji-manga-viewer-setup-1.1.0.exe.blockmap",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:58544,download_count:0,created_at:"2018-04-28T08:27:40Z",updated_at:"2018-04-28T08:27:40Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.0/baiji-manga-viewer-setup-1.1.0.exe.blockmap"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7007207",id:7007207,node_id:"MDEyOlJlbGVhc2VBc3NldDcwMDcyMDc=",name:"baiji-manga-viewer_1.1.0_amd64.deb",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:44850816,download_count:1,created_at:"2018-04-28T08:29:29Z",updated_at:"2018-04-28T08:29:32Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.0/baiji-manga-viewer_1.1.0_amd64.deb"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7007208",id:7007208,node_id:"MDEyOlJlbGVhc2VBc3NldDcwMDcyMDg=",name:"latest-linux.yml",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"text/yaml",state:"uploaded",size:400,download_count:0,created_at:"2018-04-28T08:29:33Z",updated_at:"2018-04-28T08:29:33Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.0/latest-linux.yml"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7007202",id:7007202,node_id:"MDEyOlJlbGVhc2VBc3NldDcwMDcyMDI=",name:"latest-mac.json",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/json",state:"uploaded",size:182,download_count:0,created_at:"2018-04-28T08:28:21Z",updated_at:"2018-04-28T08:28:21Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.0/latest-mac.json"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7007203",id:7007203,node_id:"MDEyOlJlbGVhc2VBc3NldDcwMDcyMDM=",name:"latest-mac.yml",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"text/yaml",state:"uploaded",size:499,download_count:1,created_at:"2018-04-28T08:28:25Z",updated_at:"2018-04-28T08:28:25Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.0/latest-mac.yml"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/7007198",id:7007198,node_id:"MDEyOlJlbGVhc2VBc3NldDcwMDcxOTg=",name:"latest.yml",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"text/yaml",state:"uploaded",size:435,download_count:0,created_at:"2018-04-28T08:27:45Z",updated_at:"2018-04-28T08:27:45Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.1.0/latest.yml"}],tarball_url:"https://api.github.com/repos/jmarioste/manga-viewer/tarball/v1.1.0",zipball_url:"https://api.github.com/repos/jmarioste/manga-viewer/zipball/v1.1.0",body:"* Added back button to return to previous screen when viewing manga. Search inputs are also saved.\r\n* Removed UnRAR.exe from repo due to bad practice. \r\n **NOTE**: If you're a windows user please install WinRAR and add it to PATH environment variable.\r\n* Fixed issues #7 and #8."},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/6694278",assets_url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/6694278/assets",upload_url:"https://uploads.github.com/repos/jmarioste/manga-viewer/releases/6694278/assets{?name,label}",html_url:"https://github.com/jmarioste/manga-viewer/releases/tag/v1.0.0",id:6694278,node_id:"MDc6UmVsZWFzZTY2OTQyNzg=",tag_name:"v1.0.0",target_commitish:"master",name:"1.0.0",draft:!1,author:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},prerelease:!1,created_at:"2017-06-13T11:36:07Z",published_at:"2017-06-13T12:11:50Z",assets:[{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/4088856",id:4088856,node_id:"MDEyOlJlbGVhc2VBc3NldDQwODg4NTY=",name:"BaijiMangaViewer-1.0.0-mac.zip",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/zip",state:"uploaded",size:68026058,download_count:1,created_at:"2017-06-13T11:54:37Z",updated_at:"2017-06-13T11:54:45Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.0.0/BaijiMangaViewer-1.0.0-mac.zip"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/4088789",id:4088789,node_id:"MDEyOlJlbGVhc2VBc3NldDQwODg3ODk=",name:"BaijiMangaViewer-1.0.0-x86_64.AppImage",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/octet-stream",state:"uploaded",size:84344832,download_count:77,created_at:"2017-06-13T11:45:56Z",updated_at:"2017-06-13T11:46:00Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.0.0/BaijiMangaViewer-1.0.0-x86_64.AppImage"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/4088855",id:4088855,node_id:"MDEyOlJlbGVhc2VBc3NldDQwODg4NTU=",name:"BaijiMangaViewer-1.0.0.dmg",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/x-apple-diskimage",state:"uploaded",size:67770490,download_count:1,created_at:"2017-06-13T11:54:35Z",updated_at:"2017-06-13T11:54:42Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.0.0/BaijiMangaViewer-1.0.0.dmg"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/4088833",id:4088833,node_id:"MDEyOlJlbGVhc2VBc3NldDQwODg4MzM=",name:"BaijiMangaViewer-Setup-1.0.0.exe",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/x-msdownload",state:"uploaded",size:49931629,download_count:36,created_at:"2017-06-13T11:51:40Z",updated_at:"2017-06-13T11:51:42Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.0.0/BaijiMangaViewer-Setup-1.0.0.exe"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/4088799",id:4088799,node_id:"MDEyOlJlbGVhc2VBc3NldDQwODg3OTk=",name:"BaijiMangaViewer_1.0.0_amd64.deb",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/x-debian-package",state:"uploaded",size:48031138,download_count:18,created_at:"2017-06-13T11:47:34Z",updated_at:"2017-06-13T11:47:36Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.0.0/BaijiMangaViewer_1.0.0_amd64.deb"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/4088857",id:4088857,node_id:"MDEyOlJlbGVhc2VBc3NldDQwODg4NTc=",name:"latest-mac.json",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"application/json",state:"uploaded",size:178,download_count:0,created_at:"2017-06-13T11:54:38Z",updated_at:"2017-06-13T11:54:38Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.0.0/latest-mac.json"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/4088858",id:4088858,node_id:"MDEyOlJlbGVhc2VBc3NldDQwODg4NTg=",name:"latest-mac.yml",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"text/yaml",state:"uploaded",size:245,download_count:0,created_at:"2017-06-13T11:54:38Z",updated_at:"2017-06-13T11:54:38Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.0.0/latest-mac.yml"},{url:"https://api.github.com/repos/jmarioste/manga-viewer/releases/assets/4088834",id:4088834,node_id:"MDEyOlJlbGVhc2VBc3NldDQwODg4MzQ=",name:"latest.yml",label:"",uploader:{login:"jmarioste",id:10172560,node_id:"MDQ6VXNlcjEwMTcyNTYw",avatar_url:"https://avatars3.githubusercontent.com/u/10172560?v=4",gravatar_id:"",url:"https://api.github.com/users/jmarioste",html_url:"https://github.com/jmarioste",followers_url:"https://api.github.com/users/jmarioste/followers",following_url:"https://api.github.com/users/jmarioste/following{/other_user}",gists_url:"https://api.github.com/users/jmarioste/gists{/gist_id}",starred_url:"https://api.github.com/users/jmarioste/starred{/owner}{/repo}",subscriptions_url:"https://api.github.com/users/jmarioste/subscriptions",organizations_url:"https://api.github.com/users/jmarioste/orgs",repos_url:"https://api.github.com/users/jmarioste/repos",events_url:"https://api.github.com/users/jmarioste/events{/privacy}",received_events_url:"https://api.github.com/users/jmarioste/received_events",type:"User",site_admin:!1},content_type:"text/yaml",state:"uploaded",size:320,download_count:408,created_at:"2017-06-13T11:51:40Z",updated_at:"2017-06-13T11:51:40Z",browser_download_url:"https://github.com/jmarioste/manga-viewer/releases/download/v1.0.0/latest.yml"}],tarball_url:"https://api.github.com/repos/jmarioste/manga-viewer/tarball/v1.0.0",zipball_url:"https://api.github.com/repos/jmarioste/manga-viewer/zipball/v1.0.0",body:"#  Features:\r\n- View manga formats rar & zip file \r\n- Auto updates\r\n- Material design UI\r\n- Search manga (recursively/not)\r\n- drag & drop zip & rar files to viewer\r\n- Automatically list all the mangas from the selected directory.\r\n- Bookmark folders and mark as favorite manga"}]},function(e,t,r){"use strict";(function(e){var t=n(r(3));n(r(0));function n(e){return e&&e.__esModule?e:{default:e}}t.default.bindingHandlers.hideNotPlatform={init:function(r,n){var i=t.default.unwrap(n()),o=navigator.platform.toLowerCase().indexOf(i)>=0;console.log(o,i),o||(console.log("applying active"),e(r).hide())}},t.default.bindingHandlers.href={init:function(r,n){var i=t.default.unwrap(n());e(r).attr("href",i)}},t.default.bindingHandlers.hashScroll={init:function(t,r){console.log("hash",t.hash),e(t).on("click",function(){if(""!==t.hash){event.preventDefault();var r=t.hash;e("html, body").animate({scrollTop:e(r).offset().top},900,function(){window.location.hash=r})}})}}}).call(this,r(0))},function(e,t,r){
/*!
  * Bootstrap v4.1.1 (https://getbootstrap.com/)
  * Copyright 2011-2018 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
!function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function i(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),n.forEach(function(t){o(e,t,r[t])})}return e}t=t&&t.hasOwnProperty("default")?t.default:t,r=r&&r.hasOwnProperty("default")?r.default:r;var a=function(e){var t="transitionend";function r(t){var r=this,i=!1;return e(this).one(n.TRANSITION_END,function(){i=!0}),setTimeout(function(){i||n.triggerTransitionEnd(r)},t),this}var n={TRANSITION_END:"bsTransitionEnd",getUID:function(e){do{e+=~~(1e6*Math.random())}while(document.getElementById(e));return e},getSelectorFromElement:function(t){var r=t.getAttribute("data-target");r&&"#"!==r||(r=t.getAttribute("href")||"");try{var n=e(document).find(r);return n.length>0?r:null}catch(e){return null}},getTransitionDurationFromElement:function(t){if(!t)return 0;var r=e(t).css("transition-duration"),n=parseFloat(r);return n?(r=r.split(",")[0],1e3*parseFloat(r)):0},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(r){e(r).trigger(t)},supportsTransitionEnd:function(){return Boolean(t)},isElement:function(e){return(e[0]||e).nodeType},typeCheckConfig:function(e,t,r){for(var i in r)if(Object.prototype.hasOwnProperty.call(r,i)){var o=r[i],s=t[i],a=s&&n.isElement(s)?"element":(u=s,{}.toString.call(u).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(o).test(a))throw new Error(e.toUpperCase()+': Option "'+i+'" provided type "'+a+'" but expected type "'+o+'".')}var u}};return e.fn.emulateTransitionEnd=r,e.event.special[n.TRANSITION_END]={bindType:t,delegateType:t,handle:function(t){if(e(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}},n}(t),u=function(e){var t=e.fn.alert,r={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},n={ALERT:"alert",FADE:"fade",SHOW:"show"},o=function(){function t(e){this._element=e}var o=t.prototype;return o.close=function(e){var t=this._element;e&&(t=this._getRootElement(e));var r=this._triggerCloseEvent(t);r.isDefaultPrevented()||this._removeElement(t)},o.dispose=function(){e.removeData(this._element,"bs.alert"),this._element=null},o._getRootElement=function(t){var r=a.getSelectorFromElement(t),i=!1;return r&&(i=e(r)[0]),i||(i=e(t).closest("."+n.ALERT)[0]),i},o._triggerCloseEvent=function(t){var n=e.Event(r.CLOSE);return e(t).trigger(n),n},o._removeElement=function(t){var r=this;if(e(t).removeClass(n.SHOW),e(t).hasClass(n.FADE)){var i=a.getTransitionDurationFromElement(t);e(t).one(a.TRANSITION_END,function(e){return r._destroyElement(t,e)}).emulateTransitionEnd(i)}else this._destroyElement(t)},o._destroyElement=function(t){e(t).detach().trigger(r.CLOSED).remove()},t._jQueryInterface=function(r){return this.each(function(){var n=e(this),i=n.data("bs.alert");i||(i=new t(this),n.data("bs.alert",i)),"close"===r&&i[r](this)})},t._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},i(t,null,[{key:"VERSION",get:function(){return"4.1.1"}}]),t}();return e(document).on(r.CLICK_DATA_API,'[data-dismiss="alert"]',o._handleDismiss(new o)),e.fn.alert=o._jQueryInterface,e.fn.alert.Constructor=o,e.fn.alert.noConflict=function(){return e.fn.alert=t,o._jQueryInterface},o}(t),l=function(e){var t="button",r=e.fn[t],n={ACTIVE:"active",BUTTON:"btn",FOCUS:"focus"},o={DATA_TOGGLE_CARROT:'[data-toggle^="button"]',DATA_TOGGLE:'[data-toggle="buttons"]',INPUT:"input",ACTIVE:".active",BUTTON:".btn"},s={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api"},a=function(){function t(e){this._element=e}var r=t.prototype;return r.toggle=function(){var t=!0,r=!0,i=e(this._element).closest(o.DATA_TOGGLE)[0];if(i){var s=e(this._element).find(o.INPUT)[0];if(s){if("radio"===s.type)if(s.checked&&e(this._element).hasClass(n.ACTIVE))t=!1;else{var a=e(i).find(o.ACTIVE)[0];a&&e(a).removeClass(n.ACTIVE)}if(t){if(s.hasAttribute("disabled")||i.hasAttribute("disabled")||s.classList.contains("disabled")||i.classList.contains("disabled"))return;s.checked=!e(this._element).hasClass(n.ACTIVE),e(s).trigger("change")}s.focus(),r=!1}}r&&this._element.setAttribute("aria-pressed",!e(this._element).hasClass(n.ACTIVE)),t&&e(this._element).toggleClass(n.ACTIVE)},r.dispose=function(){e.removeData(this._element,"bs.button"),this._element=null},t._jQueryInterface=function(r){return this.each(function(){var n=e(this).data("bs.button");n||(n=new t(this),e(this).data("bs.button",n)),"toggle"===r&&n[r]()})},i(t,null,[{key:"VERSION",get:function(){return"4.1.1"}}]),t}();return e(document).on(s.CLICK_DATA_API,o.DATA_TOGGLE_CARROT,function(t){t.preventDefault();var r=t.target;e(r).hasClass(n.BUTTON)||(r=e(r).closest(o.BUTTON)),a._jQueryInterface.call(e(r),"toggle")}).on(s.FOCUS_BLUR_DATA_API,o.DATA_TOGGLE_CARROT,function(t){var r=e(t.target).closest(o.BUTTON)[0];e(r).toggleClass(n.FOCUS,/^focus(in)?$/.test(t.type))}),e.fn[t]=a._jQueryInterface,e.fn[t].Constructor=a,e.fn[t].noConflict=function(){return e.fn[t]=r,a._jQueryInterface},a}(t),c=function(e){var t="carousel",r="bs.carousel",n="."+r,o=e.fn[t],u={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},l={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},c={NEXT:"next",PREV:"prev",LEFT:"left",RIGHT:"right"},p={SLIDE:"slide"+n,SLID:"slid"+n,KEYDOWN:"keydown"+n,MOUSEENTER:"mouseenter"+n,MOUSELEAVE:"mouseleave"+n,TOUCHEND:"touchend"+n,LOAD_DATA_API:"load.bs.carousel.data-api",CLICK_DATA_API:"click.bs.carousel.data-api"},d={CAROUSEL:"carousel",ACTIVE:"active",SLIDE:"slide",RIGHT:"carousel-item-right",LEFT:"carousel-item-left",NEXT:"carousel-item-next",PREV:"carousel-item-prev",ITEM:"carousel-item"},h={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},f=function(){function o(t,r){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(r),this._element=e(t)[0],this._indicatorsElement=e(this._element).find(h.INDICATORS)[0],this._addEventListeners()}var f=o.prototype;return f.next=function(){this._isSliding||this._slide(c.NEXT)},f.nextWhenVisible=function(){!document.hidden&&e(this._element).is(":visible")&&"hidden"!==e(this._element).css("visibility")&&this.next()},f.prev=function(){this._isSliding||this._slide(c.PREV)},f.pause=function(t){t||(this._isPaused=!0),e(this._element).find(h.NEXT_PREV)[0]&&(a.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},f.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},f.to=function(t){var r=this;this._activeElement=e(this._element).find(h.ACTIVE_ITEM)[0];var n=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)e(this._element).one(p.SLID,function(){return r.to(t)});else{if(n===t)return this.pause(),void this.cycle();var i=t>n?c.NEXT:c.PREV;this._slide(i,this._items[t])}},f.dispose=function(){e(this._element).off(n),e.removeData(this._element,r),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},f._getConfig=function(e){return e=s({},u,e),a.typeCheckConfig(t,e,l),e},f._addEventListeners=function(){var t=this;this._config.keyboard&&e(this._element).on(p.KEYDOWN,function(e){return t._keydown(e)}),"hover"===this._config.pause&&(e(this._element).on(p.MOUSEENTER,function(e){return t.pause(e)}).on(p.MOUSELEAVE,function(e){return t.cycle(e)}),"ontouchstart"in document.documentElement&&e(this._element).on(p.TOUCHEND,function(){t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout(function(e){return t.cycle(e)},500+t._config.interval)}))},f._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next()}},f._getItemIndex=function(t){return this._items=e.makeArray(e(t).parent().find(h.ITEM)),this._items.indexOf(t)},f._getItemByDirection=function(e,t){var r=e===c.NEXT,n=e===c.PREV,i=this._getItemIndex(t),o=this._items.length-1,s=n&&0===i||r&&i===o;if(s&&!this._config.wrap)return t;var a=e===c.PREV?-1:1,u=(i+a)%this._items.length;return-1===u?this._items[this._items.length-1]:this._items[u]},f._triggerSlideEvent=function(t,r){var n=this._getItemIndex(t),i=this._getItemIndex(e(this._element).find(h.ACTIVE_ITEM)[0]),o=e.Event(p.SLIDE,{relatedTarget:t,direction:r,from:i,to:n});return e(this._element).trigger(o),o},f._setActiveIndicatorElement=function(t){if(this._indicatorsElement){e(this._indicatorsElement).find(h.ACTIVE).removeClass(d.ACTIVE);var r=this._indicatorsElement.children[this._getItemIndex(t)];r&&e(r).addClass(d.ACTIVE)}},f._slide=function(t,r){var n,i,o,s=this,u=e(this._element).find(h.ACTIVE_ITEM)[0],l=this._getItemIndex(u),f=r||u&&this._getItemByDirection(t,u),m=this._getItemIndex(f),g=Boolean(this._interval);if(t===c.NEXT?(n=d.LEFT,i=d.NEXT,o=c.LEFT):(n=d.RIGHT,i=d.PREV,o=c.RIGHT),f&&e(f).hasClass(d.ACTIVE))this._isSliding=!1;else{var v=this._triggerSlideEvent(f,o);if(!v.isDefaultPrevented()&&u&&f){this._isSliding=!0,g&&this.pause(),this._setActiveIndicatorElement(f);var b=e.Event(p.SLID,{relatedTarget:f,direction:o,from:l,to:m});if(e(this._element).hasClass(d.SLIDE)){e(f).addClass(i),a.reflow(f),e(u).addClass(n),e(f).addClass(n);var y=a.getTransitionDurationFromElement(u);e(u).one(a.TRANSITION_END,function(){e(f).removeClass(n+" "+i).addClass(d.ACTIVE),e(u).removeClass(d.ACTIVE+" "+i+" "+n),s._isSliding=!1,setTimeout(function(){return e(s._element).trigger(b)},0)}).emulateTransitionEnd(y)}else e(u).removeClass(d.ACTIVE),e(f).addClass(d.ACTIVE),this._isSliding=!1,e(this._element).trigger(b);g&&this.cycle()}}},o._jQueryInterface=function(t){return this.each(function(){var n=e(this).data(r),i=s({},u,e(this).data());"object"==typeof t&&(i=s({},i,t));var a="string"==typeof t?t:i.slide;if(n||(n=new o(this,i),e(this).data(r,n)),"number"==typeof t)n.to(t);else if("string"==typeof a){if(void 0===n[a])throw new TypeError('No method named "'+a+'"');n[a]()}else i.interval&&(n.pause(),n.cycle())})},o._dataApiClickHandler=function(t){var n=a.getSelectorFromElement(this);if(n){var i=e(n)[0];if(i&&e(i).hasClass(d.CAROUSEL)){var u=s({},e(i).data(),e(this).data()),l=this.getAttribute("data-slide-to");l&&(u.interval=!1),o._jQueryInterface.call(e(i),u),l&&e(i).data(r).to(l),t.preventDefault()}}},i(o,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return u}}]),o}();return e(document).on(p.CLICK_DATA_API,h.DATA_SLIDE,f._dataApiClickHandler),e(window).on(p.LOAD_DATA_API,function(){e(h.DATA_RIDE).each(function(){var t=e(this);f._jQueryInterface.call(t,t.data())})}),e.fn[t]=f._jQueryInterface,e.fn[t].Constructor=f,e.fn[t].noConflict=function(){return e.fn[t]=o,f._jQueryInterface},f}(t),p=function(e){var t="collapse",r="bs.collapse",n=e.fn[t],o={toggle:!0,parent:""},u={toggle:"boolean",parent:"(string|element)"},l={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},c={SHOW:"show",COLLAPSE:"collapse",COLLAPSING:"collapsing",COLLAPSED:"collapsed"},p={WIDTH:"width",HEIGHT:"height"},d={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},h=function(){function n(t,r){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(r),this._triggerArray=e.makeArray(e('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var n=e(d.DATA_TOGGLE),i=0;i<n.length;i++){var o=n[i],s=a.getSelectorFromElement(o);null!==s&&e(s).filter(t).length>0&&(this._selector=s,this._triggerArray.push(o))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var h=n.prototype;return h.toggle=function(){e(this._element).hasClass(c.SHOW)?this.hide():this.show()},h.show=function(){var t,i,o=this;if(!(this._isTransitioning||e(this._element).hasClass(c.SHOW)||(this._parent&&0===(t=e.makeArray(e(this._parent).find(d.ACTIVES).filter('[data-parent="'+this._config.parent+'"]'))).length&&(t=null),t&&(i=e(t).not(this._selector).data(r))&&i._isTransitioning))){var s=e.Event(l.SHOW);if(e(this._element).trigger(s),!s.isDefaultPrevented()){t&&(n._jQueryInterface.call(e(t).not(this._selector),"hide"),i||e(t).data(r,null));var u=this._getDimension();e(this._element).removeClass(c.COLLAPSE).addClass(c.COLLAPSING),this._element.style[u]=0,this._triggerArray.length>0&&e(this._triggerArray).removeClass(c.COLLAPSED).attr("aria-expanded",!0),this.setTransitioning(!0);var p=u[0].toUpperCase()+u.slice(1),h="scroll"+p,f=a.getTransitionDurationFromElement(this._element);e(this._element).one(a.TRANSITION_END,function(){e(o._element).removeClass(c.COLLAPSING).addClass(c.COLLAPSE).addClass(c.SHOW),o._element.style[u]="",o.setTransitioning(!1),e(o._element).trigger(l.SHOWN)}).emulateTransitionEnd(f),this._element.style[u]=this._element[h]+"px"}}},h.hide=function(){var t=this;if(!this._isTransitioning&&e(this._element).hasClass(c.SHOW)){var r=e.Event(l.HIDE);if(e(this._element).trigger(r),!r.isDefaultPrevented()){var n=this._getDimension();if(this._element.style[n]=this._element.getBoundingClientRect()[n]+"px",a.reflow(this._element),e(this._element).addClass(c.COLLAPSING).removeClass(c.COLLAPSE).removeClass(c.SHOW),this._triggerArray.length>0)for(var i=0;i<this._triggerArray.length;i++){var o=this._triggerArray[i],s=a.getSelectorFromElement(o);if(null!==s){var u=e(s);u.hasClass(c.SHOW)||e(o).addClass(c.COLLAPSED).attr("aria-expanded",!1)}}this.setTransitioning(!0),this._element.style[n]="";var p=a.getTransitionDurationFromElement(this._element);e(this._element).one(a.TRANSITION_END,function(){t.setTransitioning(!1),e(t._element).removeClass(c.COLLAPSING).addClass(c.COLLAPSE).trigger(l.HIDDEN)}).emulateTransitionEnd(p)}}},h.setTransitioning=function(e){this._isTransitioning=e},h.dispose=function(){e.removeData(this._element,r),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},h._getConfig=function(e){return(e=s({},o,e)).toggle=Boolean(e.toggle),a.typeCheckConfig(t,e,u),e},h._getDimension=function(){var t=e(this._element).hasClass(p.WIDTH);return t?p.WIDTH:p.HEIGHT},h._getParent=function(){var t=this,r=null;a.isElement(this._config.parent)?(r=this._config.parent,void 0!==this._config.parent.jquery&&(r=this._config.parent[0])):r=e(this._config.parent)[0];var i='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return e(r).find(i).each(function(e,r){t._addAriaAndCollapsedClass(n._getTargetFromElement(r),[r])}),r},h._addAriaAndCollapsedClass=function(t,r){if(t){var n=e(t).hasClass(c.SHOW);r.length>0&&e(r).toggleClass(c.COLLAPSED,!n).attr("aria-expanded",n)}},n._getTargetFromElement=function(t){var r=a.getSelectorFromElement(t);return r?e(r)[0]:null},n._jQueryInterface=function(t){return this.each(function(){var i=e(this),a=i.data(r),u=s({},o,i.data(),"object"==typeof t&&t?t:{});if(!a&&u.toggle&&/show|hide/.test(t)&&(u.toggle=!1),a||(a=new n(this,u),i.data(r,a)),"string"==typeof t){if(void 0===a[t])throw new TypeError('No method named "'+t+'"');a[t]()}})},i(n,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return o}}]),n}();return e(document).on(l.CLICK_DATA_API,d.DATA_TOGGLE,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var n=e(this),i=a.getSelectorFromElement(this);e(i).each(function(){var t=e(this),i=t.data(r),o=i?"toggle":n.data();h._jQueryInterface.call(t,o)})}),e.fn[t]=h._jQueryInterface,e.fn[t].Constructor=h,e.fn[t].noConflict=function(){return e.fn[t]=n,h._jQueryInterface},h}(t),d=function(e){var t="dropdown",n="bs.dropdown",o="."+n,u=e.fn[t],l=new RegExp("38|40|27"),c={HIDE:"hide"+o,HIDDEN:"hidden"+o,SHOW:"show"+o,SHOWN:"shown"+o,CLICK:"click"+o,CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},p={DISABLED:"disabled",SHOW:"show",DROPUP:"dropup",DROPRIGHT:"dropright",DROPLEFT:"dropleft",MENURIGHT:"dropdown-menu-right",MENULEFT:"dropdown-menu-left",POSITION_STATIC:"position-static"},d={DATA_TOGGLE:'[data-toggle="dropdown"]',FORM_CHILD:".dropdown form",MENU:".dropdown-menu",NAVBAR_NAV:".navbar-nav",VISIBLE_ITEMS:".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)"},h={TOP:"top-start",TOPEND:"top-end",BOTTOM:"bottom-start",BOTTOMEND:"bottom-end",RIGHT:"right-start",RIGHTEND:"right-end",LEFT:"left-start",LEFTEND:"left-end"},f={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},m={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},g=function(){function u(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var g=u.prototype;return g.toggle=function(){if(!this._element.disabled&&!e(this._element).hasClass(p.DISABLED)){var t=u._getParentFromElement(this._element),n=e(this._menu).hasClass(p.SHOW);if(u._clearMenus(),!n){var i={relatedTarget:this._element},o=e.Event(c.SHOW,i);if(e(t).trigger(o),!o.isDefaultPrevented()){if(!this._inNavbar){if(void 0===r)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var s=this._element;"parent"===this._config.reference?s=t:a.isElement(this._config.reference)&&(s=this._config.reference,void 0!==this._config.reference.jquery&&(s=this._config.reference[0])),"scrollParent"!==this._config.boundary&&e(t).addClass(p.POSITION_STATIC),this._popper=new r(s,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===e(t).closest(d.NAVBAR_NAV).length&&e(document.body).children().on("mouseover",null,e.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),e(this._menu).toggleClass(p.SHOW),e(t).toggleClass(p.SHOW).trigger(e.Event(c.SHOWN,i))}}}},g.dispose=function(){e.removeData(this._element,n),e(this._element).off(o),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},g.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},g._addEventListeners=function(){var t=this;e(this._element).on(c.CLICK,function(e){e.preventDefault(),e.stopPropagation(),t.toggle()})},g._getConfig=function(r){return r=s({},this.constructor.Default,e(this._element).data(),r),a.typeCheckConfig(t,r,this.constructor.DefaultType),r},g._getMenuElement=function(){if(!this._menu){var t=u._getParentFromElement(this._element);this._menu=e(t).find(d.MENU)[0]}return this._menu},g._getPlacement=function(){var t=e(this._element).parent(),r=h.BOTTOM;return t.hasClass(p.DROPUP)?(r=h.TOP,e(this._menu).hasClass(p.MENURIGHT)&&(r=h.TOPEND)):t.hasClass(p.DROPRIGHT)?r=h.RIGHT:t.hasClass(p.DROPLEFT)?r=h.LEFT:e(this._menu).hasClass(p.MENURIGHT)&&(r=h.BOTTOMEND),r},g._detectNavbar=function(){return e(this._element).closest(".navbar").length>0},g._getPopperConfig=function(){var e=this,t={};"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=s({},t.offsets,e._config.offset(t.offsets)||{}),t}:t.offset=this._config.offset;var r={placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(r.modifiers.applyStyle={enabled:!1}),r},u._jQueryInterface=function(t){return this.each(function(){var r=e(this).data(n),i="object"==typeof t?t:null;if(r||(r=new u(this,i),e(this).data(n,r)),"string"==typeof t){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t]()}})},u._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var r=e.makeArray(e(d.DATA_TOGGLE)),i=0;i<r.length;i++){var o=u._getParentFromElement(r[i]),s=e(r[i]).data(n),a={relatedTarget:r[i]};if(s){var l=s._menu;if(e(o).hasClass(p.SHOW)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&e.contains(o,t.target))){var h=e.Event(c.HIDE,a);e(o).trigger(h),h.isDefaultPrevented()||("ontouchstart"in document.documentElement&&e(document.body).children().off("mouseover",null,e.noop),r[i].setAttribute("aria-expanded","false"),e(l).removeClass(p.SHOW),e(o).removeClass(p.SHOW).trigger(e.Event(c.HIDDEN,a)))}}}},u._getParentFromElement=function(t){var r,n=a.getSelectorFromElement(t);return n&&(r=e(n)[0]),r||t.parentNode},u._dataApiKeydownHandler=function(t){if((/input|textarea/i.test(t.target.tagName)?!(32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||e(t.target).closest(d.MENU).length)):l.test(t.which))&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!e(this).hasClass(p.DISABLED))){var r=u._getParentFromElement(this),n=e(r).hasClass(p.SHOW);if((n||27===t.which&&32===t.which)&&(!n||27!==t.which&&32!==t.which)){var i=e(r).find(d.VISIBLE_ITEMS).get();if(0!==i.length){var o=i.indexOf(t.target);38===t.which&&o>0&&o--,40===t.which&&o<i.length-1&&o++,o<0&&(o=0),i[o].focus()}}else{if(27===t.which){var s=e(r).find(d.DATA_TOGGLE)[0];e(s).trigger("focus")}e(this).trigger("click")}}},i(u,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return f}},{key:"DefaultType",get:function(){return m}}]),u}();return e(document).on(c.KEYDOWN_DATA_API,d.DATA_TOGGLE,g._dataApiKeydownHandler).on(c.KEYDOWN_DATA_API,d.MENU,g._dataApiKeydownHandler).on(c.CLICK_DATA_API+" "+c.KEYUP_DATA_API,g._clearMenus).on(c.CLICK_DATA_API,d.DATA_TOGGLE,function(t){t.preventDefault(),t.stopPropagation(),g._jQueryInterface.call(e(this),"toggle")}).on(c.CLICK_DATA_API,d.FORM_CHILD,function(e){e.stopPropagation()}),e.fn[t]=g._jQueryInterface,e.fn[t].Constructor=g,e.fn[t].noConflict=function(){return e.fn[t]=u,g._jQueryInterface},g}(t),h=function(e){var t="modal",r=".bs.modal",n=e.fn.modal,o={backdrop:!0,keyboard:!0,focus:!0,show:!0},u={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},l={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},c={SCROLLBAR_MEASURER:"modal-scrollbar-measure",BACKDROP:"modal-backdrop",OPEN:"modal-open",FADE:"fade",SHOW:"show"},p={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top",NAVBAR_TOGGLER:".navbar-toggler"},d=function(){function n(t,r){this._config=this._getConfig(r),this._element=t,this._dialog=e(t).find(p.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._scrollbarWidth=0}var d=n.prototype;return d.toggle=function(e){return this._isShown?this.hide():this.show(e)},d.show=function(t){var r=this;if(!this._isTransitioning&&!this._isShown){e(this._element).hasClass(c.FADE)&&(this._isTransitioning=!0);var n=e.Event(l.SHOW,{relatedTarget:t});e(this._element).trigger(n),this._isShown||n.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),e(document.body).addClass(c.OPEN),this._setEscapeEvent(),this._setResizeEvent(),e(this._element).on(l.CLICK_DISMISS,p.DATA_DISMISS,function(e){return r.hide(e)}),e(this._dialog).on(l.MOUSEDOWN_DISMISS,function(){e(r._element).one(l.MOUSEUP_DISMISS,function(t){e(t.target).is(r._element)&&(r._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return r._showElement(t)}))}},d.hide=function(t){var r=this;if(t&&t.preventDefault(),!this._isTransitioning&&this._isShown){var n=e.Event(l.HIDE);if(e(this._element).trigger(n),this._isShown&&!n.isDefaultPrevented()){this._isShown=!1;var i=e(this._element).hasClass(c.FADE);if(i&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),e(document).off(l.FOCUSIN),e(this._element).removeClass(c.SHOW),e(this._element).off(l.CLICK_DISMISS),e(this._dialog).off(l.MOUSEDOWN_DISMISS),i){var o=a.getTransitionDurationFromElement(this._element);e(this._element).one(a.TRANSITION_END,function(e){return r._hideModal(e)}).emulateTransitionEnd(o)}else this._hideModal()}}},d.dispose=function(){e.removeData(this._element,"bs.modal"),e(window,document,this._element,this._backdrop).off(r),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},d.handleUpdate=function(){this._adjustDialog()},d._getConfig=function(e){return e=s({},o,e),a.typeCheckConfig(t,e,u),e},d._showElement=function(t){var r=this,n=e(this._element).hasClass(c.FADE);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,n&&a.reflow(this._element),e(this._element).addClass(c.SHOW),this._config.focus&&this._enforceFocus();var i=e.Event(l.SHOWN,{relatedTarget:t}),o=function(){r._config.focus&&r._element.focus(),r._isTransitioning=!1,e(r._element).trigger(i)};if(n){var s=a.getTransitionDurationFromElement(this._element);e(this._dialog).one(a.TRANSITION_END,o).emulateTransitionEnd(s)}else o()},d._enforceFocus=function(){var t=this;e(document).off(l.FOCUSIN).on(l.FOCUSIN,function(r){document!==r.target&&t._element!==r.target&&0===e(t._element).has(r.target).length&&t._element.focus()})},d._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?e(this._element).on(l.KEYDOWN_DISMISS,function(e){27===e.which&&(e.preventDefault(),t.hide())}):this._isShown||e(this._element).off(l.KEYDOWN_DISMISS)},d._setResizeEvent=function(){var t=this;this._isShown?e(window).on(l.RESIZE,function(e){return t.handleUpdate(e)}):e(window).off(l.RESIZE)},d._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){e(document.body).removeClass(c.OPEN),t._resetAdjustments(),t._resetScrollbar(),e(t._element).trigger(l.HIDDEN)})},d._removeBackdrop=function(){this._backdrop&&(e(this._backdrop).remove(),this._backdrop=null)},d._showBackdrop=function(t){var r=this,n=e(this._element).hasClass(c.FADE)?c.FADE:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=c.BACKDROP,n&&e(this._backdrop).addClass(n),e(this._backdrop).appendTo(document.body),e(this._element).on(l.CLICK_DISMISS,function(e){r._ignoreBackdropClick?r._ignoreBackdropClick=!1:e.target===e.currentTarget&&("static"===r._config.backdrop?r._element.focus():r.hide())}),n&&a.reflow(this._backdrop),e(this._backdrop).addClass(c.SHOW),!t)return;if(!n)return void t();var i=a.getTransitionDurationFromElement(this._backdrop);e(this._backdrop).one(a.TRANSITION_END,t).emulateTransitionEnd(i)}else if(!this._isShown&&this._backdrop){e(this._backdrop).removeClass(c.SHOW);var o=function(){r._removeBackdrop(),t&&t()};if(e(this._element).hasClass(c.FADE)){var s=a.getTransitionDurationFromElement(this._backdrop);e(this._backdrop).one(a.TRANSITION_END,o).emulateTransitionEnd(s)}else o()}else t&&t()},d._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},d._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},d._checkScrollbar=function(){var e=document.body.getBoundingClientRect();this._isBodyOverflowing=e.left+e.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},d._setScrollbar=function(){var t=this;if(this._isBodyOverflowing){e(p.FIXED_CONTENT).each(function(r,n){var i=e(n)[0].style.paddingRight,o=e(n).css("padding-right");e(n).data("padding-right",i).css("padding-right",parseFloat(o)+t._scrollbarWidth+"px")}),e(p.STICKY_CONTENT).each(function(r,n){var i=e(n)[0].style.marginRight,o=e(n).css("margin-right");e(n).data("margin-right",i).css("margin-right",parseFloat(o)-t._scrollbarWidth+"px")}),e(p.NAVBAR_TOGGLER).each(function(r,n){var i=e(n)[0].style.marginRight,o=e(n).css("margin-right");e(n).data("margin-right",i).css("margin-right",parseFloat(o)+t._scrollbarWidth+"px")});var r=document.body.style.paddingRight,n=e(document.body).css("padding-right");e(document.body).data("padding-right",r).css("padding-right",parseFloat(n)+this._scrollbarWidth+"px")}},d._resetScrollbar=function(){e(p.FIXED_CONTENT).each(function(t,r){var n=e(r).data("padding-right");void 0!==n&&e(r).css("padding-right",n).removeData("padding-right")}),e(p.STICKY_CONTENT+", "+p.NAVBAR_TOGGLER).each(function(t,r){var n=e(r).data("margin-right");void 0!==n&&e(r).css("margin-right",n).removeData("margin-right")});var t=e(document.body).data("padding-right");void 0!==t&&e(document.body).css("padding-right",t).removeData("padding-right")},d._getScrollbarWidth=function(){var e=document.createElement("div");e.className=c.SCROLLBAR_MEASURER,document.body.appendChild(e);var t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t},n._jQueryInterface=function(t,r){return this.each(function(){var i=e(this).data("bs.modal"),a=s({},o,e(this).data(),"object"==typeof t&&t?t:{});if(i||(i=new n(this,a),e(this).data("bs.modal",i)),"string"==typeof t){if(void 0===i[t])throw new TypeError('No method named "'+t+'"');i[t](r)}else a.show&&i.show(r)})},i(n,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return o}}]),n}();return e(document).on(l.CLICK_DATA_API,p.DATA_TOGGLE,function(t){var r,n=this,i=a.getSelectorFromElement(this);i&&(r=e(i)[0]);var o=e(r).data("bs.modal")?"toggle":s({},e(r).data(),e(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var u=e(r).one(l.SHOW,function(t){t.isDefaultPrevented()||u.one(l.HIDDEN,function(){e(n).is(":visible")&&n.focus()})});d._jQueryInterface.call(e(r),o,this)}),e.fn.modal=d._jQueryInterface,e.fn.modal.Constructor=d,e.fn.modal.noConflict=function(){return e.fn.modal=n,d._jQueryInterface},d}(t),f=function(e){var t="tooltip",n=".bs.tooltip",o=e.fn[t],u=new RegExp("(^|\\s)bs-tooltip\\S+","g"),l={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"},c={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},p={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},d={SHOW:"show",OUT:"out"},h={HIDE:"hide"+n,HIDDEN:"hidden"+n,SHOW:"show"+n,SHOWN:"shown"+n,INSERTED:"inserted"+n,CLICK:"click"+n,FOCUSIN:"focusin"+n,FOCUSOUT:"focusout"+n,MOUSEENTER:"mouseenter"+n,MOUSELEAVE:"mouseleave"+n},f={FADE:"fade",SHOW:"show"},m={TOOLTIP:".tooltip",TOOLTIP_INNER:".tooltip-inner",ARROW:".arrow"},g={HOVER:"hover",FOCUS:"focus",CLICK:"click",MANUAL:"manual"},v=function(){function o(e,t){if(void 0===r)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=e,this.config=this._getConfig(t),this.tip=null,this._setListeners()}var v=o.prototype;return v.enable=function(){this._isEnabled=!0},v.disable=function(){this._isEnabled=!1},v.toggleEnabled=function(){this._isEnabled=!this._isEnabled},v.toggle=function(t){if(this._isEnabled)if(t){var r=this.constructor.DATA_KEY,n=e(t.currentTarget).data(r);n||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(r,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)}else{if(e(this.getTipElement()).hasClass(f.SHOW))return void this._leave(null,this);this._enter(null,this)}},v.dispose=function(){clearTimeout(this._timeout),e.removeData(this.element,this.constructor.DATA_KEY),e(this.element).off(this.constructor.EVENT_KEY),e(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&e(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},v.show=function(){var t=this;if("none"===e(this.element).css("display"))throw new Error("Please use show on visible elements");var n=e.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){e(this.element).trigger(n);var i=e.contains(this.element.ownerDocument.documentElement,this.element);if(n.isDefaultPrevented()||!i)return;var o=this.getTipElement(),s=a.getUID(this.constructor.NAME);o.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&e(o).addClass(f.FADE);var u="function"==typeof this.config.placement?this.config.placement.call(this,o,this.element):this.config.placement,l=this._getAttachment(u);this.addAttachmentClass(l);var c=!1===this.config.container?document.body:e(this.config.container);e(o).data(this.constructor.DATA_KEY,this),e.contains(this.element.ownerDocument.documentElement,this.tip)||e(o).appendTo(c),e(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new r(this.element,o,{placement:l,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:m.ARROW},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(e){e.originalPlacement!==e.placement&&t._handlePopperPlacementChange(e)},onUpdate:function(e){t._handlePopperPlacementChange(e)}}),e(o).addClass(f.SHOW),"ontouchstart"in document.documentElement&&e(document.body).children().on("mouseover",null,e.noop);var p=function(){t.config.animation&&t._fixTransition();var r=t._hoverState;t._hoverState=null,e(t.element).trigger(t.constructor.Event.SHOWN),r===d.OUT&&t._leave(null,t)};if(e(this.tip).hasClass(f.FADE)){var h=a.getTransitionDurationFromElement(this.tip);e(this.tip).one(a.TRANSITION_END,p).emulateTransitionEnd(h)}else p()}},v.hide=function(t){var r=this,n=this.getTipElement(),i=e.Event(this.constructor.Event.HIDE),o=function(){r._hoverState!==d.SHOW&&n.parentNode&&n.parentNode.removeChild(n),r._cleanTipClass(),r.element.removeAttribute("aria-describedby"),e(r.element).trigger(r.constructor.Event.HIDDEN),null!==r._popper&&r._popper.destroy(),t&&t()};if(e(this.element).trigger(i),!i.isDefaultPrevented()){if(e(n).removeClass(f.SHOW),"ontouchstart"in document.documentElement&&e(document.body).children().off("mouseover",null,e.noop),this._activeTrigger[g.CLICK]=!1,this._activeTrigger[g.FOCUS]=!1,this._activeTrigger[g.HOVER]=!1,e(this.tip).hasClass(f.FADE)){var s=a.getTransitionDurationFromElement(n);e(n).one(a.TRANSITION_END,o).emulateTransitionEnd(s)}else o();this._hoverState=""}},v.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},v.isWithContent=function(){return Boolean(this.getTitle())},v.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-tooltip-"+t)},v.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},v.setContent=function(){var t=e(this.getTipElement());this.setElementContent(t.find(m.TOOLTIP_INNER),this.getTitle()),t.removeClass(f.FADE+" "+f.SHOW)},v.setElementContent=function(t,r){var n=this.config.html;"object"==typeof r&&(r.nodeType||r.jquery)?n?e(r).parent().is(t)||t.empty().append(r):t.text(e(r).text()):t[n?"html":"text"](r)},v.getTitle=function(){var e=this.element.getAttribute("data-original-title");return e||(e="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),e},v._getAttachment=function(e){return c[e.toUpperCase()]},v._setListeners=function(){var t=this,r=this.config.trigger.split(" ");r.forEach(function(r){if("click"===r)e(t.element).on(t.constructor.Event.CLICK,t.config.selector,function(e){return t.toggle(e)});else if(r!==g.MANUAL){var n=r===g.HOVER?t.constructor.Event.MOUSEENTER:t.constructor.Event.FOCUSIN,i=r===g.HOVER?t.constructor.Event.MOUSELEAVE:t.constructor.Event.FOCUSOUT;e(t.element).on(n,t.config.selector,function(e){return t._enter(e)}).on(i,t.config.selector,function(e){return t._leave(e)})}e(t.element).closest(".modal").on("hide.bs.modal",function(){return t.hide()})}),this.config.selector?this.config=s({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},v._fixTitle=function(){var e=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==e)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},v._enter=function(t,r){var n=this.constructor.DATA_KEY;(r=r||e(t.currentTarget).data(n))||(r=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(n,r)),t&&(r._activeTrigger["focusin"===t.type?g.FOCUS:g.HOVER]=!0),e(r.getTipElement()).hasClass(f.SHOW)||r._hoverState===d.SHOW?r._hoverState=d.SHOW:(clearTimeout(r._timeout),r._hoverState=d.SHOW,r.config.delay&&r.config.delay.show?r._timeout=setTimeout(function(){r._hoverState===d.SHOW&&r.show()},r.config.delay.show):r.show())},v._leave=function(t,r){var n=this.constructor.DATA_KEY;(r=r||e(t.currentTarget).data(n))||(r=new this.constructor(t.currentTarget,this._getDelegateConfig()),e(t.currentTarget).data(n,r)),t&&(r._activeTrigger["focusout"===t.type?g.FOCUS:g.HOVER]=!1),r._isWithActiveTrigger()||(clearTimeout(r._timeout),r._hoverState=d.OUT,r.config.delay&&r.config.delay.hide?r._timeout=setTimeout(function(){r._hoverState===d.OUT&&r.hide()},r.config.delay.hide):r.hide())},v._isWithActiveTrigger=function(){for(var e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1},v._getConfig=function(r){return"number"==typeof(r=s({},this.constructor.Default,e(this.element).data(),"object"==typeof r&&r?r:{})).delay&&(r.delay={show:r.delay,hide:r.delay}),"number"==typeof r.title&&(r.title=r.title.toString()),"number"==typeof r.content&&(r.content=r.content.toString()),a.typeCheckConfig(t,r,this.constructor.DefaultType),r},v._getDelegateConfig=function(){var e={};if(this.config)for(var t in this.config)this.constructor.Default[t]!==this.config[t]&&(e[t]=this.config[t]);return e},v._cleanTipClass=function(){var t=e(this.getTipElement()),r=t.attr("class").match(u);null!==r&&r.length>0&&t.removeClass(r.join(""))},v._handlePopperPlacementChange=function(e){this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(e.placement))},v._fixTransition=function(){var t=this.getTipElement(),r=this.config.animation;null===t.getAttribute("x-placement")&&(e(t).removeClass(f.FADE),this.config.animation=!1,this.hide(),this.show(),this.config.animation=r)},o._jQueryInterface=function(t){return this.each(function(){var r=e(this).data("bs.tooltip"),n="object"==typeof t&&t;if((r||!/dispose|hide/.test(t))&&(r||(r=new o(this,n),e(this).data("bs.tooltip",r)),"string"==typeof t)){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t]()}})},i(o,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return p}},{key:"NAME",get:function(){return t}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return h}},{key:"EVENT_KEY",get:function(){return n}},{key:"DefaultType",get:function(){return l}}]),o}();return e.fn[t]=v._jQueryInterface,e.fn[t].Constructor=v,e.fn[t].noConflict=function(){return e.fn[t]=o,v._jQueryInterface},v}(t),m=function(e){var t="popover",r=".bs.popover",n=e.fn[t],o=new RegExp("(^|\\s)bs-popover\\S+","g"),a=s({},f.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),u=s({},f.DefaultType,{content:"(string|element|function)"}),l={FADE:"fade",SHOW:"show"},c={TITLE:".popover-header",CONTENT:".popover-body"},p={HIDE:"hide"+r,HIDDEN:"hidden"+r,SHOW:"show"+r,SHOWN:"shown"+r,INSERTED:"inserted"+r,CLICK:"click"+r,FOCUSIN:"focusin"+r,FOCUSOUT:"focusout"+r,MOUSEENTER:"mouseenter"+r,MOUSELEAVE:"mouseleave"+r},d=function(n){var s,d;function h(){return n.apply(this,arguments)||this}d=n,(s=h).prototype=Object.create(d.prototype),s.prototype.constructor=s,s.__proto__=d;var f=h.prototype;return f.isWithContent=function(){return this.getTitle()||this._getContent()},f.addAttachmentClass=function(t){e(this.getTipElement()).addClass("bs-popover-"+t)},f.getTipElement=function(){return this.tip=this.tip||e(this.config.template)[0],this.tip},f.setContent=function(){var t=e(this.getTipElement());this.setElementContent(t.find(c.TITLE),this.getTitle());var r=this._getContent();"function"==typeof r&&(r=r.call(this.element)),this.setElementContent(t.find(c.CONTENT),r),t.removeClass(l.FADE+" "+l.SHOW)},f._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},f._cleanTipClass=function(){var t=e(this.getTipElement()),r=t.attr("class").match(o);null!==r&&r.length>0&&t.removeClass(r.join(""))},h._jQueryInterface=function(t){return this.each(function(){var r=e(this).data("bs.popover"),n="object"==typeof t?t:null;if((r||!/destroy|hide/.test(t))&&(r||(r=new h(this,n),e(this).data("bs.popover",r)),"string"==typeof t)){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t]()}})},i(h,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return a}},{key:"NAME",get:function(){return t}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return p}},{key:"EVENT_KEY",get:function(){return r}},{key:"DefaultType",get:function(){return u}}]),h}(f);return e.fn[t]=d._jQueryInterface,e.fn[t].Constructor=d,e.fn[t].noConflict=function(){return e.fn[t]=n,d._jQueryInterface},d}(t),g=function(e){var t="scrollspy",r=e.fn[t],n={offset:10,method:"auto",target:""},o={offset:"number",method:"string",target:"(string|element)"},u={ACTIVATE:"activate.bs.scrollspy",SCROLL:"scroll.bs.scrollspy",LOAD_DATA_API:"load.bs.scrollspy.data-api"},l={DROPDOWN_ITEM:"dropdown-item",DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active"},c={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},p={OFFSET:"offset",POSITION:"position"},d=function(){function r(t,r){var n=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(r),this._selector=this._config.target+" "+c.NAV_LINKS+","+this._config.target+" "+c.LIST_ITEMS+","+this._config.target+" "+c.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,e(this._scrollElement).on(u.SCROLL,function(e){return n._process(e)}),this.refresh(),this._process()}var d=r.prototype;return d.refresh=function(){var t=this,r=this._scrollElement===this._scrollElement.window?p.OFFSET:p.POSITION,n="auto"===this._config.method?r:this._config.method,i=n===p.POSITION?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight();var o=e.makeArray(e(this._selector));o.map(function(t){var r,o=a.getSelectorFromElement(t);if(o&&(r=e(o)[0]),r){var s=r.getBoundingClientRect();if(s.width||s.height)return[e(r)[n]().top+i,o]}return null}).filter(function(e){return e}).sort(function(e,t){return e[0]-t[0]}).forEach(function(e){t._offsets.push(e[0]),t._targets.push(e[1])})},d.dispose=function(){e.removeData(this._element,"bs.scrollspy"),e(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},d._getConfig=function(r){if("string"!=typeof(r=s({},n,"object"==typeof r&&r?r:{})).target){var i=e(r.target).attr("id");i||(i=a.getUID(t),e(r.target).attr("id",i)),r.target="#"+i}return a.typeCheckConfig(t,r,o),r},d._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},d._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},d._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},d._process=function(){var e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),r=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),e>=r){var n=this._targets[this._targets.length-1];this._activeTarget!==n&&this._activate(n)}else{if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var i=this._offsets.length;i--;){var o=this._activeTarget!==this._targets[i]&&e>=this._offsets[i]&&(void 0===this._offsets[i+1]||e<this._offsets[i+1]);o&&this._activate(this._targets[i])}}},d._activate=function(t){this._activeTarget=t,this._clear();var r=this._selector.split(",");r=r.map(function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'});var n=e(r.join(","));n.hasClass(l.DROPDOWN_ITEM)?(n.closest(c.DROPDOWN).find(c.DROPDOWN_TOGGLE).addClass(l.ACTIVE),n.addClass(l.ACTIVE)):(n.addClass(l.ACTIVE),n.parents(c.NAV_LIST_GROUP).prev(c.NAV_LINKS+", "+c.LIST_ITEMS).addClass(l.ACTIVE),n.parents(c.NAV_LIST_GROUP).prev(c.NAV_ITEMS).children(c.NAV_LINKS).addClass(l.ACTIVE)),e(this._scrollElement).trigger(u.ACTIVATE,{relatedTarget:t})},d._clear=function(){e(this._selector).filter(c.ACTIVE).removeClass(l.ACTIVE)},r._jQueryInterface=function(t){return this.each(function(){var n=e(this).data("bs.scrollspy"),i="object"==typeof t&&t;if(n||(n=new r(this,i),e(this).data("bs.scrollspy",n)),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}})},i(r,null,[{key:"VERSION",get:function(){return"4.1.1"}},{key:"Default",get:function(){return n}}]),r}();return e(window).on(u.LOAD_DATA_API,function(){for(var t=e.makeArray(e(c.DATA_SPY)),r=t.length;r--;){var n=e(t[r]);d._jQueryInterface.call(n,n.data())}}),e.fn[t]=d._jQueryInterface,e.fn[t].Constructor=d,e.fn[t].noConflict=function(){return e.fn[t]=r,d._jQueryInterface},d}(t),v=function(e){var t=e.fn.tab,r={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},n={DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active",DISABLED:"disabled",FADE:"fade",SHOW:"show"},o={DROPDOWN:".dropdown",NAV_LIST_GROUP:".nav, .list-group",ACTIVE:".active",ACTIVE_UL:"> li > .active",DATA_TOGGLE:'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',DROPDOWN_TOGGLE:".dropdown-toggle",DROPDOWN_ACTIVE_CHILD:"> .dropdown-menu .active"},s=function(){function t(e){this._element=e}var s=t.prototype;return s.show=function(){var t=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&e(this._element).hasClass(n.ACTIVE)||e(this._element).hasClass(n.DISABLED))){var i,s,u=e(this._element).closest(o.NAV_LIST_GROUP)[0],l=a.getSelectorFromElement(this._element);if(u){var c="UL"===u.nodeName?o.ACTIVE_UL:o.ACTIVE;s=(s=e.makeArray(e(u).find(c)))[s.length-1]}var p=e.Event(r.HIDE,{relatedTarget:this._element}),d=e.Event(r.SHOW,{relatedTarget:s});if(s&&e(s).trigger(p),e(this._element).trigger(d),!d.isDefaultPrevented()&&!p.isDefaultPrevented()){l&&(i=e(l)[0]),this._activate(this._element,u);var h=function(){var n=e.Event(r.HIDDEN,{relatedTarget:t._element}),i=e.Event(r.SHOWN,{relatedTarget:s});e(s).trigger(n),e(t._element).trigger(i)};i?this._activate(i,i.parentNode,h):h()}}},s.dispose=function(){e.removeData(this._element,"bs.tab"),this._element=null},s._activate=function(t,r,i){var s=this,u=("UL"===r.nodeName?e(r).find(o.ACTIVE_UL):e(r).children(o.ACTIVE))[0],l=i&&u&&e(u).hasClass(n.FADE),c=function(){return s._transitionComplete(t,u,i)};if(u&&l){var p=a.getTransitionDurationFromElement(u);e(u).one(a.TRANSITION_END,c).emulateTransitionEnd(p)}else c()},s._transitionComplete=function(t,r,i){if(r){e(r).removeClass(n.SHOW+" "+n.ACTIVE);var s=e(r.parentNode).find(o.DROPDOWN_ACTIVE_CHILD)[0];s&&e(s).removeClass(n.ACTIVE),"tab"===r.getAttribute("role")&&r.setAttribute("aria-selected",!1)}if(e(t).addClass(n.ACTIVE),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),a.reflow(t),e(t).addClass(n.SHOW),t.parentNode&&e(t.parentNode).hasClass(n.DROPDOWN_MENU)){var u=e(t).closest(o.DROPDOWN)[0];u&&e(u).find(o.DROPDOWN_TOGGLE).addClass(n.ACTIVE),t.setAttribute("aria-expanded",!0)}i&&i()},t._jQueryInterface=function(r){return this.each(function(){var n=e(this),i=n.data("bs.tab");if(i||(i=new t(this),n.data("bs.tab",i)),"string"==typeof r){if(void 0===i[r])throw new TypeError('No method named "'+r+'"');i[r]()}})},i(t,null,[{key:"VERSION",get:function(){return"4.1.1"}}]),t}();return e(document).on(r.CLICK_DATA_API,o.DATA_TOGGLE,function(t){t.preventDefault(),s._jQueryInterface.call(e(this),"show")}),e.fn.tab=s._jQueryInterface,e.fn.tab.Constructor=s,e.fn.tab.noConflict=function(){return e.fn.tab=t,s._jQueryInterface},s}(t);(function(e){if(void 0===e)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t=e.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||t[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")})(t),e.Util=a,e.Alert=u,e.Button=l,e.Carousel=c,e.Collapse=p,e.Dropdown=d,e.Modal=h,e.Popover=m,e.Scrollspy=g,e.Tab=v,e.Tooltip=f,Object.defineProperty(e,"__esModule",{value:!0})}(t,r(0),r(2))},function(e,t,r){(function(n){var i,o,s;
/*! Magnific Popup - v1.1.0 - 2016-02-20
* http://dimsemenov.com/plugins/magnific-popup/
* Copyright (c) 2016 Dmitry Semenov; */o=[r(0)],void 0===(s="function"==typeof(i=function(e){var t,r,i,o,s,a,u=function(){},l=!!n,c=e(window),p=function(e,r){t.ev.on("mfp"+e+".mfp",r)},d=function(t,r,n,i){var o=document.createElement("div");return o.className="mfp-"+t,n&&(o.innerHTML=n),i?r&&r.appendChild(o):(o=e(o),r&&o.appendTo(r)),o},h=function(r,n){t.ev.triggerHandler("mfp"+r,n),t.st.callbacks&&(r=r.charAt(0).toLowerCase()+r.slice(1),t.st.callbacks[r]&&t.st.callbacks[r].apply(t,e.isArray(n)?n:[n]))},f=function(r){return r===a&&t.currTemplate.closeBtn||(t.currTemplate.closeBtn=e(t.st.closeMarkup.replace("%title%",t.st.tClose)),a=r),t.currTemplate.closeBtn},m=function(){e.magnificPopup.instance||((t=new u).init(),e.magnificPopup.instance=t)};u.prototype={constructor:u,init:function(){var r=navigator.appVersion;t.isLowIE=t.isIE8=document.all&&!document.addEventListener,t.isAndroid=/android/gi.test(r),t.isIOS=/iphone|ipad|ipod/gi.test(r),t.supportsTransition=function(){var e=document.createElement("p").style,t=["ms","O","Moz","Webkit"];if(void 0!==e.transition)return!0;for(;t.length;)if(t.pop()+"Transition"in e)return!0;return!1}(),t.probablyMobile=t.isAndroid||t.isIOS||/(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent),i=e(document),t.popupsCache={}},open:function(r){var n;if(!1===r.isObj){t.items=r.items.toArray(),t.index=0;var o,a=r.items;for(n=0;n<a.length;n++)if((o=a[n]).parsed&&(o=o.el[0]),o===r.el[0]){t.index=n;break}}else t.items=e.isArray(r.items)?r.items:[r.items],t.index=r.index||0;if(!t.isOpen){t.types=[],s="",r.mainEl&&r.mainEl.length?t.ev=r.mainEl.eq(0):t.ev=i,r.key?(t.popupsCache[r.key]||(t.popupsCache[r.key]={}),t.currTemplate=t.popupsCache[r.key]):t.currTemplate={},t.st=e.extend(!0,{},e.magnificPopup.defaults,r),t.fixedContentPos="auto"===t.st.fixedContentPos?!t.probablyMobile:t.st.fixedContentPos,t.st.modal&&(t.st.closeOnContentClick=!1,t.st.closeOnBgClick=!1,t.st.showCloseBtn=!1,t.st.enableEscapeKey=!1),t.bgOverlay||(t.bgOverlay=d("bg").on("click.mfp",function(){t.close()}),t.wrap=d("wrap").attr("tabindex",-1).on("click.mfp",function(e){t._checkIfClose(e.target)&&t.close()}),t.container=d("container",t.wrap)),t.contentContainer=d("content"),t.st.preloader&&(t.preloader=d("preloader",t.container,t.st.tLoading));var u=e.magnificPopup.modules;for(n=0;n<u.length;n++){var l=u[n];l=l.charAt(0).toUpperCase()+l.slice(1),t["init"+l].call(t)}h("BeforeOpen"),t.st.showCloseBtn&&(t.st.closeBtnInside?(p("MarkupParse",function(e,t,r,n){r.close_replaceWith=f(n.type)}),s+=" mfp-close-btn-in"):t.wrap.append(f())),t.st.alignTop&&(s+=" mfp-align-top"),t.fixedContentPos?t.wrap.css({overflow:t.st.overflowY,overflowX:"hidden",overflowY:t.st.overflowY}):t.wrap.css({top:c.scrollTop(),position:"absolute"}),(!1===t.st.fixedBgPos||"auto"===t.st.fixedBgPos&&!t.fixedContentPos)&&t.bgOverlay.css({height:i.height(),position:"absolute"}),t.st.enableEscapeKey&&i.on("keyup.mfp",function(e){27===e.keyCode&&t.close()}),c.on("resize.mfp",function(){t.updateSize()}),t.st.closeOnContentClick||(s+=" mfp-auto-cursor"),s&&t.wrap.addClass(s);var m=t.wH=c.height(),g={};if(t.fixedContentPos&&t._hasScrollBar(m)){var v=t._getScrollbarSize();v&&(g.marginRight=v)}t.fixedContentPos&&(t.isIE7?e("body, html").css("overflow","hidden"):g.overflow="hidden");var b=t.st.mainClass;return t.isIE7&&(b+=" mfp-ie7"),b&&t._addClassToMFP(b),t.updateItemHTML(),h("BuildControls"),e("html").css(g),t.bgOverlay.add(t.wrap).prependTo(t.st.prependTo||e(document.body)),t._lastFocusedEl=document.activeElement,setTimeout(function(){t.content?(t._addClassToMFP("mfp-ready"),t._setFocus()):t.bgOverlay.addClass("mfp-ready"),i.on("focusin.mfp",t._onFocusIn)},16),t.isOpen=!0,t.updateSize(m),h("Open"),r}t.updateItemHTML()},close:function(){t.isOpen&&(h("BeforeClose"),t.isOpen=!1,t.st.removalDelay&&!t.isLowIE&&t.supportsTransition?(t._addClassToMFP("mfp-removing"),setTimeout(function(){t._close()},t.st.removalDelay)):t._close())},_close:function(){h("Close");var r="mfp-removing mfp-ready ";if(t.bgOverlay.detach(),t.wrap.detach(),t.container.empty(),t.st.mainClass&&(r+=t.st.mainClass+" "),t._removeClassFromMFP(r),t.fixedContentPos){var n={marginRight:""};t.isIE7?e("body, html").css("overflow",""):n.overflow="",e("html").css(n)}i.off("keyup.mfp focusin.mfp"),t.ev.off(".mfp"),t.wrap.attr("class","mfp-wrap").removeAttr("style"),t.bgOverlay.attr("class","mfp-bg"),t.container.attr("class","mfp-container"),!t.st.showCloseBtn||t.st.closeBtnInside&&!0!==t.currTemplate[t.currItem.type]||t.currTemplate.closeBtn&&t.currTemplate.closeBtn.detach(),t.st.autoFocusLast&&t._lastFocusedEl&&e(t._lastFocusedEl).focus(),t.currItem=null,t.content=null,t.currTemplate=null,t.prevHeight=0,h("AfterClose")},updateSize:function(e){if(t.isIOS){var r=document.documentElement.clientWidth/window.innerWidth,n=window.innerHeight*r;t.wrap.css("height",n),t.wH=n}else t.wH=e||c.height();t.fixedContentPos||t.wrap.css("height",t.wH),h("Resize")},updateItemHTML:function(){var r=t.items[t.index];t.contentContainer.detach(),t.content&&t.content.detach(),r.parsed||(r=t.parseEl(t.index));var n=r.type;if(h("BeforeChange",[t.currItem?t.currItem.type:"",n]),t.currItem=r,!t.currTemplate[n]){var i=!!t.st[n]&&t.st[n].markup;h("FirstMarkupParse",i),t.currTemplate[n]=!i||e(i)}o&&o!==r.type&&t.container.removeClass("mfp-"+o+"-holder");var s=t["get"+n.charAt(0).toUpperCase()+n.slice(1)](r,t.currTemplate[n]);t.appendContent(s,n),r.preloaded=!0,h("Change",r),o=r.type,t.container.prepend(t.contentContainer),h("AfterChange")},appendContent:function(e,r){t.content=e,e?t.st.showCloseBtn&&t.st.closeBtnInside&&!0===t.currTemplate[r]?t.content.find(".mfp-close").length||t.content.append(f()):t.content=e:t.content="",h("BeforeAppend"),t.container.addClass("mfp-"+r+"-holder"),t.contentContainer.append(t.content)},parseEl:function(r){var n,i=t.items[r];if(i.tagName?i={el:e(i)}:(n=i.type,i={data:i,src:i.src}),i.el){for(var o=t.types,s=0;s<o.length;s++)if(i.el.hasClass("mfp-"+o[s])){n=o[s];break}i.src=i.el.attr("data-mfp-src"),i.src||(i.src=i.el.attr("href"))}return i.type=n||t.st.type||"inline",i.index=r,i.parsed=!0,t.items[r]=i,h("ElementParse",i),t.items[r]},addGroup:function(e,r){var n=function(n){n.mfpEl=this,t._openClick(n,e,r)};r||(r={});var i="click.magnificPopup";r.mainEl=e,r.items?(r.isObj=!0,e.off(i).on(i,n)):(r.isObj=!1,r.delegate?e.off(i).on(i,r.delegate,n):(r.items=e,e.off(i).on(i,n)))},_openClick:function(r,n,i){var o=void 0!==i.midClick?i.midClick:e.magnificPopup.defaults.midClick;if(o||!(2===r.which||r.ctrlKey||r.metaKey||r.altKey||r.shiftKey)){var s=void 0!==i.disableOn?i.disableOn:e.magnificPopup.defaults.disableOn;if(s)if(e.isFunction(s)){if(!s.call(t))return!0}else if(c.width()<s)return!0;r.type&&(r.preventDefault(),t.isOpen&&r.stopPropagation()),i.el=e(r.mfpEl),i.delegate&&(i.items=n.find(i.delegate)),t.open(i)}},updateStatus:function(e,n){if(t.preloader){r!==e&&t.container.removeClass("mfp-s-"+r),n||"loading"!==e||(n=t.st.tLoading);var i={status:e,text:n};h("UpdateStatus",i),e=i.status,n=i.text,t.preloader.html(n),t.preloader.find("a").on("click",function(e){e.stopImmediatePropagation()}),t.container.addClass("mfp-s-"+e),r=e}},_checkIfClose:function(r){if(!e(r).hasClass("mfp-prevent-close")){var n=t.st.closeOnContentClick,i=t.st.closeOnBgClick;if(n&&i)return!0;if(!t.content||e(r).hasClass("mfp-close")||t.preloader&&r===t.preloader[0])return!0;if(r===t.content[0]||e.contains(t.content[0],r)){if(n)return!0}else if(i&&e.contains(document,r))return!0;return!1}},_addClassToMFP:function(e){t.bgOverlay.addClass(e),t.wrap.addClass(e)},_removeClassFromMFP:function(e){this.bgOverlay.removeClass(e),t.wrap.removeClass(e)},_hasScrollBar:function(e){return(t.isIE7?i.height():document.body.scrollHeight)>(e||c.height())},_setFocus:function(){(t.st.focus?t.content.find(t.st.focus).eq(0):t.wrap).focus()},_onFocusIn:function(r){if(r.target!==t.wrap[0]&&!e.contains(t.wrap[0],r.target))return t._setFocus(),!1},_parseMarkup:function(t,r,n){var i;n.data&&(r=e.extend(n.data,r)),h("MarkupParse",[t,r,n]),e.each(r,function(r,n){if(void 0===n||!1===n)return!0;if((i=r.split("_")).length>1){var o=t.find(".mfp-"+i[0]);if(o.length>0){var s=i[1];"replaceWith"===s?o[0]!==n[0]&&o.replaceWith(n):"img"===s?o.is("img")?o.attr("src",n):o.replaceWith(e("<img>").attr("src",n).attr("class",o.attr("class"))):o.attr(i[1],n)}}else t.find(".mfp-"+r).html(n)})},_getScrollbarSize:function(){if(void 0===t.scrollbarSize){var e=document.createElement("div");e.style.cssText="width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;",document.body.appendChild(e),t.scrollbarSize=e.offsetWidth-e.clientWidth,document.body.removeChild(e)}return t.scrollbarSize}},e.magnificPopup={instance:null,proto:u.prototype,modules:[],open:function(t,r){return m(),(t=t?e.extend(!0,{},t):{}).isObj=!0,t.index=r||0,this.instance.open(t)},close:function(){return e.magnificPopup.instance&&e.magnificPopup.instance.close()},registerModule:function(t,r){r.options&&(e.magnificPopup.defaults[t]=r.options),e.extend(this.proto,r.proto),this.modules.push(t)},defaults:{disableOn:0,key:null,midClick:!1,mainClass:"",preloader:!0,focus:"",closeOnContentClick:!1,closeOnBgClick:!0,closeBtnInside:!0,showCloseBtn:!0,enableEscapeKey:!0,modal:!1,alignTop:!1,removalDelay:0,prependTo:null,fixedContentPos:"auto",fixedBgPos:"auto",overflowY:"auto",closeMarkup:'<button title="%title%" type="button" class="mfp-close">&#215;</button>',tClose:"Close (Esc)",tLoading:"Loading...",autoFocusLast:!0}},e.fn.magnificPopup=function(r){m();var n=e(this);if("string"==typeof r)if("open"===r){var i,o=l?n.data("magnificPopup"):n[0].magnificPopup,s=parseInt(arguments[1],10)||0;o.items?i=o.items[s]:(i=n,o.delegate&&(i=i.find(o.delegate)),i=i.eq(s)),t._openClick({mfpEl:i},n,o)}else t.isOpen&&t[r].apply(t,Array.prototype.slice.call(arguments,1));else r=e.extend(!0,{},r),l?n.data("magnificPopup",r):n[0].magnificPopup=r,t.addGroup(n,r);return n};var g,v,b,y=function(){b&&(v.after(b.addClass(g)).detach(),b=null)};e.magnificPopup.registerModule("inline",{options:{hiddenClass:"hide",markup:"",tNotFound:"Content not found"},proto:{initInline:function(){t.types.push("inline"),p("Close.inline",function(){y()})},getInline:function(r,n){if(y(),r.src){var i=t.st.inline,o=e(r.src);if(o.length){var s=o[0].parentNode;s&&s.tagName&&(v||(g=i.hiddenClass,v=d(g),g="mfp-"+g),b=o.after(v).detach().removeClass(g)),t.updateStatus("ready")}else t.updateStatus("error",i.tNotFound),o=e("<div>");return r.inlineElement=o,o}return t.updateStatus("ready"),t._parseMarkup(n,{},r),n}}});var _,w,T,j=function(){_&&e(document.body).removeClass(_)},x=function(){j(),t.req&&t.req.abort()};e.magnificPopup.registerModule("ajax",{options:{settings:null,cursor:"mfp-ajax-cur",tError:'<a href="%url%">The content</a> could not be loaded.'},proto:{initAjax:function(){t.types.push("ajax"),_=t.st.ajax.cursor,p("Close.ajax",x),p("BeforeChange.ajax",x)},getAjax:function(r){_&&e(document.body).addClass(_),t.updateStatus("loading");var n=e.extend({url:r.src,success:function(n,i,o){var s={data:n,xhr:o};h("ParseAjax",s),t.appendContent(e(s.data),"ajax"),r.finished=!0,j(),t._setFocus(),setTimeout(function(){t.wrap.addClass("mfp-ready")},16),t.updateStatus("ready"),h("AjaxContentAdded")},error:function(){j(),r.finished=r.loadError=!0,t.updateStatus("error",t.st.ajax.tError.replace("%url%",r.src))}},t.st.ajax.settings);return t.req=e.ajax(n),""}}}),e.magnificPopup.registerModule("image",{options:{markup:'<div class="mfp-figure"><div class="mfp-close"></div><figure><div class="mfp-img"></div><figcaption><div class="mfp-bottom-bar"><div class="mfp-title"></div><div class="mfp-counter"></div></div></figcaption></figure></div>',cursor:"mfp-zoom-out-cur",titleSrc:"title",verticalFit:!0,tError:'<a href="%url%">The image</a> could not be loaded.'},proto:{initImage:function(){var r=t.st.image,n=".image";t.types.push("image"),p("Open"+n,function(){"image"===t.currItem.type&&r.cursor&&e(document.body).addClass(r.cursor)}),p("Close"+n,function(){r.cursor&&e(document.body).removeClass(r.cursor),c.off("resize.mfp")}),p("Resize"+n,t.resizeImage),t.isLowIE&&p("AfterChange",t.resizeImage)},resizeImage:function(){var e=t.currItem;if(e&&e.img&&t.st.image.verticalFit){var r=0;t.isLowIE&&(r=parseInt(e.img.css("padding-top"),10)+parseInt(e.img.css("padding-bottom"),10)),e.img.css("max-height",t.wH-r)}},_onImageHasSize:function(e){e.img&&(e.hasSize=!0,w&&clearInterval(w),e.isCheckingImgSize=!1,h("ImageHasSize",e),e.imgHidden&&(t.content&&t.content.removeClass("mfp-loading"),e.imgHidden=!1))},findImageSize:function(e){var r=0,n=e.img[0],i=function(o){w&&clearInterval(w),w=setInterval(function(){n.naturalWidth>0?t._onImageHasSize(e):(r>200&&clearInterval(w),3==++r?i(10):40===r?i(50):100===r&&i(500))},o)};i(1)},getImage:function(r,n){var i=0,o=function(){r&&(r.img[0].complete?(r.img.off(".mfploader"),r===t.currItem&&(t._onImageHasSize(r),t.updateStatus("ready")),r.hasSize=!0,r.loaded=!0,h("ImageLoadComplete")):++i<200?setTimeout(o,100):s())},s=function(){r&&(r.img.off(".mfploader"),r===t.currItem&&(t._onImageHasSize(r),t.updateStatus("error",a.tError.replace("%url%",r.src))),r.hasSize=!0,r.loaded=!0,r.loadError=!0)},a=t.st.image,u=n.find(".mfp-img");if(u.length){var l=document.createElement("img");l.className="mfp-img",r.el&&r.el.find("img").length&&(l.alt=r.el.find("img").attr("alt")),r.img=e(l).on("load.mfploader",o).on("error.mfploader",s),l.src=r.src,u.is("img")&&(r.img=r.img.clone()),(l=r.img[0]).naturalWidth>0?r.hasSize=!0:l.width||(r.hasSize=!1)}return t._parseMarkup(n,{title:function(r){if(r.data&&void 0!==r.data.title)return r.data.title;var n=t.st.image.titleSrc;if(n){if(e.isFunction(n))return n.call(t,r);if(r.el)return r.el.attr(n)||""}return""}(r),img_replaceWith:r.img},r),t.resizeImage(),r.hasSize?(w&&clearInterval(w),r.loadError?(n.addClass("mfp-loading"),t.updateStatus("error",a.tError.replace("%url%",r.src))):(n.removeClass("mfp-loading"),t.updateStatus("ready")),n):(t.updateStatus("loading"),r.loading=!0,r.hasSize||(r.imgHidden=!0,n.addClass("mfp-loading"),t.findImageSize(r)),n)}}}),e.magnificPopup.registerModule("zoom",{options:{enabled:!1,easing:"ease-in-out",duration:300,opener:function(e){return e.is("img")?e:e.find("img")}},proto:{initZoom:function(){var e,r=t.st.zoom,n=".zoom";if(r.enabled&&t.supportsTransition){var i,o,s=r.duration,a=function(e){var t=e.clone().removeAttr("style").removeAttr("class").addClass("mfp-animated-image"),n="all "+r.duration/1e3+"s "+r.easing,i={position:"fixed",zIndex:9999,left:0,top:0,"-webkit-backface-visibility":"hidden"},o="transition";return i["-webkit-"+o]=i["-moz-"+o]=i["-o-"+o]=i[o]=n,t.css(i),t},u=function(){t.content.css("visibility","visible")};p("BuildControls"+n,function(){if(t._allowZoom()){if(clearTimeout(i),t.content.css("visibility","hidden"),!(e=t._getItemToZoom()))return void u();(o=a(e)).css(t._getOffset()),t.wrap.append(o),i=setTimeout(function(){o.css(t._getOffset(!0)),i=setTimeout(function(){u(),setTimeout(function(){o.remove(),e=o=null,h("ZoomAnimationEnded")},16)},s)},16)}}),p("BeforeClose"+n,function(){if(t._allowZoom()){if(clearTimeout(i),t.st.removalDelay=s,!e){if(!(e=t._getItemToZoom()))return;o=a(e)}o.css(t._getOffset(!0)),t.wrap.append(o),t.content.css("visibility","hidden"),setTimeout(function(){o.css(t._getOffset())},16)}}),p("Close"+n,function(){t._allowZoom()&&(u(),o&&o.remove(),e=null)})}},_allowZoom:function(){return"image"===t.currItem.type},_getItemToZoom:function(){return!!t.currItem.hasSize&&t.currItem.img},_getOffset:function(r){var n,i=(n=r?t.currItem.img:t.st.zoom.opener(t.currItem.el||t.currItem)).offset(),o=parseInt(n.css("padding-top"),10),s=parseInt(n.css("padding-bottom"),10);i.top-=e(window).scrollTop()-o;var a={width:n.width(),height:(l?n.innerHeight():n[0].offsetHeight)-s-o};return void 0===T&&(T=void 0!==document.createElement("p").style.MozTransform),T?a["-moz-transform"]=a.transform="translate("+i.left+"px,"+i.top+"px)":(a.left=i.left,a.top=i.top),a}}});var E=function(e){if(t.currTemplate.iframe){var r=t.currTemplate.iframe.find("iframe");r.length&&(e||(r[0].src="//about:blank"),t.isIE8&&r.css("display",e?"block":"none"))}};e.magnificPopup.registerModule("iframe",{options:{markup:'<div class="mfp-iframe-scaler"><div class="mfp-close"></div><iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe></div>',srcAction:"iframe_src",patterns:{youtube:{index:"youtube.com",id:"v=",src:"//www.youtube.com/embed/%id%?autoplay=1"},vimeo:{index:"vimeo.com/",id:"/",src:"//player.vimeo.com/video/%id%?autoplay=1"},gmaps:{index:"//maps.google.",src:"%id%&output=embed"}}},proto:{initIframe:function(){t.types.push("iframe"),p("BeforeChange",function(e,t,r){t!==r&&("iframe"===t?E():"iframe"===r&&E(!0))}),p("Close.iframe",function(){E()})},getIframe:function(r,n){var i=r.src,o=t.st.iframe;e.each(o.patterns,function(){if(i.indexOf(this.index)>-1)return this.id&&(i="string"==typeof this.id?i.substr(i.lastIndexOf(this.id)+this.id.length,i.length):this.id.call(this,i)),i=this.src.replace("%id%",i),!1});var s={};return o.srcAction&&(s[o.srcAction]=i),t._parseMarkup(n,s,r),t.updateStatus("ready"),n}}});var D=function(e){var r=t.items.length;return e>r-1?e-r:e<0?r+e:e},C=function(e,t,r){return e.replace(/%curr%/gi,t+1).replace(/%total%/gi,r)};e.magnificPopup.registerModule("gallery",{options:{enabled:!1,arrowMarkup:'<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',preload:[0,2],navigateByImgClick:!0,arrows:!0,tPrev:"Previous (Left arrow key)",tNext:"Next (Right arrow key)",tCounter:"%curr% of %total%"},proto:{initGallery:function(){var r=t.st.gallery,n=".mfp-gallery";if(t.direction=!0,!r||!r.enabled)return!1;s+=" mfp-gallery",p("Open"+n,function(){r.navigateByImgClick&&t.wrap.on("click"+n,".mfp-img",function(){if(t.items.length>1)return t.next(),!1}),i.on("keydown"+n,function(e){37===e.keyCode?t.prev():39===e.keyCode&&t.next()})}),p("UpdateStatus"+n,function(e,r){r.text&&(r.text=C(r.text,t.currItem.index,t.items.length))}),p("MarkupParse"+n,function(e,n,i,o){var s=t.items.length;i.counter=s>1?C(r.tCounter,o.index,s):""}),p("BuildControls"+n,function(){if(t.items.length>1&&r.arrows&&!t.arrowLeft){var n=r.arrowMarkup,i=t.arrowLeft=e(n.replace(/%title%/gi,r.tPrev).replace(/%dir%/gi,"left")).addClass("mfp-prevent-close"),o=t.arrowRight=e(n.replace(/%title%/gi,r.tNext).replace(/%dir%/gi,"right")).addClass("mfp-prevent-close");i.click(function(){t.prev()}),o.click(function(){t.next()}),t.container.append(i.add(o))}}),p("Change"+n,function(){t._preloadTimeout&&clearTimeout(t._preloadTimeout),t._preloadTimeout=setTimeout(function(){t.preloadNearbyImages(),t._preloadTimeout=null},16)}),p("Close"+n,function(){i.off(n),t.wrap.off("click"+n),t.arrowRight=t.arrowLeft=null})},next:function(){t.direction=!0,t.index=D(t.index+1),t.updateItemHTML()},prev:function(){t.direction=!1,t.index=D(t.index-1),t.updateItemHTML()},goTo:function(e){t.direction=e>=t.index,t.index=e,t.updateItemHTML()},preloadNearbyImages:function(){var e,r=t.st.gallery.preload,n=Math.min(r[0],t.items.length),i=Math.min(r[1],t.items.length);for(e=1;e<=(t.direction?i:n);e++)t._preloadItem(t.index+e);for(e=1;e<=(t.direction?n:i);e++)t._preloadItem(t.index-e)},_preloadItem:function(r){if(r=D(r),!t.items[r].preloaded){var n=t.items[r];n.parsed||(n=t.parseEl(r)),h("LazyLoad",n),"image"===n.type&&(n.img=e('<img class="mfp-img" />').on("load.mfploader",function(){n.hasSize=!0}).on("error.mfploader",function(){n.hasSize=!0,n.loadError=!0,h("LazyLoadError",n)}).attr("src",n.src)),n.preloaded=!0}}}}),e.magnificPopup.registerModule("retina",{options:{replaceSrc:function(e){return e.src.replace(/\.\w+$/,function(e){return"@2x"+e})},ratio:1},proto:{initRetina:function(){if(window.devicePixelRatio>1){var e=t.st.retina,r=e.ratio;(r=isNaN(r)?r():r)>1&&(p("ImageHasSize.retina",function(e,t){t.img.css({"max-width":t.img[0].naturalWidth/r,width:"100%"})}),p("ElementParse.retina",function(t,n){n.src=e.replaceSrc(n,r)}))}}}}),m()})?i.apply(t,o):i)||(e.exports=s)}).call(this,r(0))},function(e,t,r){var n;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
!function(t,r){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?r(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return r(e)}:r(t)}("undefined"!=typeof window?window:this,function(r,i){"use strict";var o=[],s=r.document,a=Object.getPrototypeOf,u=o.slice,l=o.concat,c=o.push,p=o.indexOf,d={},h=d.toString,f=d.hasOwnProperty,m=f.toString,g=m.call(Object),v={},b=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},y=function(e){return null!=e&&e===e.window},_={type:!0,src:!0,noModule:!0};function w(e,t,r){var n,i=(t=t||s).createElement("script");if(i.text=e,r)for(n in _)r[n]&&(i[n]=r[n]);t.head.appendChild(i).parentNode.removeChild(i)}function T(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[h.call(e)]||"object":typeof e}var j=function(e,t){return new j.fn.init(e,t)},x=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function E(e){var t=!!e&&"length"in e&&e.length,r=T(e);return!b(e)&&!y(e)&&("array"===r||0===t||"number"==typeof t&&t>0&&t-1 in e)}j.fn=j.prototype={jquery:"3.3.1",constructor:j,length:0,toArray:function(){return u.call(this)},get:function(e){return null==e?u.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=j.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return j.each(this,e)},map:function(e){return this.pushStack(j.map(this,function(t,r){return e.call(t,r,t)}))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,r=+e+(e<0?t:0);return this.pushStack(r>=0&&r<t?[this[r]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},j.extend=j.fn.extend=function(){var e,t,r,n,i,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[a]||{},a++),"object"==typeof s||b(s)||(s={}),a===u&&(s=this,a--);a<u;a++)if(null!=(e=arguments[a]))for(t in e)r=s[t],s!==(n=e[t])&&(l&&n&&(j.isPlainObject(n)||(i=Array.isArray(n)))?(i?(i=!1,o=r&&Array.isArray(r)?r:[]):o=r&&j.isPlainObject(r)?r:{},s[t]=j.extend(l,o,n)):void 0!==n&&(s[t]=n));return s},j.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,r;return!(!e||"[object Object]"!==h.call(e))&&(!(t=a(e))||"function"==typeof(r=f.call(t,"constructor")&&t.constructor)&&m.call(r)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){w(e)},each:function(e,t){var r,n=0;if(E(e))for(r=e.length;n<r&&!1!==t.call(e[n],n,e[n]);n++);else for(n in e)if(!1===t.call(e[n],n,e[n]))break;return e},trim:function(e){return null==e?"":(e+"").replace(x,"")},makeArray:function(e,t){var r=t||[];return null!=e&&(E(Object(e))?j.merge(r,"string"==typeof e?[e]:e):c.call(r,e)),r},inArray:function(e,t,r){return null==t?-1:p.call(t,e,r)},merge:function(e,t){for(var r=+t.length,n=0,i=e.length;n<r;n++)e[i++]=t[n];return e.length=i,e},grep:function(e,t,r){for(var n=[],i=0,o=e.length,s=!r;i<o;i++)!t(e[i],i)!==s&&n.push(e[i]);return n},map:function(e,t,r){var n,i,o=0,s=[];if(E(e))for(n=e.length;o<n;o++)null!=(i=t(e[o],o,r))&&s.push(i);else for(o in e)null!=(i=t(e[o],o,r))&&s.push(i);return l.apply([],s)},guid:1,support:v}),"function"==typeof Symbol&&(j.fn[Symbol.iterator]=o[Symbol.iterator]),j.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){d["[object "+t+"]"]=t.toLowerCase()});var D=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(e){var t,r,n,i,o,s,a,u,l,c,p,d,h,f,m,g,v,b,y,_="sizzle"+1*new Date,w=e.document,T=0,j=0,x=se(),E=se(),D=se(),C=function(e,t){return e===t&&(p=!0),0},N={}.hasOwnProperty,S=[],O=S.pop,A=S.push,k=S.push,I=S.slice,M=function(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",P="[\\x20\\t\\r\\n\\f]",H="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",V="\\["+P+"*("+H+")(?:"+P+"*([*^$|!~]?=)"+P+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+P+"*\\]",R=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+V+")*)|.*)\\)|)",B=new RegExp(P+"+","g"),F=new RegExp("^"+P+"+|((?:^|[^\\\\])(?:\\\\.)*)"+P+"+$","g"),z=new RegExp("^"+P+"*,"+P+"*"),W=new RegExp("^"+P+"*([>+~]|"+P+")"+P+"*"),U=new RegExp("="+P+"*([^\\]'\"]*?)"+P+"*\\]","g"),q=new RegExp(R),G=new RegExp("^"+H+"$"),Z={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+V),PSEUDO:new RegExp("^"+R),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+P+"*(even|odd|(([+-]|)(\\d*)n|)"+P+"*(?:([+-]|)"+P+"*(\\d+)|))"+P+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+P+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+P+"*((?:-\\d)?\\d*)"+P+"*\\)|)(?=[^-]|$)","i")},$=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,X=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,K=new RegExp("\\\\([\\da-f]{1,6}"+P+"?|("+P+")|.)","ig"),ee=function(e,t,r){var n="0x"+t-65536;return n!=n||r?t:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ne=function(){d()},ie=be(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{k.apply(S=I.call(w.childNodes),w.childNodes),S[w.childNodes.length].nodeType}catch(e){k={apply:S.length?function(e,t){A.apply(e,I.call(t))}:function(e,t){for(var r=e.length,n=0;e[r++]=t[n++];);e.length=r-1}}}function oe(e,t,n,i){var o,a,l,c,p,f,v,b=t&&t.ownerDocument,T=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==T&&9!==T&&11!==T)return n;if(!i&&((t?t.ownerDocument||t:w)!==h&&d(t),t=t||h,m)){if(11!==T&&(p=X.exec(e)))if(o=p[1]){if(9===T){if(!(l=t.getElementById(o)))return n;if(l.id===o)return n.push(l),n}else if(b&&(l=b.getElementById(o))&&y(t,l)&&l.id===o)return n.push(l),n}else{if(p[2])return k.apply(n,t.getElementsByTagName(e)),n;if((o=p[3])&&r.getElementsByClassName&&t.getElementsByClassName)return k.apply(n,t.getElementsByClassName(o)),n}if(r.qsa&&!D[e+" "]&&(!g||!g.test(e))){if(1!==T)b=t,v=e;else if("object"!==t.nodeName.toLowerCase()){for((c=t.getAttribute("id"))?c=c.replace(te,re):t.setAttribute("id",c=_),a=(f=s(e)).length;a--;)f[a]="#"+c+" "+ve(f[a]);v=f.join(","),b=J.test(e)&&me(t.parentNode)||t}if(v)try{return k.apply(n,b.querySelectorAll(v)),n}catch(e){}finally{c===_&&t.removeAttribute("id")}}}return u(e.replace(F,"$1"),t,n,i)}function se(){var e=[];return function t(r,i){return e.push(r+" ")>n.cacheLength&&delete t[e.shift()],t[r+" "]=i}}function ae(e){return e[_]=!0,e}function ue(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function le(e,t){for(var r=e.split("|"),i=r.length;i--;)n.attrHandle[r[i]]=t}function ce(e,t){var r=t&&e,n=r&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(r)for(;r=r.nextSibling;)if(r===t)return-1;return e?1:-1}function pe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function de(e){return function(t){var r=t.nodeName.toLowerCase();return("input"===r||"button"===r)&&t.type===e}}function he(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ie(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function fe(e){return ae(function(t){return t=+t,ae(function(r,n){for(var i,o=e([],r.length,t),s=o.length;s--;)r[i=o[s]]&&(r[i]=!(n[i]=r[i]))})})}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in r=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},d=oe.setDocument=function(e){var t,i,s=e?e.ownerDocument||e:w;return s!==h&&9===s.nodeType&&s.documentElement?(f=(h=s).documentElement,m=!o(h),w!==h&&(i=h.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",ne,!1):i.attachEvent&&i.attachEvent("onunload",ne)),r.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),r.getElementsByTagName=ue(function(e){return e.appendChild(h.createComment("")),!e.getElementsByTagName("*").length}),r.getElementsByClassName=Q.test(h.getElementsByClassName),r.getById=ue(function(e){return f.appendChild(e).id=_,!h.getElementsByName||!h.getElementsByName(_).length}),r.getById?(n.filter.ID=function(e){var t=e.replace(K,ee);return function(e){return e.getAttribute("id")===t}},n.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var r=t.getElementById(e);return r?[r]:[]}}):(n.filter.ID=function(e){var t=e.replace(K,ee);return function(e){var r=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return r&&r.value===t}},n.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var r,n,i,o=t.getElementById(e);if(o){if((r=o.getAttributeNode("id"))&&r.value===e)return[o];for(i=t.getElementsByName(e),n=0;o=i[n++];)if((r=o.getAttributeNode("id"))&&r.value===e)return[o]}return[]}}),n.find.TAG=r.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):r.qsa?t.querySelectorAll(e):void 0}:function(e,t){var r,n=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;r=o[i++];)1===r.nodeType&&n.push(r);return n}return o},n.find.CLASS=r.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(r.qsa=Q.test(h.querySelectorAll))&&(ue(function(e){f.appendChild(e).innerHTML="<a id='"+_+"'></a><select id='"+_+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+P+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+P+"*(?:value|"+L+")"),e.querySelectorAll("[id~="+_+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+_+"+*").length||g.push(".#.+[+~]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+P+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),f.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(r.matchesSelector=Q.test(b=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&ue(function(e){r.disconnectedMatch=b.call(e,"*"),b.call(e,"[s!='']:x"),v.push("!=",R)}),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=Q.test(f.compareDocumentPosition),y=t||Q.test(f.contains)?function(e,t){var r=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(r.contains?r.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},C=t?function(e,t){if(e===t)return p=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!r.sortDetached&&t.compareDocumentPosition(e)===n?e===h||e.ownerDocument===w&&y(w,e)?-1:t===h||t.ownerDocument===w&&y(w,t)?1:c?M(c,e)-M(c,t):0:4&n?-1:1)}:function(e,t){if(e===t)return p=!0,0;var r,n=0,i=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!i||!o)return e===h?-1:t===h?1:i?-1:o?1:c?M(c,e)-M(c,t):0;if(i===o)return ce(e,t);for(r=e;r=r.parentNode;)s.unshift(r);for(r=t;r=r.parentNode;)a.unshift(r);for(;s[n]===a[n];)n++;return n?ce(s[n],a[n]):s[n]===w?-1:a[n]===w?1:0},h):h},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==h&&d(e),t=t.replace(U,"='$1']"),r.matchesSelector&&m&&!D[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var n=b.call(e,t);if(n||r.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){}return oe(t,h,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==h&&d(e),y(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==h&&d(e);var i=n.attrHandle[t.toLowerCase()],o=i&&N.call(n.attrHandle,t.toLowerCase())?i(e,t,!m):void 0;return void 0!==o?o:r.attributes||!m?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,re)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,n=[],i=0,o=0;if(p=!r.detectDuplicates,c=!r.sortStable&&e.slice(0),e.sort(C),p){for(;t=e[o++];)t===e[o]&&(i=n.push(o));for(;i--;)e.splice(n[i],1)}return c=null,e},i=oe.getText=function(e){var t,r="",n=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)r+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[n++];)r+=i(t);return r},(n=oe.selectors={cacheLength:50,createPseudo:ae,match:Z,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(K,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(K,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,r=!e[6]&&e[2];return Z.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":r&&q.test(r)&&(t=s(r,!0))&&(t=r.indexOf(")",r.length-t)-r.length)&&(e[0]=e[0].slice(0,t),e[2]=r.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(K,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=x[e+" "];return t||(t=new RegExp("(^|"+P+")"+e+"("+P+"|$)"))&&x(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,r){return function(n){var i=oe.attr(n,e);return null==i?"!="===t:!t||(i+="","="===t?i===r:"!="===t?i!==r:"^="===t?r&&0===i.indexOf(r):"*="===t?r&&i.indexOf(r)>-1:"$="===t?r&&i.slice(-r.length)===r:"~="===t?(" "+i.replace(B," ")+" ").indexOf(r)>-1:"|="===t&&(i===r||i.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,r,n,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===n&&0===i?function(e){return!!e.parentNode}:function(t,r,u){var l,c,p,d,h,f,m=o!==s?"nextSibling":"previousSibling",g=t.parentNode,v=a&&t.nodeName.toLowerCase(),b=!u&&!a,y=!1;if(g){if(o){for(;m;){for(d=t;d=d[m];)if(a?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;f=m="only"===e&&!f&&"nextSibling"}return!0}if(f=[s?g.firstChild:g.lastChild],s&&b){for(y=(h=(l=(c=(p=(d=g)[_]||(d[_]={}))[d.uniqueID]||(p[d.uniqueID]={}))[e]||[])[0]===T&&l[1])&&l[2],d=h&&g.childNodes[h];d=++h&&d&&d[m]||(y=h=0)||f.pop();)if(1===d.nodeType&&++y&&d===t){c[e]=[T,h,y];break}}else if(b&&(y=h=(l=(c=(p=(d=t)[_]||(d[_]={}))[d.uniqueID]||(p[d.uniqueID]={}))[e]||[])[0]===T&&l[1]),!1===y)for(;(d=++h&&d&&d[m]||(y=h=0)||f.pop())&&((a?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++y||(b&&((c=(p=d[_]||(d[_]={}))[d.uniqueID]||(p[d.uniqueID]={}))[e]=[T,y]),d!==t)););return(y-=i)===n||y%n==0&&y/n>=0}}},PSEUDO:function(e,t){var r,i=n.pseudos[e]||n.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return i[_]?i(t):i.length>1?(r=[e,e,"",t],n.setFilters.hasOwnProperty(e.toLowerCase())?ae(function(e,r){for(var n,o=i(e,t),s=o.length;s--;)e[n=M(e,o[s])]=!(r[n]=o[s])}):function(e){return i(e,0,r)}):i}},pseudos:{not:ae(function(e){var t=[],r=[],n=a(e.replace(F,"$1"));return n[_]?ae(function(e,t,r,i){for(var o,s=n(e,null,i,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,i,o){return t[0]=e,n(t,null,o,r),t[0]=null,!r.pop()}}),has:ae(function(e){return function(t){return oe(e,t).length>0}}),contains:ae(function(e){return e=e.replace(K,ee),function(t){return(t.textContent||t.innerText||i(t)).indexOf(e)>-1}}),lang:ae(function(e){return G.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(K,ee).toLowerCase(),function(t){var r;do{if(r=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(r=r.toLowerCase())===e||0===r.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var r=e.location&&e.location.hash;return r&&r.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:he(!1),disabled:he(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!n.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return $.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:fe(function(){return[0]}),last:fe(function(e,t){return[t-1]}),eq:fe(function(e,t,r){return[r<0?r+t:r]}),even:fe(function(e,t){for(var r=0;r<t;r+=2)e.push(r);return e}),odd:fe(function(e,t){for(var r=1;r<t;r+=2)e.push(r);return e}),lt:fe(function(e,t,r){for(var n=r<0?r+t:r;--n>=0;)e.push(n);return e}),gt:fe(function(e,t,r){for(var n=r<0?r+t:r;++n<t;)e.push(n);return e})}}).pseudos.nth=n.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})n.pseudos[t]=pe(t);for(t in{submit:!0,reset:!0})n.pseudos[t]=de(t);function ge(){}function ve(e){for(var t=0,r=e.length,n="";t<r;t++)n+=e[t].value;return n}function be(e,t,r){var n=t.dir,i=t.next,o=i||n,s=r&&"parentNode"===o,a=j++;return t.first?function(t,r,i){for(;t=t[n];)if(1===t.nodeType||s)return e(t,r,i);return!1}:function(t,r,u){var l,c,p,d=[T,a];if(u){for(;t=t[n];)if((1===t.nodeType||s)&&e(t,r,u))return!0}else for(;t=t[n];)if(1===t.nodeType||s)if(c=(p=t[_]||(t[_]={}))[t.uniqueID]||(p[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[n]||t;else{if((l=c[o])&&l[0]===T&&l[1]===a)return d[2]=l[2];if(c[o]=d,d[2]=e(t,r,u))return!0}return!1}}function ye(e){return e.length>1?function(t,r,n){for(var i=e.length;i--;)if(!e[i](t,r,n))return!1;return!0}:e[0]}function _e(e,t,r,n,i){for(var o,s=[],a=0,u=e.length,l=null!=t;a<u;a++)(o=e[a])&&(r&&!r(o,n,i)||(s.push(o),l&&t.push(a)));return s}function we(e,t,r,n,i,o){return n&&!n[_]&&(n=we(n)),i&&!i[_]&&(i=we(i,o)),ae(function(o,s,a,u){var l,c,p,d=[],h=[],f=s.length,m=o||function(e,t,r){for(var n=0,i=t.length;n<i;n++)oe(e,t[n],r);return r}(t||"*",a.nodeType?[a]:a,[]),g=!e||!o&&t?m:_e(m,d,e,a,u),v=r?i||(o?e:f||n)?[]:s:g;if(r&&r(g,v,a,u),n)for(l=_e(v,h),n(l,[],a,u),c=l.length;c--;)(p=l[c])&&(v[h[c]]=!(g[h[c]]=p));if(o){if(i||e){if(i){for(l=[],c=v.length;c--;)(p=v[c])&&l.push(g[c]=p);i(null,v=[],l,u)}for(c=v.length;c--;)(p=v[c])&&(l=i?M(o,p):d[c])>-1&&(o[l]=!(s[l]=p))}}else v=_e(v===s?v.splice(f,v.length):v),i?i(null,s,v,u):k.apply(s,v)})}function Te(e){for(var t,r,i,o=e.length,s=n.relative[e[0].type],a=s||n.relative[" "],u=s?1:0,c=be(function(e){return e===t},a,!0),p=be(function(e){return M(t,e)>-1},a,!0),d=[function(e,r,n){var i=!s&&(n||r!==l)||((t=r).nodeType?c(e,r,n):p(e,r,n));return t=null,i}];u<o;u++)if(r=n.relative[e[u].type])d=[be(ye(d),r)];else{if((r=n.filter[e[u].type].apply(null,e[u].matches))[_]){for(i=++u;i<o&&!n.relative[e[i].type];i++);return we(u>1&&ye(d),u>1&&ve(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(F,"$1"),r,u<i&&Te(e.slice(u,i)),i<o&&Te(e=e.slice(i)),i<o&&ve(e))}d.push(r)}return ye(d)}return ge.prototype=n.filters=n.pseudos,n.setFilters=new ge,s=oe.tokenize=function(e,t){var r,i,o,s,a,u,l,c=E[e+" "];if(c)return t?0:c.slice(0);for(a=e,u=[],l=n.preFilter;a;){for(s in r&&!(i=z.exec(a))||(i&&(a=a.slice(i[0].length)||a),u.push(o=[])),r=!1,(i=W.exec(a))&&(r=i.shift(),o.push({value:r,type:i[0].replace(F," ")}),a=a.slice(r.length)),n.filter)!(i=Z[s].exec(a))||l[s]&&!(i=l[s](i))||(r=i.shift(),o.push({value:r,type:s,matches:i}),a=a.slice(r.length));if(!r)break}return t?a.length:a?oe.error(e):E(e,u).slice(0)},a=oe.compile=function(e,t){var r,i=[],o=[],a=D[e+" "];if(!a){for(t||(t=s(e)),r=t.length;r--;)(a=Te(t[r]))[_]?i.push(a):o.push(a);(a=D(e,function(e,t){var r=t.length>0,i=e.length>0,o=function(o,s,a,u,c){var p,f,g,v=0,b="0",y=o&&[],_=[],w=l,j=o||i&&n.find.TAG("*",c),x=T+=null==w?1:Math.random()||.1,E=j.length;for(c&&(l=s===h||s||c);b!==E&&null!=(p=j[b]);b++){if(i&&p){for(f=0,s||p.ownerDocument===h||(d(p),a=!m);g=e[f++];)if(g(p,s||h,a)){u.push(p);break}c&&(T=x)}r&&((p=!g&&p)&&v--,o&&y.push(p))}if(v+=b,r&&b!==v){for(f=0;g=t[f++];)g(y,_,s,a);if(o){if(v>0)for(;b--;)y[b]||_[b]||(_[b]=O.call(u));_=_e(_)}k.apply(u,_),c&&!o&&_.length>0&&v+t.length>1&&oe.uniqueSort(u)}return c&&(T=x,l=w),y};return r?ae(o):o}(o,i))).selector=e}return a},u=oe.select=function(e,t,r,i){var o,u,l,c,p,d="function"==typeof e&&e,h=!i&&s(e=d.selector||e);if(r=r||[],1===h.length){if((u=h[0]=h[0].slice(0)).length>2&&"ID"===(l=u[0]).type&&9===t.nodeType&&m&&n.relative[u[1].type]){if(!(t=(n.find.ID(l.matches[0].replace(K,ee),t)||[])[0]))return r;d&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(o=Z.needsContext.test(e)?0:u.length;o--&&(l=u[o],!n.relative[c=l.type]);)if((p=n.find[c])&&(i=p(l.matches[0].replace(K,ee),J.test(u[0].type)&&me(t.parentNode)||t))){if(u.splice(o,1),!(e=i.length&&ve(u)))return k.apply(r,i),r;break}}return(d||a(e,h))(i,t,!m,r,!t||J.test(e)&&me(t.parentNode)||t),r},r.sortStable=_.split("").sort(C).join("")===_,r.detectDuplicates=!!p,d(),r.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(h.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||le("type|href|height|width",function(e,t,r){if(!r)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),r.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||le("value",function(e,t,r){if(!r&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||le(L,function(e,t,r){var n;if(!r)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),oe}(r);j.find=D,j.expr=D.selectors,j.expr[":"]=j.expr.pseudos,j.uniqueSort=j.unique=D.uniqueSort,j.text=D.getText,j.isXMLDoc=D.isXML,j.contains=D.contains,j.escapeSelector=D.escape;var C=function(e,t,r){for(var n=[],i=void 0!==r;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&j(e).is(r))break;n.push(e)}return n},N=function(e,t){for(var r=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&r.push(e);return r},S=j.expr.match.needsContext;function O(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function k(e,t,r){return b(t)?j.grep(e,function(e,n){return!!t.call(e,n,e)!==r}):t.nodeType?j.grep(e,function(e){return e===t!==r}):"string"!=typeof t?j.grep(e,function(e){return p.call(t,e)>-1!==r}):j.filter(t,e,r)}j.filter=function(e,t,r){var n=t[0];return r&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?j.find.matchesSelector(n,e)?[n]:[]:j.find.matches(e,j.grep(t,function(e){return 1===e.nodeType}))},j.fn.extend({find:function(e){var t,r,n=this.length,i=this;if("string"!=typeof e)return this.pushStack(j(e).filter(function(){for(t=0;t<n;t++)if(j.contains(i[t],this))return!0}));for(r=this.pushStack([]),t=0;t<n;t++)j.find(e,i[t],r);return n>1?j.uniqueSort(r):r},filter:function(e){return this.pushStack(k(this,e||[],!1))},not:function(e){return this.pushStack(k(this,e||[],!0))},is:function(e){return!!k(this,"string"==typeof e&&S.test(e)?j(e):e||[],!1).length}});var I,M=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(j.fn.init=function(e,t,r){var n,i;if(!e)return this;if(r=r||I,"string"==typeof e){if(!(n="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:M.exec(e))||!n[1]&&t)return!t||t.jquery?(t||r).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof j?t[0]:t,j.merge(this,j.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:s,!0)),A.test(n[1])&&j.isPlainObject(t))for(n in t)b(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return(i=s.getElementById(n[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==r.ready?r.ready(e):e(j):j.makeArray(e,this)}).prototype=j.fn,I=j(s);var L=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function H(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}j.fn.extend({has:function(e){var t=j(e,this),r=t.length;return this.filter(function(){for(var e=0;e<r;e++)if(j.contains(this,t[e]))return!0})},closest:function(e,t){var r,n=0,i=this.length,o=[],s="string"!=typeof e&&j(e);if(!S.test(e))for(;n<i;n++)for(r=this[n];r&&r!==t;r=r.parentNode)if(r.nodeType<11&&(s?s.index(r)>-1:1===r.nodeType&&j.find.matchesSelector(r,e))){o.push(r);break}return this.pushStack(o.length>1?j.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?p.call(j(e),this[0]):p.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(j.uniqueSort(j.merge(this.get(),j(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),j.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return C(e,"parentNode")},parentsUntil:function(e,t,r){return C(e,"parentNode",r)},next:function(e){return H(e,"nextSibling")},prev:function(e){return H(e,"previousSibling")},nextAll:function(e){return C(e,"nextSibling")},prevAll:function(e){return C(e,"previousSibling")},nextUntil:function(e,t,r){return C(e,"nextSibling",r)},prevUntil:function(e,t,r){return C(e,"previousSibling",r)},siblings:function(e){return N((e.parentNode||{}).firstChild,e)},children:function(e){return N(e.firstChild)},contents:function(e){return O(e,"iframe")?e.contentDocument:(O(e,"template")&&(e=e.content||e),j.merge([],e.childNodes))}},function(e,t){j.fn[e]=function(r,n){var i=j.map(this,t,r);return"Until"!==e.slice(-5)&&(n=r),n&&"string"==typeof n&&(i=j.filter(n,i)),this.length>1&&(P[e]||j.uniqueSort(i),L.test(e)&&i.reverse()),this.pushStack(i)}});var V=/[^\x20\t\r\n\f]+/g;function R(e){return e}function B(e){throw e}function F(e,t,r,n){var i;try{e&&b(i=e.promise)?i.call(e).done(t).fail(r):e&&b(i=e.then)?i.call(e,t,r):t.apply(void 0,[e].slice(n))}catch(e){r.apply(void 0,[e])}}j.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return j.each(e.match(V)||[],function(e,r){t[r]=!0}),t}(e):j.extend({},e);var t,r,n,i,o=[],s=[],a=-1,u=function(){for(i=i||e.once,n=t=!0;s.length;a=-1)for(r=s.shift();++a<o.length;)!1===o[a].apply(r[0],r[1])&&e.stopOnFalse&&(a=o.length,r=!1);e.memory||(r=!1),t=!1,i&&(o=r?[]:"")},l={add:function(){return o&&(r&&!t&&(a=o.length-1,s.push(r)),function t(r){j.each(r,function(r,n){b(n)?e.unique&&l.has(n)||o.push(n):n&&n.length&&"string"!==T(n)&&t(n)})}(arguments),r&&!t&&u()),this},remove:function(){return j.each(arguments,function(e,t){for(var r;(r=j.inArray(t,o,r))>-1;)o.splice(r,1),r<=a&&a--}),this},has:function(e){return e?j.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=s=[],o=r="",this},disabled:function(){return!o},lock:function(){return i=s=[],r||t||(o=r=""),this},locked:function(){return!!i},fireWith:function(e,r){return i||(r=[e,(r=r||[]).slice?r.slice():r],s.push(r),t||u()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!n}};return l},j.extend({Deferred:function(e){var t=[["notify","progress",j.Callbacks("memory"),j.Callbacks("memory"),2],["resolve","done",j.Callbacks("once memory"),j.Callbacks("once memory"),0,"resolved"],["reject","fail",j.Callbacks("once memory"),j.Callbacks("once memory"),1,"rejected"]],n="pending",i={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return j.Deferred(function(r){j.each(t,function(t,n){var i=b(e[n[4]])&&e[n[4]];o[n[1]](function(){var e=i&&i.apply(this,arguments);e&&b(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[n[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(e,n,i){var o=0;function s(e,t,n,i){return function(){var a=this,u=arguments,l=function(){var r,l;if(!(e<o)){if((r=n.apply(a,u))===t.promise())throw new TypeError("Thenable self-resolution");l=r&&("object"==typeof r||"function"==typeof r)&&r.then,b(l)?i?l.call(r,s(o,t,R,i),s(o,t,B,i)):(o++,l.call(r,s(o,t,R,i),s(o,t,B,i),s(o,t,R,t.notifyWith))):(n!==R&&(a=void 0,u=[r]),(i||t.resolveWith)(a,u))}},c=i?l:function(){try{l()}catch(r){j.Deferred.exceptionHook&&j.Deferred.exceptionHook(r,c.stackTrace),e+1>=o&&(n!==B&&(a=void 0,u=[r]),t.rejectWith(a,u))}};e?c():(j.Deferred.getStackHook&&(c.stackTrace=j.Deferred.getStackHook()),r.setTimeout(c))}}return j.Deferred(function(r){t[0][3].add(s(0,r,b(i)?i:R,r.notifyWith)),t[1][3].add(s(0,r,b(e)?e:R)),t[2][3].add(s(0,r,b(n)?n:B))}).promise()},promise:function(e){return null!=e?j.extend(e,i):i}},o={};return j.each(t,function(e,r){var s=r[2],a=r[5];i[r[1]]=s.add,a&&s.add(function(){n=a},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(r[3].fire),o[r[0]]=function(){return o[r[0]+"With"](this===o?void 0:this,arguments),this},o[r[0]+"With"]=s.fireWith}),i.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,r=t,n=Array(r),i=u.call(arguments),o=j.Deferred(),s=function(e){return function(r){n[e]=this,i[e]=arguments.length>1?u.call(arguments):r,--t||o.resolveWith(n,i)}};if(t<=1&&(F(e,o.done(s(r)).resolve,o.reject,!t),"pending"===o.state()||b(i[r]&&i[r].then)))return o.then();for(;r--;)F(i[r],s(r),o.reject);return o.promise()}});var z=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;j.Deferred.exceptionHook=function(e,t){r.console&&r.console.warn&&e&&z.test(e.name)&&r.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},j.readyException=function(e){r.setTimeout(function(){throw e})};var W=j.Deferred();function U(){s.removeEventListener("DOMContentLoaded",U),r.removeEventListener("load",U),j.ready()}j.fn.ready=function(e){return W.then(e).catch(function(e){j.readyException(e)}),this},j.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--j.readyWait:j.isReady)||(j.isReady=!0,!0!==e&&--j.readyWait>0||W.resolveWith(s,[j]))}}),j.ready.then=W.then,"complete"===s.readyState||"loading"!==s.readyState&&!s.documentElement.doScroll?r.setTimeout(j.ready):(s.addEventListener("DOMContentLoaded",U),r.addEventListener("load",U));var q=function(e,t,r,n,i,o,s){var a=0,u=e.length,l=null==r;if("object"===T(r))for(a in i=!0,r)q(e,t,a,r[a],!0,o,s);else if(void 0!==n&&(i=!0,b(n)||(s=!0),l&&(s?(t.call(e,n),t=null):(l=t,t=function(e,t,r){return l.call(j(e),r)})),t))for(;a<u;a++)t(e[a],r,s?n:n.call(e[a],a,t(e[a],r)));return i?e:l?t.call(e):u?t(e[0],r):o},G=/^-ms-/,Z=/-([a-z])/g;function $(e,t){return t.toUpperCase()}function Y(e){return e.replace(G,"ms-").replace(Z,$)}var Q=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function X(){this.expando=j.expando+X.uid++}X.uid=1,X.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Q(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,r){var n,i=this.cache(e);if("string"==typeof t)i[Y(t)]=r;else for(n in t)i[Y(n)]=t[n];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Y(t)]},access:function(e,t,r){return void 0===t||t&&"string"==typeof t&&void 0===r?this.get(e,t):(this.set(e,t,r),void 0!==r?r:t)},remove:function(e,t){var r,n=e[this.expando];if(void 0!==n){if(void 0!==t){r=(t=Array.isArray(t)?t.map(Y):(t=Y(t))in n?[t]:t.match(V)||[]).length;for(;r--;)delete n[t[r]]}(void 0===t||j.isEmptyObject(n))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!j.isEmptyObject(t)}};var J=new X,K=new X,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function re(e,t,r){var n;if(void 0===r&&1===e.nodeType)if(n="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(r=e.getAttribute(n))){try{r=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(r)}catch(e){}K.set(e,t,r)}else r=void 0;return r}j.extend({hasData:function(e){return K.hasData(e)||J.hasData(e)},data:function(e,t,r){return K.access(e,t,r)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,r){return J.access(e,t,r)},_removeData:function(e,t){J.remove(e,t)}}),j.fn.extend({data:function(e,t){var r,n,i,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(i=K.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(r=s.length;r--;)s[r]&&0===(n=s[r].name).indexOf("data-")&&(n=Y(n.slice(5)),re(o,n,i[n]));J.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){K.set(this,e)}):q(this,function(t){var r;if(o&&void 0===t)return void 0!==(r=K.get(o,e))?r:void 0!==(r=re(o,e))?r:void 0;this.each(function(){K.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){K.remove(this,e)})}}),j.extend({queue:function(e,t,r){var n;if(e)return t=(t||"fx")+"queue",n=J.get(e,t),r&&(!n||Array.isArray(r)?n=J.access(e,t,j.makeArray(r)):n.push(r)),n||[]},dequeue:function(e,t){t=t||"fx";var r=j.queue(e,t),n=r.length,i=r.shift(),o=j._queueHooks(e,t);"inprogress"===i&&(i=r.shift(),n--),i&&("fx"===t&&r.unshift("inprogress"),delete o.stop,i.call(e,function(){j.dequeue(e,t)},o)),!n&&o&&o.empty.fire()},_queueHooks:function(e,t){var r=t+"queueHooks";return J.get(e,r)||J.access(e,r,{empty:j.Callbacks("once memory").add(function(){J.remove(e,[t+"queue",r])})})}}),j.fn.extend({queue:function(e,t){var r=2;return"string"!=typeof e&&(t=e,e="fx",r--),arguments.length<r?j.queue(this[0],e):void 0===t?this:this.each(function(){var r=j.queue(this,e,t);j._queueHooks(this,e),"fx"===e&&"inprogress"!==r[0]&&j.dequeue(this,e)})},dequeue:function(e){return this.each(function(){j.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var r,n=1,i=j.Deferred(),o=this,s=this.length,a=function(){--n||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(r=J.get(o[s],e+"queueHooks"))&&r.empty&&(n++,r.empty.add(a));return a(),i.promise(t)}});var ne=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+ne+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&j.contains(e.ownerDocument,e)&&"none"===j.css(e,"display")},ae=function(e,t,r,n){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];for(o in i=r.apply(e,n||[]),t)e.style[o]=s[o];return i};function ue(e,t,r,n){var i,o,s=20,a=n?function(){return n.cur()}:function(){return j.css(e,t,"")},u=a(),l=r&&r[3]||(j.cssNumber[t]?"":"px"),c=(j.cssNumber[t]||"px"!==l&&+u)&&ie.exec(j.css(e,t));if(c&&c[3]!==l){for(u/=2,l=l||c[3],c=+u||1;s--;)j.style(e,t,c+l),(1-o)*(1-(o=a()/u||.5))<=0&&(s=0),c/=o;c*=2,j.style(e,t,c+l),r=r||[]}return r&&(c=+c||+u||0,i=r[1]?c+(r[1]+1)*r[2]:+r[2],n&&(n.unit=l,n.start=c,n.end=i)),i}var le={};function ce(e){var t,r=e.ownerDocument,n=e.nodeName,i=le[n];return i||(t=r.body.appendChild(r.createElement(n)),i=j.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),le[n]=i,i)}function pe(e,t){for(var r,n,i=[],o=0,s=e.length;o<s;o++)(n=e[o]).style&&(r=n.style.display,t?("none"===r&&(i[o]=J.get(n,"display")||null,i[o]||(n.style.display="")),""===n.style.display&&se(n)&&(i[o]=ce(n))):"none"!==r&&(i[o]="none",J.set(n,"display",r)));for(o=0;o<s;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}j.fn.extend({show:function(){return pe(this,!0)},hide:function(){return pe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?j(this).show():j(this).hide()})}});var de=/^(?:checkbox|radio)$/i,he=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,fe=/^$|^module$|\/(?:java|ecma)script/i,me={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var r;return r=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&O(e,t)?j.merge([e],r):r}function ve(e,t){for(var r=0,n=e.length;r<n;r++)J.set(e[r],"globalEval",!t||J.get(t[r],"globalEval"))}me.optgroup=me.option,me.tbody=me.tfoot=me.colgroup=me.caption=me.thead,me.th=me.td;var be,ye,_e=/<|&#?\w+;/;function we(e,t,r,n,i){for(var o,s,a,u,l,c,p=t.createDocumentFragment(),d=[],h=0,f=e.length;h<f;h++)if((o=e[h])||0===o)if("object"===T(o))j.merge(d,o.nodeType?[o]:o);else if(_e.test(o)){for(s=s||p.appendChild(t.createElement("div")),a=(he.exec(o)||["",""])[1].toLowerCase(),u=me[a]||me._default,s.innerHTML=u[1]+j.htmlPrefilter(o)+u[2],c=u[0];c--;)s=s.lastChild;j.merge(d,s.childNodes),(s=p.firstChild).textContent=""}else d.push(t.createTextNode(o));for(p.textContent="",h=0;o=d[h++];)if(n&&j.inArray(o,n)>-1)i&&i.push(o);else if(l=j.contains(o.ownerDocument,o),s=ge(p.appendChild(o),"script"),l&&ve(s),r)for(c=0;o=s[c++];)fe.test(o.type||"")&&r.push(o);return p}be=s.createDocumentFragment().appendChild(s.createElement("div")),(ye=s.createElement("input")).setAttribute("type","radio"),ye.setAttribute("checked","checked"),ye.setAttribute("name","t"),be.appendChild(ye),v.checkClone=be.cloneNode(!0).cloneNode(!0).lastChild.checked,be.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!be.cloneNode(!0).lastChild.defaultValue;var Te=s.documentElement,je=/^key/,xe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ee=/^([^.]*)(?:\.(.+)|)/;function De(){return!0}function Ce(){return!1}function Ne(){try{return s.activeElement}catch(e){}}function Se(e,t,r,n,i,o){var s,a;if("object"==typeof t){for(a in"string"!=typeof r&&(n=n||r,r=void 0),t)Se(e,a,r,n,t[a],o);return e}if(null==n&&null==i?(i=r,n=r=void 0):null==i&&("string"==typeof r?(i=n,n=void 0):(i=n,n=r,r=void 0)),!1===i)i=Ce;else if(!i)return e;return 1===o&&(s=i,(i=function(e){return j().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=j.guid++)),e.each(function(){j.event.add(this,t,i,n,r)})}j.event={global:{},add:function(e,t,r,n,i){var o,s,a,u,l,c,p,d,h,f,m,g=J.get(e);if(g)for(r.handler&&(r=(o=r).handler,i=o.selector),i&&j.find.matchesSelector(Te,i),r.guid||(r.guid=j.guid++),(u=g.events)||(u=g.events={}),(s=g.handle)||(s=g.handle=function(t){return void 0!==j&&j.event.triggered!==t.type?j.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(V)||[""]).length;l--;)h=m=(a=Ee.exec(t[l])||[])[1],f=(a[2]||"").split(".").sort(),h&&(p=j.event.special[h]||{},h=(i?p.delegateType:p.bindType)||h,p=j.event.special[h]||{},c=j.extend({type:h,origType:m,data:n,handler:r,guid:r.guid,selector:i,needsContext:i&&j.expr.match.needsContext.test(i),namespace:f.join(".")},o),(d=u[h])||((d=u[h]=[]).delegateCount=0,p.setup&&!1!==p.setup.call(e,n,f,s)||e.addEventListener&&e.addEventListener(h,s)),p.add&&(p.add.call(e,c),c.handler.guid||(c.handler.guid=r.guid)),i?d.splice(d.delegateCount++,0,c):d.push(c),j.event.global[h]=!0)},remove:function(e,t,r,n,i){var o,s,a,u,l,c,p,d,h,f,m,g=J.hasData(e)&&J.get(e);if(g&&(u=g.events)){for(l=(t=(t||"").match(V)||[""]).length;l--;)if(h=m=(a=Ee.exec(t[l])||[])[1],f=(a[2]||"").split(".").sort(),h){for(p=j.event.special[h]||{},d=u[h=(n?p.delegateType:p.bindType)||h]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=d.length;o--;)c=d[o],!i&&m!==c.origType||r&&r.guid!==c.guid||a&&!a.test(c.namespace)||n&&n!==c.selector&&("**"!==n||!c.selector)||(d.splice(o,1),c.selector&&d.delegateCount--,p.remove&&p.remove.call(e,c));s&&!d.length&&(p.teardown&&!1!==p.teardown.call(e,f,g.handle)||j.removeEvent(e,h,g.handle),delete u[h])}else for(h in u)j.event.remove(e,h+t[l],r,n,!0);j.isEmptyObject(u)&&J.remove(e,"handle events")}},dispatch:function(e){var t,r,n,i,o,s,a=j.event.fix(e),u=new Array(arguments.length),l=(J.get(this,"events")||{})[a.type]||[],c=j.event.special[a.type]||{};for(u[0]=a,t=1;t<arguments.length;t++)u[t]=arguments[t];if(a.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,a)){for(s=j.event.handlers.call(this,a,l),t=0;(i=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=i.elem,r=0;(o=i.handlers[r++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(n=((j.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u))&&!1===(a.result=n)&&(a.preventDefault(),a.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,a),a.result}},handlers:function(e,t){var r,n,i,o,s,a=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],s={},r=0;r<u;r++)void 0===s[i=(n=t[r]).selector+" "]&&(s[i]=n.needsContext?j(i,this).index(l)>-1:j.find(i,this,null,[l]).length),s[i]&&o.push(n);o.length&&a.push({elem:l,handlers:o})}return l=this,u<t.length&&a.push({elem:l,handlers:t.slice(u)}),a},addProp:function(e,t){Object.defineProperty(j.Event.prototype,e,{enumerable:!0,configurable:!0,get:b(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[j.expando]?e:new j.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Ne()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Ne()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&O(this,"input"))return this.click(),!1},_default:function(e){return O(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},j.removeEvent=function(e,t,r){e.removeEventListener&&e.removeEventListener(t,r)},j.Event=function(e,t){if(!(this instanceof j.Event))return new j.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?De:Ce,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&j.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[j.expando]=!0},j.Event.prototype={constructor:j.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=De,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=De,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=De,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},j.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&je.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&xe.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},j.event.addProp),j.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){j.event.special[e]={delegateType:t,bindType:t,handle:function(e){var r,n=e.relatedTarget,i=e.handleObj;return n&&(n===this||j.contains(this,n))||(e.type=i.origType,r=i.handler.apply(this,arguments),e.type=t),r}}}),j.fn.extend({on:function(e,t,r,n){return Se(this,e,t,r,n)},one:function(e,t,r,n){return Se(this,e,t,r,n,1)},off:function(e,t,r){var n,i;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,j(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(r=t,t=void 0),!1===r&&(r=Ce),this.each(function(){j.event.remove(this,e,r,t)})}});var Oe=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ae=/<script|<style|<link/i,ke=/checked\s*(?:[^=]|=\s*.checked.)/i,Ie=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Me(e,t){return O(e,"table")&&O(11!==t.nodeType?t:t.firstChild,"tr")&&j(e).children("tbody")[0]||e}function Le(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Pe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function He(e,t){var r,n,i,o,s,a,u,l;if(1===t.nodeType){if(J.hasData(e)&&(o=J.access(e),s=J.set(t,o),l=o.events))for(i in delete s.handle,s.events={},l)for(r=0,n=l[i].length;r<n;r++)j.event.add(t,i,l[i][r]);K.hasData(e)&&(a=K.access(e),u=j.extend({},a),K.set(t,u))}}function Ve(e,t,r,n){t=l.apply([],t);var i,o,s,a,u,c,p=0,d=e.length,h=d-1,f=t[0],m=b(f);if(m||d>1&&"string"==typeof f&&!v.checkClone&&ke.test(f))return e.each(function(i){var o=e.eq(i);m&&(t[0]=f.call(this,i,o.html())),Ve(o,t,r,n)});if(d&&(o=(i=we(t,e[0].ownerDocument,!1,e,n)).firstChild,1===i.childNodes.length&&(i=o),o||n)){for(a=(s=j.map(ge(i,"script"),Le)).length;p<d;p++)u=i,p!==h&&(u=j.clone(u,!0,!0),a&&j.merge(s,ge(u,"script"))),r.call(e[p],u,p);if(a)for(c=s[s.length-1].ownerDocument,j.map(s,Pe),p=0;p<a;p++)u=s[p],fe.test(u.type||"")&&!J.access(u,"globalEval")&&j.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?j._evalUrl&&j._evalUrl(u.src):w(u.textContent.replace(Ie,""),c,u))}return e}function Re(e,t,r){for(var n,i=t?j.filter(t,e):e,o=0;null!=(n=i[o]);o++)r||1!==n.nodeType||j.cleanData(ge(n)),n.parentNode&&(r&&j.contains(n.ownerDocument,n)&&ve(ge(n,"script")),n.parentNode.removeChild(n));return e}j.extend({htmlPrefilter:function(e){return e.replace(Oe,"<$1></$2>")},clone:function(e,t,r){var n,i,o,s,a,u,l,c=e.cloneNode(!0),p=j.contains(e.ownerDocument,e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||j.isXMLDoc(e)))for(s=ge(c),n=0,i=(o=ge(e)).length;n<i;n++)a=o[n],u=s[n],void 0,"input"===(l=u.nodeName.toLowerCase())&&de.test(a.type)?u.checked=a.checked:"input"!==l&&"textarea"!==l||(u.defaultValue=a.defaultValue);if(t)if(r)for(o=o||ge(e),s=s||ge(c),n=0,i=o.length;n<i;n++)He(o[n],s[n]);else He(e,c);return(s=ge(c,"script")).length>0&&ve(s,!p&&ge(e,"script")),c},cleanData:function(e){for(var t,r,n,i=j.event.special,o=0;void 0!==(r=e[o]);o++)if(Q(r)){if(t=r[J.expando]){if(t.events)for(n in t.events)i[n]?j.event.remove(r,n):j.removeEvent(r,n,t.handle);r[J.expando]=void 0}r[K.expando]&&(r[K.expando]=void 0)}}}),j.fn.extend({detach:function(e){return Re(this,e,!0)},remove:function(e){return Re(this,e)},text:function(e){return q(this,function(e){return void 0===e?j.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Ve(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Me(this,e).appendChild(e)})},prepend:function(){return Ve(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Me(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Ve(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Ve(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(j.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return j.clone(this,e,t)})},html:function(e){return q(this,function(e){var t=this[0]||{},r=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ae.test(e)&&!me[(he.exec(e)||["",""])[1].toLowerCase()]){e=j.htmlPrefilter(e);try{for(;r<n;r++)1===(t=this[r]||{}).nodeType&&(j.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Ve(this,arguments,function(t){var r=this.parentNode;j.inArray(this,e)<0&&(j.cleanData(ge(this)),r&&r.replaceChild(t,this))},e)}}),j.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){j.fn[e]=function(e){for(var r,n=[],i=j(e),o=i.length-1,s=0;s<=o;s++)r=s===o?this:this.clone(!0),j(i[s])[t](r),c.apply(n,r.get());return this.pushStack(n)}});var Be=new RegExp("^("+ne+")(?!px)[a-z%]+$","i"),Fe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=r),t.getComputedStyle(e)},ze=new RegExp(oe.join("|"),"i");function We(e,t,r){var n,i,o,s,a=e.style;return(r=r||Fe(e))&&(""!==(s=r.getPropertyValue(t)||r[t])||j.contains(e.ownerDocument,e)||(s=j.style(e,t)),!v.pixelBoxStyles()&&Be.test(s)&&ze.test(t)&&(n=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=r.width,a.width=n,a.minWidth=i,a.maxWidth=o)),void 0!==s?s+"":s}function Ue(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",Te.appendChild(l).appendChild(c);var e=r.getComputedStyle(c);n="1%"!==e.top,u=12===t(e.marginLeft),c.style.right="60%",a=36===t(e.right),i=36===t(e.width),c.style.position="absolute",o=36===c.offsetWidth||"absolute",Te.removeChild(l),c=null}}function t(e){return Math.round(parseFloat(e))}var n,i,o,a,u,l=s.createElement("div"),c=s.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===c.style.backgroundClip,j.extend(v,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),o}}))}();var qe=/^(none|table(?!-c[ea]).+)/,Ge=/^--/,Ze={position:"absolute",visibility:"hidden",display:"block"},$e={letterSpacing:"0",fontWeight:"400"},Ye=["Webkit","Moz","ms"],Qe=s.createElement("div").style;function Xe(e){var t=j.cssProps[e];return t||(t=j.cssProps[e]=function(e){if(e in Qe)return e;for(var t=e[0].toUpperCase()+e.slice(1),r=Ye.length;r--;)if((e=Ye[r]+t)in Qe)return e}(e)||e),t}function Je(e,t,r){var n=ie.exec(t);return n?Math.max(0,n[2]-(r||0))+(n[3]||"px"):t}function Ke(e,t,r,n,i,o){var s="width"===t?1:0,a=0,u=0;if(r===(n?"border":"content"))return 0;for(;s<4;s+=2)"margin"===r&&(u+=j.css(e,r+oe[s],!0,i)),n?("content"===r&&(u-=j.css(e,"padding"+oe[s],!0,i)),"margin"!==r&&(u-=j.css(e,"border"+oe[s]+"Width",!0,i))):(u+=j.css(e,"padding"+oe[s],!0,i),"padding"!==r?u+=j.css(e,"border"+oe[s]+"Width",!0,i):a+=j.css(e,"border"+oe[s]+"Width",!0,i));return!n&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-a-.5))),u}function et(e,t,r){var n=Fe(e),i=We(e,t,n),o="border-box"===j.css(e,"boxSizing",!1,n),s=o;if(Be.test(i)){if(!r)return i;i="auto"}return s=s&&(v.boxSizingReliable()||i===e.style[t]),("auto"===i||!parseFloat(i)&&"inline"===j.css(e,"display",!1,n))&&(i=e["offset"+t[0].toUpperCase()+t.slice(1)],s=!0),(i=parseFloat(i)||0)+Ke(e,t,r||(o?"border":"content"),s,n,i)+"px"}function tt(e,t,r,n,i){return new tt.prototype.init(e,t,r,n,i)}j.extend({cssHooks:{opacity:{get:function(e,t){if(t){var r=We(e,"opacity");return""===r?"1":r}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,r,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=Y(t),u=Ge.test(t),l=e.style;if(u||(t=Xe(a)),s=j.cssHooks[t]||j.cssHooks[a],void 0===r)return s&&"get"in s&&void 0!==(i=s.get(e,!1,n))?i:l[t];"string"===(o=typeof r)&&(i=ie.exec(r))&&i[1]&&(r=ue(e,t,i),o="number"),null!=r&&r==r&&("number"===o&&(r+=i&&i[3]||(j.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==r||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(r=s.set(e,r,n))||(u?l.setProperty(t,r):l[t]=r))}},css:function(e,t,r,n){var i,o,s,a=Y(t);return Ge.test(t)||(t=Xe(a)),(s=j.cssHooks[t]||j.cssHooks[a])&&"get"in s&&(i=s.get(e,!0,r)),void 0===i&&(i=We(e,t,n)),"normal"===i&&t in $e&&(i=$e[t]),""===r||r?(o=parseFloat(i),!0===r||isFinite(o)?o||0:i):i}}),j.each(["height","width"],function(e,t){j.cssHooks[t]={get:function(e,r,n){if(r)return!qe.test(j.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,n):ae(e,Ze,function(){return et(e,t,n)})},set:function(e,r,n){var i,o=Fe(e),s="border-box"===j.css(e,"boxSizing",!1,o),a=n&&Ke(e,t,n,s,o);return s&&v.scrollboxSize()===o.position&&(a-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-Ke(e,t,"border",!1,o)-.5)),a&&(i=ie.exec(r))&&"px"!==(i[3]||"px")&&(e.style[t]=r,r=j.css(e,t)),Je(0,r,a)}}}),j.cssHooks.marginLeft=Ue(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(We(e,"marginLeft"))||e.getBoundingClientRect().left-ae(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),j.each({margin:"",padding:"",border:"Width"},function(e,t){j.cssHooks[e+t]={expand:function(r){for(var n=0,i={},o="string"==typeof r?r.split(" "):[r];n<4;n++)i[e+oe[n]+t]=o[n]||o[n-2]||o[0];return i}},"margin"!==e&&(j.cssHooks[e+t].set=Je)}),j.fn.extend({css:function(e,t){return q(this,function(e,t,r){var n,i,o={},s=0;if(Array.isArray(t)){for(n=Fe(e),i=t.length;s<i;s++)o[t[s]]=j.css(e,t[s],!1,n);return o}return void 0!==r?j.style(e,t,r):j.css(e,t)},e,t,arguments.length>1)}}),j.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,r,n,i,o){this.elem=e,this.prop=r,this.easing=i||j.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=o||(j.cssNumber[r]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,r=tt.propHooks[this.prop];return this.options.duration?this.pos=t=j.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),r&&r.set?r.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=j.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){j.fx.step[e.prop]?j.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[j.cssProps[e.prop]]&&!j.cssHooks[e.prop]?e.elem[e.prop]=e.now:j.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},j.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},j.fx=tt.prototype.init,j.fx.step={};var rt,nt,it=/^(?:toggle|show|hide)$/,ot=/queueHooks$/;function st(){nt&&(!1===s.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(st):r.setTimeout(st,j.fx.interval),j.fx.tick())}function at(){return r.setTimeout(function(){rt=void 0}),rt=Date.now()}function ut(e,t){var r,n=0,i={height:e};for(t=t?1:0;n<4;n+=2-t)i["margin"+(r=oe[n])]=i["padding"+r]=e;return t&&(i.opacity=i.width=e),i}function lt(e,t,r){for(var n,i=(ct.tweeners[t]||[]).concat(ct.tweeners["*"]),o=0,s=i.length;o<s;o++)if(n=i[o].call(r,t,e))return n}function ct(e,t,r){var n,i,o=0,s=ct.prefilters.length,a=j.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=rt||at(),r=Math.max(0,l.startTime+l.duration-t),n=1-(r/l.duration||0),o=0,s=l.tweens.length;o<s;o++)l.tweens[o].run(n);return a.notifyWith(e,[l,n,r]),n<1&&s?r:(s||a.notifyWith(e,[l,1,0]),a.resolveWith(e,[l]),!1)},l=a.promise({elem:e,props:j.extend({},t),opts:j.extend(!0,{specialEasing:{},easing:j.easing._default},r),originalProperties:t,originalOptions:r,startTime:rt||at(),duration:r.duration,tweens:[],createTween:function(t,r){var n=j.Tween(e,l.opts,t,r,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(n),n},stop:function(t){var r=0,n=t?l.tweens.length:0;if(i)return this;for(i=!0;r<n;r++)l.tweens[r].run(1);return t?(a.notifyWith(e,[l,1,0]),a.resolveWith(e,[l,t])):a.rejectWith(e,[l,t]),this}}),c=l.props;for(!function(e,t){var r,n,i,o,s;for(r in e)if(i=t[n=Y(r)],o=e[r],Array.isArray(o)&&(i=o[1],o=e[r]=o[0]),r!==n&&(e[n]=o,delete e[r]),(s=j.cssHooks[n])&&"expand"in s)for(r in o=s.expand(o),delete e[n],o)r in e||(e[r]=o[r],t[r]=i);else t[n]=i}(c,l.opts.specialEasing);o<s;o++)if(n=ct.prefilters[o].call(l,e,c,l.opts))return b(n.stop)&&(j._queueHooks(l.elem,l.opts.queue).stop=n.stop.bind(n)),n;return j.map(c,lt,l),b(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),j.fx.timer(j.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l}j.Animation=j.extend(ct,{tweeners:{"*":[function(e,t){var r=this.createTween(e,t);return ue(r.elem,e,ie.exec(t),r),r}]},tweener:function(e,t){b(e)?(t=e,e=["*"]):e=e.match(V);for(var r,n=0,i=e.length;n<i;n++)r=e[n],ct.tweeners[r]=ct.tweeners[r]||[],ct.tweeners[r].unshift(t)},prefilters:[function(e,t,r){var n,i,o,s,a,u,l,c,p="width"in t||"height"in t,d=this,h={},f=e.style,m=e.nodeType&&se(e),g=J.get(e,"fxshow");for(n in r.queue||(null==(s=j._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,j.queue(e,"fx").length||s.empty.fire()})})),t)if(i=t[n],it.test(i)){if(delete t[n],o=o||"toggle"===i,i===(m?"hide":"show")){if("show"!==i||!g||void 0===g[n])continue;m=!0}h[n]=g&&g[n]||j.style(e,n)}if((u=!j.isEmptyObject(t))||!j.isEmptyObject(h))for(n in p&&1===e.nodeType&&(r.overflow=[f.overflow,f.overflowX,f.overflowY],null==(l=g&&g.display)&&(l=J.get(e,"display")),"none"===(c=j.css(e,"display"))&&(l?c=l:(pe([e],!0),l=e.style.display||l,c=j.css(e,"display"),pe([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===j.css(e,"float")&&(u||(d.done(function(){f.display=l}),null==l&&(c=f.display,l="none"===c?"":c)),f.display="inline-block")),r.overflow&&(f.overflow="hidden",d.always(function(){f.overflow=r.overflow[0],f.overflowX=r.overflow[1],f.overflowY=r.overflow[2]})),u=!1,h)u||(g?"hidden"in g&&(m=g.hidden):g=J.access(e,"fxshow",{display:l}),o&&(g.hidden=!m),m&&pe([e],!0),d.done(function(){for(n in m||pe([e]),J.remove(e,"fxshow"),h)j.style(e,n,h[n])})),u=lt(m?g[n]:0,n,d),n in g||(g[n]=u.start,m&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?ct.prefilters.unshift(e):ct.prefilters.push(e)}}),j.speed=function(e,t,r){var n=e&&"object"==typeof e?j.extend({},e):{complete:r||!r&&t||b(e)&&e,duration:e,easing:r&&t||t&&!b(t)&&t};return j.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in j.fx.speeds?n.duration=j.fx.speeds[n.duration]:n.duration=j.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){b(n.old)&&n.old.call(this),n.queue&&j.dequeue(this,n.queue)},n},j.fn.extend({fadeTo:function(e,t,r,n){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,r,n)},animate:function(e,t,r,n){var i=j.isEmptyObject(e),o=j.speed(t,r,n),s=function(){var t=ct(this,j.extend({},e),o);(i||J.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,r){var n=function(e){var t=e.stop;delete e.stop,t(r)};return"string"!=typeof e&&(r=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=j.timers,s=J.get(this);if(i)s[i]&&s[i].stop&&n(s[i]);else for(i in s)s[i]&&s[i].stop&&ot.test(i)&&n(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(r),t=!1,o.splice(i,1));!t&&r||j.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,r=J.get(this),n=r[e+"queue"],i=r[e+"queueHooks"],o=j.timers,s=n?n.length:0;for(r.finish=!0,j.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete r.finish})}}),j.each(["toggle","show","hide"],function(e,t){var r=j.fn[t];j.fn[t]=function(e,n,i){return null==e||"boolean"==typeof e?r.apply(this,arguments):this.animate(ut(t,!0),e,n,i)}}),j.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){j.fn[e]=function(e,r,n){return this.animate(t,e,r,n)}}),j.timers=[],j.fx.tick=function(){var e,t=0,r=j.timers;for(rt=Date.now();t<r.length;t++)(e=r[t])()||r[t]!==e||r.splice(t--,1);r.length||j.fx.stop(),rt=void 0},j.fx.timer=function(e){j.timers.push(e),j.fx.start()},j.fx.interval=13,j.fx.start=function(){nt||(nt=!0,st())},j.fx.stop=function(){nt=null},j.fx.speeds={slow:600,fast:200,_default:400},j.fn.delay=function(e,t){return e=j.fx&&j.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,n){var i=r.setTimeout(t,e);n.stop=function(){r.clearTimeout(i)}})},function(){var e=s.createElement("input"),t=s.createElement("select").appendChild(s.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=s.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var pt,dt=j.expr.attrHandle;j.fn.extend({attr:function(e,t){return q(this,j.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){j.removeAttr(this,e)})}}),j.extend({attr:function(e,t,r){var n,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?j.prop(e,t,r):(1===o&&j.isXMLDoc(e)||(i=j.attrHooks[t.toLowerCase()]||(j.expr.match.bool.test(t)?pt:void 0)),void 0!==r?null===r?void j.removeAttr(e,t):i&&"set"in i&&void 0!==(n=i.set(e,r,t))?n:(e.setAttribute(t,r+""),r):i&&"get"in i&&null!==(n=i.get(e,t))?n:null==(n=j.find.attr(e,t))?void 0:n)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&O(e,"input")){var r=e.value;return e.setAttribute("type",t),r&&(e.value=r),t}}}},removeAttr:function(e,t){var r,n=0,i=t&&t.match(V);if(i&&1===e.nodeType)for(;r=i[n++];)e.removeAttribute(r)}}),pt={set:function(e,t,r){return!1===t?j.removeAttr(e,r):e.setAttribute(r,r),r}},j.each(j.expr.match.bool.source.match(/\w+/g),function(e,t){var r=dt[t]||j.find.attr;dt[t]=function(e,t,n){var i,o,s=t.toLowerCase();return n||(o=dt[s],dt[s]=i,i=null!=r(e,t,n)?s:null,dt[s]=o),i}});var ht=/^(?:input|select|textarea|button)$/i,ft=/^(?:a|area)$/i;function mt(e){return(e.match(V)||[]).join(" ")}function gt(e){return e.getAttribute&&e.getAttribute("class")||""}function vt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(V)||[]}j.fn.extend({prop:function(e,t){return q(this,j.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[j.propFix[e]||e]})}}),j.extend({prop:function(e,t,r){var n,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&j.isXMLDoc(e)||(t=j.propFix[t]||t,i=j.propHooks[t]),void 0!==r?i&&"set"in i&&void 0!==(n=i.set(e,r,t))?n:e[t]=r:i&&"get"in i&&null!==(n=i.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=j.find.attr(e,"tabindex");return t?parseInt(t,10):ht.test(e.nodeName)||ft.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(j.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),j.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){j.propFix[this.toLowerCase()]=this}),j.fn.extend({addClass:function(e){var t,r,n,i,o,s,a,u=0;if(b(e))return this.each(function(t){j(this).addClass(e.call(this,t,gt(this)))});if((t=vt(e)).length)for(;r=this[u++];)if(i=gt(r),n=1===r.nodeType&&" "+mt(i)+" "){for(s=0;o=t[s++];)n.indexOf(" "+o+" ")<0&&(n+=o+" ");i!==(a=mt(n))&&r.setAttribute("class",a)}return this},removeClass:function(e){var t,r,n,i,o,s,a,u=0;if(b(e))return this.each(function(t){j(this).removeClass(e.call(this,t,gt(this)))});if(!arguments.length)return this.attr("class","");if((t=vt(e)).length)for(;r=this[u++];)if(i=gt(r),n=1===r.nodeType&&" "+mt(i)+" "){for(s=0;o=t[s++];)for(;n.indexOf(" "+o+" ")>-1;)n=n.replace(" "+o+" "," ");i!==(a=mt(n))&&r.setAttribute("class",a)}return this},toggleClass:function(e,t){var r=typeof e,n="string"===r||Array.isArray(e);return"boolean"==typeof t&&n?t?this.addClass(e):this.removeClass(e):b(e)?this.each(function(r){j(this).toggleClass(e.call(this,r,gt(this),t),t)}):this.each(function(){var t,i,o,s;if(n)for(i=0,o=j(this),s=vt(e);t=s[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==r||((t=gt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))})},hasClass:function(e){var t,r,n=0;for(t=" "+e+" ";r=this[n++];)if(1===r.nodeType&&(" "+mt(gt(r))+" ").indexOf(t)>-1)return!0;return!1}});var bt=/\r/g;j.fn.extend({val:function(e){var t,r,n,i=this[0];return arguments.length?(n=b(e),this.each(function(r){var i;1===this.nodeType&&(null==(i=n?e.call(this,r,j(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=j.map(i,function(e){return null==e?"":e+""})),(t=j.valHooks[this.type]||j.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))})):i?(t=j.valHooks[i.type]||j.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(r=t.get(i,"value"))?r:"string"==typeof(r=i.value)?r.replace(bt,""):null==r?"":r:void 0}}),j.extend({valHooks:{option:{get:function(e){var t=j.find.attr(e,"value");return null!=t?t:mt(j.text(e))}},select:{get:function(e){var t,r,n,i=e.options,o=e.selectedIndex,s="select-one"===e.type,a=s?null:[],u=s?o+1:i.length;for(n=o<0?u:s?o:0;n<u;n++)if(((r=i[n]).selected||n===o)&&!r.disabled&&(!r.parentNode.disabled||!O(r.parentNode,"optgroup"))){if(t=j(r).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var r,n,i=e.options,o=j.makeArray(t),s=i.length;s--;)((n=i[s]).selected=j.inArray(j.valHooks.option.get(n),o)>-1)&&(r=!0);return r||(e.selectedIndex=-1),o}}}}),j.each(["radio","checkbox"],function(){j.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=j.inArray(j(e).val(),t)>-1}},v.checkOn||(j.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),v.focusin="onfocusin"in r;var yt=/^(?:focusinfocus|focusoutblur)$/,_t=function(e){e.stopPropagation()};j.extend(j.event,{trigger:function(e,t,n,i){var o,a,u,l,c,p,d,h,m=[n||s],g=f.call(e,"type")?e.type:e,v=f.call(e,"namespace")?e.namespace.split("."):[];if(a=h=u=n=n||s,3!==n.nodeType&&8!==n.nodeType&&!yt.test(g+j.event.triggered)&&(g.indexOf(".")>-1&&(g=(v=g.split(".")).shift(),v.sort()),c=g.indexOf(":")<0&&"on"+g,(e=e[j.expando]?e:new j.Event(g,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:j.makeArray(t,[e]),d=j.event.special[g]||{},i||!d.trigger||!1!==d.trigger.apply(n,t))){if(!i&&!d.noBubble&&!y(n)){for(l=d.delegateType||g,yt.test(l+g)||(a=a.parentNode);a;a=a.parentNode)m.push(a),u=a;u===(n.ownerDocument||s)&&m.push(u.defaultView||u.parentWindow||r)}for(o=0;(a=m[o++])&&!e.isPropagationStopped();)h=a,e.type=o>1?l:d.bindType||g,(p=(J.get(a,"events")||{})[e.type]&&J.get(a,"handle"))&&p.apply(a,t),(p=c&&a[c])&&p.apply&&Q(a)&&(e.result=p.apply(a,t),!1===e.result&&e.preventDefault());return e.type=g,i||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(m.pop(),t)||!Q(n)||c&&b(n[g])&&!y(n)&&((u=n[c])&&(n[c]=null),j.event.triggered=g,e.isPropagationStopped()&&h.addEventListener(g,_t),n[g](),e.isPropagationStopped()&&h.removeEventListener(g,_t),j.event.triggered=void 0,u&&(n[c]=u)),e.result}},simulate:function(e,t,r){var n=j.extend(new j.Event,r,{type:e,isSimulated:!0});j.event.trigger(n,null,t)}}),j.fn.extend({trigger:function(e,t){return this.each(function(){j.event.trigger(e,t,this)})},triggerHandler:function(e,t){var r=this[0];if(r)return j.event.trigger(e,t,r,!0)}}),v.focusin||j.each({focus:"focusin",blur:"focusout"},function(e,t){var r=function(e){j.event.simulate(t,e.target,j.event.fix(e))};j.event.special[t]={setup:function(){var n=this.ownerDocument||this,i=J.access(n,t);i||n.addEventListener(e,r,!0),J.access(n,t,(i||0)+1)},teardown:function(){var n=this.ownerDocument||this,i=J.access(n,t)-1;i?J.access(n,t,i):(n.removeEventListener(e,r,!0),J.remove(n,t))}}});var wt=r.location,Tt=Date.now(),jt=/\?/;j.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new r.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||j.error("Invalid XML: "+e),t};var xt=/\[\]$/,Et=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,Ct=/^(?:input|select|textarea|keygen)/i;function Nt(e,t,r,n){var i;if(Array.isArray(t))j.each(t,function(t,i){r||xt.test(e)?n(e,i):Nt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,r,n)});else if(r||"object"!==T(t))n(e,t);else for(i in t)Nt(e+"["+i+"]",t[i],r,n)}j.param=function(e,t){var r,n=[],i=function(e,t){var r=b(t)?t():t;n[n.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==r?"":r)};if(Array.isArray(e)||e.jquery&&!j.isPlainObject(e))j.each(e,function(){i(this.name,this.value)});else for(r in e)Nt(r,e[r],t,i);return n.join("&")},j.fn.extend({serialize:function(){return j.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=j.prop(this,"elements");return e?j.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!j(this).is(":disabled")&&Ct.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!de.test(e))}).map(function(e,t){var r=j(this).val();return null==r?null:Array.isArray(r)?j.map(r,function(e){return{name:t.name,value:e.replace(Et,"\r\n")}}):{name:t.name,value:r.replace(Et,"\r\n")}}).get()}});var St=/%20/g,Ot=/#.*$/,At=/([?&])_=[^&]*/,kt=/^(.*?):[ \t]*([^\r\n]*)$/gm,It=/^(?:GET|HEAD)$/,Mt=/^\/\//,Lt={},Pt={},Ht="*/".concat("*"),Vt=s.createElement("a");function Rt(e){return function(t,r){"string"!=typeof t&&(r=t,t="*");var n,i=0,o=t.toLowerCase().match(V)||[];if(b(r))for(;n=o[i++];)"+"===n[0]?(n=n.slice(1)||"*",(e[n]=e[n]||[]).unshift(r)):(e[n]=e[n]||[]).push(r)}}function Bt(e,t,r,n){var i={},o=e===Pt;function s(a){var u;return i[a]=!0,j.each(e[a]||[],function(e,a){var l=a(t,r,n);return"string"!=typeof l||o||i[l]?o?!(u=l):void 0:(t.dataTypes.unshift(l),s(l),!1)}),u}return s(t.dataTypes[0])||!i["*"]&&s("*")}function Ft(e,t){var r,n,i=j.ajaxSettings.flatOptions||{};for(r in t)void 0!==t[r]&&((i[r]?e:n||(n={}))[r]=t[r]);return n&&j.extend(!0,e,n),e}Vt.href=wt.href,j.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:wt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(wt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ht,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":j.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ft(Ft(e,j.ajaxSettings),t):Ft(j.ajaxSettings,e)},ajaxPrefilter:Rt(Lt),ajaxTransport:Rt(Pt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,i,o,a,u,l,c,p,d,h,f=j.ajaxSetup({},t),m=f.context||f,g=f.context&&(m.nodeType||m.jquery)?j(m):j.event,v=j.Deferred(),b=j.Callbacks("once memory"),y=f.statusCode||{},_={},w={},T="canceled",x={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=kt.exec(o);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,_[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)x.always(e[x.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||T;return n&&n.abort(t),E(0,t),this}};if(v.promise(x),f.url=((e||f.url||wt.href)+"").replace(Mt,wt.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(V)||[""],null==f.crossDomain){l=s.createElement("a");try{l.href=f.url,l.href=l.href,f.crossDomain=Vt.protocol+"//"+Vt.host!=l.protocol+"//"+l.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=j.param(f.data,f.traditional)),Bt(Lt,f,t,x),c)return x;for(d in(p=j.event&&f.global)&&0==j.active++&&j.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!It.test(f.type),i=f.url.replace(Ot,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(St,"+")):(h=f.url.slice(i.length),f.data&&(f.processData||"string"==typeof f.data)&&(i+=(jt.test(i)?"&":"?")+f.data,delete f.data),!1===f.cache&&(i=i.replace(At,"$1"),h=(jt.test(i)?"&":"?")+"_="+Tt+++h),f.url=i+h),f.ifModified&&(j.lastModified[i]&&x.setRequestHeader("If-Modified-Since",j.lastModified[i]),j.etag[i]&&x.setRequestHeader("If-None-Match",j.etag[i])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&x.setRequestHeader("Content-Type",f.contentType),x.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Ht+"; q=0.01":""):f.accepts["*"]),f.headers)x.setRequestHeader(d,f.headers[d]);if(f.beforeSend&&(!1===f.beforeSend.call(m,x,f)||c))return x.abort();if(T="abort",b.add(f.complete),x.done(f.success),x.fail(f.error),n=Bt(Pt,f,t,x)){if(x.readyState=1,p&&g.trigger("ajaxSend",[x,f]),c)return x;f.async&&f.timeout>0&&(u=r.setTimeout(function(){x.abort("timeout")},f.timeout));try{c=!1,n.send(_,E)}catch(e){if(c)throw e;E(-1,e)}}else E(-1,"No Transport");function E(e,t,s,a){var l,d,h,_,w,T=t;c||(c=!0,u&&r.clearTimeout(u),n=void 0,o=a||"",x.readyState=e>0?4:0,l=e>=200&&e<300||304===e,s&&(_=function(e,t,r){for(var n,i,o,s,a=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(i in a)if(a[i]&&a[i].test(n)){u.unshift(i);break}if(u[0]in r)o=u[0];else{for(i in r){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}s||(s=i)}o=o||s}if(o)return o!==u[0]&&u.unshift(o),r[o]}(f,x,s)),_=function(e,t,r,n){var i,o,s,a,u,l={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(r[e.responseFields[o]]=t),!u&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(s=l[u+" "+o]||l["* "+o]))for(i in l)if((a=i.split(" "))[1]===o&&(s=l[u+" "+a[0]]||l["* "+a[0]])){!0===s?s=l[i]:!0!==l[i]&&(o=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(f,_,x,l),l?(f.ifModified&&((w=x.getResponseHeader("Last-Modified"))&&(j.lastModified[i]=w),(w=x.getResponseHeader("etag"))&&(j.etag[i]=w)),204===e||"HEAD"===f.type?T="nocontent":304===e?T="notmodified":(T=_.state,d=_.data,l=!(h=_.error))):(h=T,!e&&T||(T="error",e<0&&(e=0))),x.status=e,x.statusText=(t||T)+"",l?v.resolveWith(m,[d,T,x]):v.rejectWith(m,[x,T,h]),x.statusCode(y),y=void 0,p&&g.trigger(l?"ajaxSuccess":"ajaxError",[x,f,l?d:h]),b.fireWith(m,[x,T]),p&&(g.trigger("ajaxComplete",[x,f]),--j.active||j.event.trigger("ajaxStop")))}return x},getJSON:function(e,t,r){return j.get(e,t,r,"json")},getScript:function(e,t){return j.get(e,void 0,t,"script")}}),j.each(["get","post"],function(e,t){j[t]=function(e,r,n,i){return b(r)&&(i=i||n,n=r,r=void 0),j.ajax(j.extend({url:e,type:t,dataType:i,data:r,success:n},j.isPlainObject(e)&&e))}}),j._evalUrl=function(e){return j.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},j.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=j(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return b(e)?this.each(function(t){j(this).wrapInner(e.call(this,t))}):this.each(function(){var t=j(this),r=t.contents();r.length?r.wrapAll(e):t.append(e)})},wrap:function(e){var t=b(e);return this.each(function(r){j(this).wrapAll(t?e.call(this,r):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){j(this).replaceWith(this.childNodes)}),this}}),j.expr.pseudos.hidden=function(e){return!j.expr.pseudos.visible(e)},j.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},j.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(e){}};var zt={0:200,1223:204},Wt=j.ajaxSettings.xhr();v.cors=!!Wt&&"withCredentials"in Wt,v.ajax=Wt=!!Wt,j.ajaxTransport(function(e){var t,n;if(v.cors||Wt&&!e.crossDomain)return{send:function(i,o){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)a.setRequestHeader(s,i[s]);t=function(e){return function(){t&&(t=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(zt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),n=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&r.setTimeout(function(){t&&n()})},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),j.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),j.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return j.globalEval(e),e}}}),j.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),j.ajaxTransport("script",function(e){var t,r;if(e.crossDomain)return{send:function(n,i){t=j("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",r=function(e){t.remove(),r=null,e&&i("error"===e.type?404:200,e.type)}),s.head.appendChild(t[0])},abort:function(){r&&r()}}});var Ut,qt=[],Gt=/(=)\?(?=&|$)|\?\?/;j.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=qt.pop()||j.expando+"_"+Tt++;return this[e]=!0,e}}),j.ajaxPrefilter("json jsonp",function(e,t,n){var i,o,s,a=!1!==e.jsonp&&(Gt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=b(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Gt,"$1"+i):!1!==e.jsonp&&(e.url+=(jt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return s||j.error(i+" was not called"),s[0]},e.dataTypes[0]="json",o=r[i],r[i]=function(){s=arguments},n.always(function(){void 0===o?j(r).removeProp(i):r[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,qt.push(i)),s&&b(o)&&o(s[0]),s=o=void 0}),"script"}),v.createHTMLDocument=((Ut=s.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ut.childNodes.length),j.parseHTML=function(e,t,r){return"string"!=typeof e?[]:("boolean"==typeof t&&(r=t,t=!1),t||(v.createHTMLDocument?((n=(t=s.implementation.createHTMLDocument("")).createElement("base")).href=s.location.href,t.head.appendChild(n)):t=s),i=A.exec(e),o=!r&&[],i?[t.createElement(i[1])]:(i=we([e],t,o),o&&o.length&&j(o).remove(),j.merge([],i.childNodes)));var n,i,o},j.fn.load=function(e,t,r){var n,i,o,s=this,a=e.indexOf(" ");return a>-1&&(n=mt(e.slice(a)),e=e.slice(0,a)),b(t)?(r=t,t=void 0):t&&"object"==typeof t&&(i="POST"),s.length>0&&j.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(n?j("<div>").append(j.parseHTML(e)).find(n):e)}).always(r&&function(e,t){s.each(function(){r.apply(this,o||[e.responseText,t,e])})}),this},j.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){j.fn[t]=function(e){return this.on(t,e)}}),j.expr.pseudos.animated=function(e){return j.grep(j.timers,function(t){return e===t.elem}).length},j.offset={setOffset:function(e,t,r){var n,i,o,s,a,u,l=j.css(e,"position"),c=j(e),p={};"static"===l&&(e.style.position="relative"),a=c.offset(),o=j.css(e,"top"),u=j.css(e,"left"),("absolute"===l||"fixed"===l)&&(o+u).indexOf("auto")>-1?(s=(n=c.position()).top,i=n.left):(s=parseFloat(o)||0,i=parseFloat(u)||0),b(t)&&(t=t.call(e,r,j.extend({},a))),null!=t.top&&(p.top=t.top-a.top+s),null!=t.left&&(p.left=t.left-a.left+i),"using"in t?t.using.call(e,p):c.css(p)}},j.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){j.offset.setOffset(this,e,t)});var t,r,n=this[0];return n?n.getClientRects().length?(t=n.getBoundingClientRect(),r=n.ownerDocument.defaultView,{top:t.top+r.pageYOffset,left:t.left+r.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,r,n=this[0],i={top:0,left:0};if("fixed"===j.css(n,"position"))t=n.getBoundingClientRect();else{for(t=this.offset(),r=n.ownerDocument,e=n.offsetParent||r.documentElement;e&&(e===r.body||e===r.documentElement)&&"static"===j.css(e,"position");)e=e.parentNode;e&&e!==n&&1===e.nodeType&&((i=j(e).offset()).top+=j.css(e,"borderTopWidth",!0),i.left+=j.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-j.css(n,"marginTop",!0),left:t.left-i.left-j.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===j.css(e,"position");)e=e.offsetParent;return e||Te})}}),j.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var r="pageYOffset"===t;j.fn[e]=function(n){return q(this,function(e,n,i){var o;if(y(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[n];o?o.scrollTo(r?o.pageXOffset:i,r?i:o.pageYOffset):e[n]=i},e,n,arguments.length)}}),j.each(["top","left"],function(e,t){j.cssHooks[t]=Ue(v.pixelPosition,function(e,r){if(r)return r=We(e,t),Be.test(r)?j(e).position()[t]+"px":r})}),j.each({Height:"height",Width:"width"},function(e,t){j.each({padding:"inner"+e,content:t,"":"outer"+e},function(r,n){j.fn[n]=function(i,o){var s=arguments.length&&(r||"boolean"!=typeof i),a=r||(!0===i||!0===o?"margin":"border");return q(this,function(t,r,i){var o;return y(t)?0===n.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?j.css(t,r,a):j.style(t,r,i,a)},t,s?i:void 0,s)}})}),j.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){j.fn[t]=function(e,r){return arguments.length>0?this.on(t,null,e,r):this.trigger(t)}}),j.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),j.fn.extend({bind:function(e,t,r){return this.on(e,null,t,r)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,r,n){return this.on(t,e,r,n)},undelegate:function(e,t,r){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",r)}}),j.proxy=function(e,t){var r,n,i;if("string"==typeof t&&(r=e[t],t=e,e=r),b(e))return n=u.call(arguments,2),(i=function(){return e.apply(t||this,n.concat(u.call(arguments)))}).guid=e.guid=e.guid||j.guid++,i},j.holdReady=function(e){e?j.readyWait++:j.ready(!0)},j.isArray=Array.isArray,j.parseJSON=JSON.parse,j.nodeName=O,j.isFunction=b,j.isWindow=y,j.camelCase=Y,j.type=T,j.now=Date.now,j.isNumeric=function(e){var t=j.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(n=function(){return j}.apply(t,[]))||(e.exports=n);var Zt=r.jQuery,$t=r.$;return j.noConflict=function(e){return r.$===j&&(r.$=$t),e&&r.jQuery===j&&(r.jQuery=Zt),j},i||(r.jQuery=r.$=j),j})},function(e,t,r){var n;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
!function(t,r){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?r(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return r(e)}:r(t)}("undefined"!=typeof window?window:this,function(r,i){"use strict";var o=[],s=r.document,a=Object.getPrototypeOf,u=o.slice,l=o.concat,c=o.push,p=o.indexOf,d={},h=d.toString,f=d.hasOwnProperty,m=f.toString,g=m.call(Object),v={},b=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},y=function(e){return null!=e&&e===e.window},_={type:!0,src:!0,noModule:!0};function w(e,t,r){var n,i=(t=t||s).createElement("script");if(i.text=e,r)for(n in _)r[n]&&(i[n]=r[n]);t.head.appendChild(i).parentNode.removeChild(i)}function T(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[h.call(e)]||"object":typeof e}var j=function(e,t){return new j.fn.init(e,t)},x=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function E(e){var t=!!e&&"length"in e&&e.length,r=T(e);return!b(e)&&!y(e)&&("array"===r||0===t||"number"==typeof t&&t>0&&t-1 in e)}j.fn=j.prototype={jquery:"3.3.1",constructor:j,length:0,toArray:function(){return u.call(this)},get:function(e){return null==e?u.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=j.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return j.each(this,e)},map:function(e){return this.pushStack(j.map(this,function(t,r){return e.call(t,r,t)}))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,r=+e+(e<0?t:0);return this.pushStack(r>=0&&r<t?[this[r]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},j.extend=j.fn.extend=function(){var e,t,r,n,i,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[a]||{},a++),"object"==typeof s||b(s)||(s={}),a===u&&(s=this,a--);a<u;a++)if(null!=(e=arguments[a]))for(t in e)r=s[t],s!==(n=e[t])&&(l&&n&&(j.isPlainObject(n)||(i=Array.isArray(n)))?(i?(i=!1,o=r&&Array.isArray(r)?r:[]):o=r&&j.isPlainObject(r)?r:{},s[t]=j.extend(l,o,n)):void 0!==n&&(s[t]=n));return s},j.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,r;return!(!e||"[object Object]"!==h.call(e))&&(!(t=a(e))||"function"==typeof(r=f.call(t,"constructor")&&t.constructor)&&m.call(r)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){w(e)},each:function(e,t){var r,n=0;if(E(e))for(r=e.length;n<r&&!1!==t.call(e[n],n,e[n]);n++);else for(n in e)if(!1===t.call(e[n],n,e[n]))break;return e},trim:function(e){return null==e?"":(e+"").replace(x,"")},makeArray:function(e,t){var r=t||[];return null!=e&&(E(Object(e))?j.merge(r,"string"==typeof e?[e]:e):c.call(r,e)),r},inArray:function(e,t,r){return null==t?-1:p.call(t,e,r)},merge:function(e,t){for(var r=+t.length,n=0,i=e.length;n<r;n++)e[i++]=t[n];return e.length=i,e},grep:function(e,t,r){for(var n=[],i=0,o=e.length,s=!r;i<o;i++)!t(e[i],i)!==s&&n.push(e[i]);return n},map:function(e,t,r){var n,i,o=0,s=[];if(E(e))for(n=e.length;o<n;o++)null!=(i=t(e[o],o,r))&&s.push(i);else for(o in e)null!=(i=t(e[o],o,r))&&s.push(i);return l.apply([],s)},guid:1,support:v}),"function"==typeof Symbol&&(j.fn[Symbol.iterator]=o[Symbol.iterator]),j.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){d["[object "+t+"]"]=t.toLowerCase()});var D=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(e){var t,r,n,i,o,s,a,u,l,c,p,d,h,f,m,g,v,b,y,_="sizzle"+1*new Date,w=e.document,T=0,j=0,x=se(),E=se(),D=se(),C=function(e,t){return e===t&&(p=!0),0},N={}.hasOwnProperty,S=[],O=S.pop,A=S.push,k=S.push,I=S.slice,M=function(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",P="[\\x20\\t\\r\\n\\f]",H="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",V="\\["+P+"*("+H+")(?:"+P+"*([*^$|!~]?=)"+P+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+P+"*\\]",R=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+V+")*)|.*)\\)|)",B=new RegExp(P+"+","g"),F=new RegExp("^"+P+"+|((?:^|[^\\\\])(?:\\\\.)*)"+P+"+$","g"),z=new RegExp("^"+P+"*,"+P+"*"),W=new RegExp("^"+P+"*([>+~]|"+P+")"+P+"*"),U=new RegExp("="+P+"*([^\\]'\"]*?)"+P+"*\\]","g"),q=new RegExp(R),G=new RegExp("^"+H+"$"),Z={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+V),PSEUDO:new RegExp("^"+R),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+P+"*(even|odd|(([+-]|)(\\d*)n|)"+P+"*(?:([+-]|)"+P+"*(\\d+)|))"+P+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+P+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+P+"*((?:-\\d)?\\d*)"+P+"*\\)|)(?=[^-]|$)","i")},$=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,X=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,K=new RegExp("\\\\([\\da-f]{1,6}"+P+"?|("+P+")|.)","ig"),ee=function(e,t,r){var n="0x"+t-65536;return n!=n||r?t:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ne=function(){d()},ie=be(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{k.apply(S=I.call(w.childNodes),w.childNodes),S[w.childNodes.length].nodeType}catch(e){k={apply:S.length?function(e,t){A.apply(e,I.call(t))}:function(e,t){for(var r=e.length,n=0;e[r++]=t[n++];);e.length=r-1}}}function oe(e,t,n,i){var o,a,l,c,p,f,v,b=t&&t.ownerDocument,T=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==T&&9!==T&&11!==T)return n;if(!i&&((t?t.ownerDocument||t:w)!==h&&d(t),t=t||h,m)){if(11!==T&&(p=X.exec(e)))if(o=p[1]){if(9===T){if(!(l=t.getElementById(o)))return n;if(l.id===o)return n.push(l),n}else if(b&&(l=b.getElementById(o))&&y(t,l)&&l.id===o)return n.push(l),n}else{if(p[2])return k.apply(n,t.getElementsByTagName(e)),n;if((o=p[3])&&r.getElementsByClassName&&t.getElementsByClassName)return k.apply(n,t.getElementsByClassName(o)),n}if(r.qsa&&!D[e+" "]&&(!g||!g.test(e))){if(1!==T)b=t,v=e;else if("object"!==t.nodeName.toLowerCase()){for((c=t.getAttribute("id"))?c=c.replace(te,re):t.setAttribute("id",c=_),a=(f=s(e)).length;a--;)f[a]="#"+c+" "+ve(f[a]);v=f.join(","),b=J.test(e)&&me(t.parentNode)||t}if(v)try{return k.apply(n,b.querySelectorAll(v)),n}catch(e){}finally{c===_&&t.removeAttribute("id")}}}return u(e.replace(F,"$1"),t,n,i)}function se(){var e=[];return function t(r,i){return e.push(r+" ")>n.cacheLength&&delete t[e.shift()],t[r+" "]=i}}function ae(e){return e[_]=!0,e}function ue(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function le(e,t){for(var r=e.split("|"),i=r.length;i--;)n.attrHandle[r[i]]=t}function ce(e,t){var r=t&&e,n=r&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(r)for(;r=r.nextSibling;)if(r===t)return-1;return e?1:-1}function pe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function de(e){return function(t){var r=t.nodeName.toLowerCase();return("input"===r||"button"===r)&&t.type===e}}function he(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ie(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function fe(e){return ae(function(t){return t=+t,ae(function(r,n){for(var i,o=e([],r.length,t),s=o.length;s--;)r[i=o[s]]&&(r[i]=!(n[i]=r[i]))})})}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in r=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},d=oe.setDocument=function(e){var t,i,s=e?e.ownerDocument||e:w;return s!==h&&9===s.nodeType&&s.documentElement?(f=(h=s).documentElement,m=!o(h),w!==h&&(i=h.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",ne,!1):i.attachEvent&&i.attachEvent("onunload",ne)),r.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),r.getElementsByTagName=ue(function(e){return e.appendChild(h.createComment("")),!e.getElementsByTagName("*").length}),r.getElementsByClassName=Q.test(h.getElementsByClassName),r.getById=ue(function(e){return f.appendChild(e).id=_,!h.getElementsByName||!h.getElementsByName(_).length}),r.getById?(n.filter.ID=function(e){var t=e.replace(K,ee);return function(e){return e.getAttribute("id")===t}},n.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var r=t.getElementById(e);return r?[r]:[]}}):(n.filter.ID=function(e){var t=e.replace(K,ee);return function(e){var r=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return r&&r.value===t}},n.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var r,n,i,o=t.getElementById(e);if(o){if((r=o.getAttributeNode("id"))&&r.value===e)return[o];for(i=t.getElementsByName(e),n=0;o=i[n++];)if((r=o.getAttributeNode("id"))&&r.value===e)return[o]}return[]}}),n.find.TAG=r.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):r.qsa?t.querySelectorAll(e):void 0}:function(e,t){var r,n=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;r=o[i++];)1===r.nodeType&&n.push(r);return n}return o},n.find.CLASS=r.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(r.qsa=Q.test(h.querySelectorAll))&&(ue(function(e){f.appendChild(e).innerHTML="<a id='"+_+"'></a><select id='"+_+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+P+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+P+"*(?:value|"+L+")"),e.querySelectorAll("[id~="+_+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+_+"+*").length||g.push(".#.+[+~]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+P+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),f.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(r.matchesSelector=Q.test(b=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&ue(function(e){r.disconnectedMatch=b.call(e,"*"),b.call(e,"[s!='']:x"),v.push("!=",R)}),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=Q.test(f.compareDocumentPosition),y=t||Q.test(f.contains)?function(e,t){var r=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(r.contains?r.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},C=t?function(e,t){if(e===t)return p=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!r.sortDetached&&t.compareDocumentPosition(e)===n?e===h||e.ownerDocument===w&&y(w,e)?-1:t===h||t.ownerDocument===w&&y(w,t)?1:c?M(c,e)-M(c,t):0:4&n?-1:1)}:function(e,t){if(e===t)return p=!0,0;var r,n=0,i=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!i||!o)return e===h?-1:t===h?1:i?-1:o?1:c?M(c,e)-M(c,t):0;if(i===o)return ce(e,t);for(r=e;r=r.parentNode;)s.unshift(r);for(r=t;r=r.parentNode;)a.unshift(r);for(;s[n]===a[n];)n++;return n?ce(s[n],a[n]):s[n]===w?-1:a[n]===w?1:0},h):h},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==h&&d(e),t=t.replace(U,"='$1']"),r.matchesSelector&&m&&!D[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var n=b.call(e,t);if(n||r.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){}return oe(t,h,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==h&&d(e),y(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==h&&d(e);var i=n.attrHandle[t.toLowerCase()],o=i&&N.call(n.attrHandle,t.toLowerCase())?i(e,t,!m):void 0;return void 0!==o?o:r.attributes||!m?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,re)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,n=[],i=0,o=0;if(p=!r.detectDuplicates,c=!r.sortStable&&e.slice(0),e.sort(C),p){for(;t=e[o++];)t===e[o]&&(i=n.push(o));for(;i--;)e.splice(n[i],1)}return c=null,e},i=oe.getText=function(e){var t,r="",n=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)r+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[n++];)r+=i(t);return r},(n=oe.selectors={cacheLength:50,createPseudo:ae,match:Z,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(K,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(K,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,r=!e[6]&&e[2];return Z.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":r&&q.test(r)&&(t=s(r,!0))&&(t=r.indexOf(")",r.length-t)-r.length)&&(e[0]=e[0].slice(0,t),e[2]=r.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(K,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=x[e+" "];return t||(t=new RegExp("(^|"+P+")"+e+"("+P+"|$)"))&&x(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,r){return function(n){var i=oe.attr(n,e);return null==i?"!="===t:!t||(i+="","="===t?i===r:"!="===t?i!==r:"^="===t?r&&0===i.indexOf(r):"*="===t?r&&i.indexOf(r)>-1:"$="===t?r&&i.slice(-r.length)===r:"~="===t?(" "+i.replace(B," ")+" ").indexOf(r)>-1:"|="===t&&(i===r||i.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,r,n,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===n&&0===i?function(e){return!!e.parentNode}:function(t,r,u){var l,c,p,d,h,f,m=o!==s?"nextSibling":"previousSibling",g=t.parentNode,v=a&&t.nodeName.toLowerCase(),b=!u&&!a,y=!1;if(g){if(o){for(;m;){for(d=t;d=d[m];)if(a?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;f=m="only"===e&&!f&&"nextSibling"}return!0}if(f=[s?g.firstChild:g.lastChild],s&&b){for(y=(h=(l=(c=(p=(d=g)[_]||(d[_]={}))[d.uniqueID]||(p[d.uniqueID]={}))[e]||[])[0]===T&&l[1])&&l[2],d=h&&g.childNodes[h];d=++h&&d&&d[m]||(y=h=0)||f.pop();)if(1===d.nodeType&&++y&&d===t){c[e]=[T,h,y];break}}else if(b&&(y=h=(l=(c=(p=(d=t)[_]||(d[_]={}))[d.uniqueID]||(p[d.uniqueID]={}))[e]||[])[0]===T&&l[1]),!1===y)for(;(d=++h&&d&&d[m]||(y=h=0)||f.pop())&&((a?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++y||(b&&((c=(p=d[_]||(d[_]={}))[d.uniqueID]||(p[d.uniqueID]={}))[e]=[T,y]),d!==t)););return(y-=i)===n||y%n==0&&y/n>=0}}},PSEUDO:function(e,t){var r,i=n.pseudos[e]||n.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return i[_]?i(t):i.length>1?(r=[e,e,"",t],n.setFilters.hasOwnProperty(e.toLowerCase())?ae(function(e,r){for(var n,o=i(e,t),s=o.length;s--;)e[n=M(e,o[s])]=!(r[n]=o[s])}):function(e){return i(e,0,r)}):i}},pseudos:{not:ae(function(e){var t=[],r=[],n=a(e.replace(F,"$1"));return n[_]?ae(function(e,t,r,i){for(var o,s=n(e,null,i,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,i,o){return t[0]=e,n(t,null,o,r),t[0]=null,!r.pop()}}),has:ae(function(e){return function(t){return oe(e,t).length>0}}),contains:ae(function(e){return e=e.replace(K,ee),function(t){return(t.textContent||t.innerText||i(t)).indexOf(e)>-1}}),lang:ae(function(e){return G.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(K,ee).toLowerCase(),function(t){var r;do{if(r=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(r=r.toLowerCase())===e||0===r.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var r=e.location&&e.location.hash;return r&&r.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:he(!1),disabled:he(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!n.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return $.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:fe(function(){return[0]}),last:fe(function(e,t){return[t-1]}),eq:fe(function(e,t,r){return[r<0?r+t:r]}),even:fe(function(e,t){for(var r=0;r<t;r+=2)e.push(r);return e}),odd:fe(function(e,t){for(var r=1;r<t;r+=2)e.push(r);return e}),lt:fe(function(e,t,r){for(var n=r<0?r+t:r;--n>=0;)e.push(n);return e}),gt:fe(function(e,t,r){for(var n=r<0?r+t:r;++n<t;)e.push(n);return e})}}).pseudos.nth=n.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})n.pseudos[t]=pe(t);for(t in{submit:!0,reset:!0})n.pseudos[t]=de(t);function ge(){}function ve(e){for(var t=0,r=e.length,n="";t<r;t++)n+=e[t].value;return n}function be(e,t,r){var n=t.dir,i=t.next,o=i||n,s=r&&"parentNode"===o,a=j++;return t.first?function(t,r,i){for(;t=t[n];)if(1===t.nodeType||s)return e(t,r,i);return!1}:function(t,r,u){var l,c,p,d=[T,a];if(u){for(;t=t[n];)if((1===t.nodeType||s)&&e(t,r,u))return!0}else for(;t=t[n];)if(1===t.nodeType||s)if(c=(p=t[_]||(t[_]={}))[t.uniqueID]||(p[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[n]||t;else{if((l=c[o])&&l[0]===T&&l[1]===a)return d[2]=l[2];if(c[o]=d,d[2]=e(t,r,u))return!0}return!1}}function ye(e){return e.length>1?function(t,r,n){for(var i=e.length;i--;)if(!e[i](t,r,n))return!1;return!0}:e[0]}function _e(e,t,r,n,i){for(var o,s=[],a=0,u=e.length,l=null!=t;a<u;a++)(o=e[a])&&(r&&!r(o,n,i)||(s.push(o),l&&t.push(a)));return s}function we(e,t,r,n,i,o){return n&&!n[_]&&(n=we(n)),i&&!i[_]&&(i=we(i,o)),ae(function(o,s,a,u){var l,c,p,d=[],h=[],f=s.length,m=o||function(e,t,r){for(var n=0,i=t.length;n<i;n++)oe(e,t[n],r);return r}(t||"*",a.nodeType?[a]:a,[]),g=!e||!o&&t?m:_e(m,d,e,a,u),v=r?i||(o?e:f||n)?[]:s:g;if(r&&r(g,v,a,u),n)for(l=_e(v,h),n(l,[],a,u),c=l.length;c--;)(p=l[c])&&(v[h[c]]=!(g[h[c]]=p));if(o){if(i||e){if(i){for(l=[],c=v.length;c--;)(p=v[c])&&l.push(g[c]=p);i(null,v=[],l,u)}for(c=v.length;c--;)(p=v[c])&&(l=i?M(o,p):d[c])>-1&&(o[l]=!(s[l]=p))}}else v=_e(v===s?v.splice(f,v.length):v),i?i(null,s,v,u):k.apply(s,v)})}function Te(e){for(var t,r,i,o=e.length,s=n.relative[e[0].type],a=s||n.relative[" "],u=s?1:0,c=be(function(e){return e===t},a,!0),p=be(function(e){return M(t,e)>-1},a,!0),d=[function(e,r,n){var i=!s&&(n||r!==l)||((t=r).nodeType?c(e,r,n):p(e,r,n));return t=null,i}];u<o;u++)if(r=n.relative[e[u].type])d=[be(ye(d),r)];else{if((r=n.filter[e[u].type].apply(null,e[u].matches))[_]){for(i=++u;i<o&&!n.relative[e[i].type];i++);return we(u>1&&ye(d),u>1&&ve(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(F,"$1"),r,u<i&&Te(e.slice(u,i)),i<o&&Te(e=e.slice(i)),i<o&&ve(e))}d.push(r)}return ye(d)}return ge.prototype=n.filters=n.pseudos,n.setFilters=new ge,s=oe.tokenize=function(e,t){var r,i,o,s,a,u,l,c=E[e+" "];if(c)return t?0:c.slice(0);for(a=e,u=[],l=n.preFilter;a;){for(s in r&&!(i=z.exec(a))||(i&&(a=a.slice(i[0].length)||a),u.push(o=[])),r=!1,(i=W.exec(a))&&(r=i.shift(),o.push({value:r,type:i[0].replace(F," ")}),a=a.slice(r.length)),n.filter)!(i=Z[s].exec(a))||l[s]&&!(i=l[s](i))||(r=i.shift(),o.push({value:r,type:s,matches:i}),a=a.slice(r.length));if(!r)break}return t?a.length:a?oe.error(e):E(e,u).slice(0)},a=oe.compile=function(e,t){var r,i=[],o=[],a=D[e+" "];if(!a){for(t||(t=s(e)),r=t.length;r--;)(a=Te(t[r]))[_]?i.push(a):o.push(a);(a=D(e,function(e,t){var r=t.length>0,i=e.length>0,o=function(o,s,a,u,c){var p,f,g,v=0,b="0",y=o&&[],_=[],w=l,j=o||i&&n.find.TAG("*",c),x=T+=null==w?1:Math.random()||.1,E=j.length;for(c&&(l=s===h||s||c);b!==E&&null!=(p=j[b]);b++){if(i&&p){for(f=0,s||p.ownerDocument===h||(d(p),a=!m);g=e[f++];)if(g(p,s||h,a)){u.push(p);break}c&&(T=x)}r&&((p=!g&&p)&&v--,o&&y.push(p))}if(v+=b,r&&b!==v){for(f=0;g=t[f++];)g(y,_,s,a);if(o){if(v>0)for(;b--;)y[b]||_[b]||(_[b]=O.call(u));_=_e(_)}k.apply(u,_),c&&!o&&_.length>0&&v+t.length>1&&oe.uniqueSort(u)}return c&&(T=x,l=w),y};return r?ae(o):o}(o,i))).selector=e}return a},u=oe.select=function(e,t,r,i){var o,u,l,c,p,d="function"==typeof e&&e,h=!i&&s(e=d.selector||e);if(r=r||[],1===h.length){if((u=h[0]=h[0].slice(0)).length>2&&"ID"===(l=u[0]).type&&9===t.nodeType&&m&&n.relative[u[1].type]){if(!(t=(n.find.ID(l.matches[0].replace(K,ee),t)||[])[0]))return r;d&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(o=Z.needsContext.test(e)?0:u.length;o--&&(l=u[o],!n.relative[c=l.type]);)if((p=n.find[c])&&(i=p(l.matches[0].replace(K,ee),J.test(u[0].type)&&me(t.parentNode)||t))){if(u.splice(o,1),!(e=i.length&&ve(u)))return k.apply(r,i),r;break}}return(d||a(e,h))(i,t,!m,r,!t||J.test(e)&&me(t.parentNode)||t),r},r.sortStable=_.split("").sort(C).join("")===_,r.detectDuplicates=!!p,d(),r.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(h.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||le("type|href|height|width",function(e,t,r){if(!r)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),r.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||le("value",function(e,t,r){if(!r&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||le(L,function(e,t,r){var n;if(!r)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),oe}(r);j.find=D,j.expr=D.selectors,j.expr[":"]=j.expr.pseudos,j.uniqueSort=j.unique=D.uniqueSort,j.text=D.getText,j.isXMLDoc=D.isXML,j.contains=D.contains,j.escapeSelector=D.escape;var C=function(e,t,r){for(var n=[],i=void 0!==r;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&j(e).is(r))break;n.push(e)}return n},N=function(e,t){for(var r=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&r.push(e);return r},S=j.expr.match.needsContext;function O(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function k(e,t,r){return b(t)?j.grep(e,function(e,n){return!!t.call(e,n,e)!==r}):t.nodeType?j.grep(e,function(e){return e===t!==r}):"string"!=typeof t?j.grep(e,function(e){return p.call(t,e)>-1!==r}):j.filter(t,e,r)}j.filter=function(e,t,r){var n=t[0];return r&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?j.find.matchesSelector(n,e)?[n]:[]:j.find.matches(e,j.grep(t,function(e){return 1===e.nodeType}))},j.fn.extend({find:function(e){var t,r,n=this.length,i=this;if("string"!=typeof e)return this.pushStack(j(e).filter(function(){for(t=0;t<n;t++)if(j.contains(i[t],this))return!0}));for(r=this.pushStack([]),t=0;t<n;t++)j.find(e,i[t],r);return n>1?j.uniqueSort(r):r},filter:function(e){return this.pushStack(k(this,e||[],!1))},not:function(e){return this.pushStack(k(this,e||[],!0))},is:function(e){return!!k(this,"string"==typeof e&&S.test(e)?j(e):e||[],!1).length}});var I,M=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(j.fn.init=function(e,t,r){var n,i;if(!e)return this;if(r=r||I,"string"==typeof e){if(!(n="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:M.exec(e))||!n[1]&&t)return!t||t.jquery?(t||r).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof j?t[0]:t,j.merge(this,j.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:s,!0)),A.test(n[1])&&j.isPlainObject(t))for(n in t)b(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return(i=s.getElementById(n[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==r.ready?r.ready(e):e(j):j.makeArray(e,this)}).prototype=j.fn,I=j(s);var L=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function H(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}j.fn.extend({has:function(e){var t=j(e,this),r=t.length;return this.filter(function(){for(var e=0;e<r;e++)if(j.contains(this,t[e]))return!0})},closest:function(e,t){var r,n=0,i=this.length,o=[],s="string"!=typeof e&&j(e);if(!S.test(e))for(;n<i;n++)for(r=this[n];r&&r!==t;r=r.parentNode)if(r.nodeType<11&&(s?s.index(r)>-1:1===r.nodeType&&j.find.matchesSelector(r,e))){o.push(r);break}return this.pushStack(o.length>1?j.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?p.call(j(e),this[0]):p.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(j.uniqueSort(j.merge(this.get(),j(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),j.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return C(e,"parentNode")},parentsUntil:function(e,t,r){return C(e,"parentNode",r)},next:function(e){return H(e,"nextSibling")},prev:function(e){return H(e,"previousSibling")},nextAll:function(e){return C(e,"nextSibling")},prevAll:function(e){return C(e,"previousSibling")},nextUntil:function(e,t,r){return C(e,"nextSibling",r)},prevUntil:function(e,t,r){return C(e,"previousSibling",r)},siblings:function(e){return N((e.parentNode||{}).firstChild,e)},children:function(e){return N(e.firstChild)},contents:function(e){return O(e,"iframe")?e.contentDocument:(O(e,"template")&&(e=e.content||e),j.merge([],e.childNodes))}},function(e,t){j.fn[e]=function(r,n){var i=j.map(this,t,r);return"Until"!==e.slice(-5)&&(n=r),n&&"string"==typeof n&&(i=j.filter(n,i)),this.length>1&&(P[e]||j.uniqueSort(i),L.test(e)&&i.reverse()),this.pushStack(i)}});var V=/[^\x20\t\r\n\f]+/g;function R(e){return e}function B(e){throw e}function F(e,t,r,n){var i;try{e&&b(i=e.promise)?i.call(e).done(t).fail(r):e&&b(i=e.then)?i.call(e,t,r):t.apply(void 0,[e].slice(n))}catch(e){r.apply(void 0,[e])}}j.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return j.each(e.match(V)||[],function(e,r){t[r]=!0}),t}(e):j.extend({},e);var t,r,n,i,o=[],s=[],a=-1,u=function(){for(i=i||e.once,n=t=!0;s.length;a=-1)for(r=s.shift();++a<o.length;)!1===o[a].apply(r[0],r[1])&&e.stopOnFalse&&(a=o.length,r=!1);e.memory||(r=!1),t=!1,i&&(o=r?[]:"")},l={add:function(){return o&&(r&&!t&&(a=o.length-1,s.push(r)),function t(r){j.each(r,function(r,n){b(n)?e.unique&&l.has(n)||o.push(n):n&&n.length&&"string"!==T(n)&&t(n)})}(arguments),r&&!t&&u()),this},remove:function(){return j.each(arguments,function(e,t){for(var r;(r=j.inArray(t,o,r))>-1;)o.splice(r,1),r<=a&&a--}),this},has:function(e){return e?j.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=s=[],o=r="",this},disabled:function(){return!o},lock:function(){return i=s=[],r||t||(o=r=""),this},locked:function(){return!!i},fireWith:function(e,r){return i||(r=[e,(r=r||[]).slice?r.slice():r],s.push(r),t||u()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!n}};return l},j.extend({Deferred:function(e){var t=[["notify","progress",j.Callbacks("memory"),j.Callbacks("memory"),2],["resolve","done",j.Callbacks("once memory"),j.Callbacks("once memory"),0,"resolved"],["reject","fail",j.Callbacks("once memory"),j.Callbacks("once memory"),1,"rejected"]],n="pending",i={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return j.Deferred(function(r){j.each(t,function(t,n){var i=b(e[n[4]])&&e[n[4]];o[n[1]](function(){var e=i&&i.apply(this,arguments);e&&b(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[n[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(e,n,i){var o=0;function s(e,t,n,i){return function(){var a=this,u=arguments,l=function(){var r,l;if(!(e<o)){if((r=n.apply(a,u))===t.promise())throw new TypeError("Thenable self-resolution");l=r&&("object"==typeof r||"function"==typeof r)&&r.then,b(l)?i?l.call(r,s(o,t,R,i),s(o,t,B,i)):(o++,l.call(r,s(o,t,R,i),s(o,t,B,i),s(o,t,R,t.notifyWith))):(n!==R&&(a=void 0,u=[r]),(i||t.resolveWith)(a,u))}},c=i?l:function(){try{l()}catch(r){j.Deferred.exceptionHook&&j.Deferred.exceptionHook(r,c.stackTrace),e+1>=o&&(n!==B&&(a=void 0,u=[r]),t.rejectWith(a,u))}};e?c():(j.Deferred.getStackHook&&(c.stackTrace=j.Deferred.getStackHook()),r.setTimeout(c))}}return j.Deferred(function(r){t[0][3].add(s(0,r,b(i)?i:R,r.notifyWith)),t[1][3].add(s(0,r,b(e)?e:R)),t[2][3].add(s(0,r,b(n)?n:B))}).promise()},promise:function(e){return null!=e?j.extend(e,i):i}},o={};return j.each(t,function(e,r){var s=r[2],a=r[5];i[r[1]]=s.add,a&&s.add(function(){n=a},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(r[3].fire),o[r[0]]=function(){return o[r[0]+"With"](this===o?void 0:this,arguments),this},o[r[0]+"With"]=s.fireWith}),i.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,r=t,n=Array(r),i=u.call(arguments),o=j.Deferred(),s=function(e){return function(r){n[e]=this,i[e]=arguments.length>1?u.call(arguments):r,--t||o.resolveWith(n,i)}};if(t<=1&&(F(e,o.done(s(r)).resolve,o.reject,!t),"pending"===o.state()||b(i[r]&&i[r].then)))return o.then();for(;r--;)F(i[r],s(r),o.reject);return o.promise()}});var z=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;j.Deferred.exceptionHook=function(e,t){r.console&&r.console.warn&&e&&z.test(e.name)&&r.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},j.readyException=function(e){r.setTimeout(function(){throw e})};var W=j.Deferred();function U(){s.removeEventListener("DOMContentLoaded",U),r.removeEventListener("load",U),j.ready()}j.fn.ready=function(e){return W.then(e).catch(function(e){j.readyException(e)}),this},j.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--j.readyWait:j.isReady)||(j.isReady=!0,!0!==e&&--j.readyWait>0||W.resolveWith(s,[j]))}}),j.ready.then=W.then,"complete"===s.readyState||"loading"!==s.readyState&&!s.documentElement.doScroll?r.setTimeout(j.ready):(s.addEventListener("DOMContentLoaded",U),r.addEventListener("load",U));var q=function(e,t,r,n,i,o,s){var a=0,u=e.length,l=null==r;if("object"===T(r))for(a in i=!0,r)q(e,t,a,r[a],!0,o,s);else if(void 0!==n&&(i=!0,b(n)||(s=!0),l&&(s?(t.call(e,n),t=null):(l=t,t=function(e,t,r){return l.call(j(e),r)})),t))for(;a<u;a++)t(e[a],r,s?n:n.call(e[a],a,t(e[a],r)));return i?e:l?t.call(e):u?t(e[0],r):o},G=/^-ms-/,Z=/-([a-z])/g;function $(e,t){return t.toUpperCase()}function Y(e){return e.replace(G,"ms-").replace(Z,$)}var Q=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function X(){this.expando=j.expando+X.uid++}X.uid=1,X.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Q(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,r){var n,i=this.cache(e);if("string"==typeof t)i[Y(t)]=r;else for(n in t)i[Y(n)]=t[n];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Y(t)]},access:function(e,t,r){return void 0===t||t&&"string"==typeof t&&void 0===r?this.get(e,t):(this.set(e,t,r),void 0!==r?r:t)},remove:function(e,t){var r,n=e[this.expando];if(void 0!==n){if(void 0!==t){r=(t=Array.isArray(t)?t.map(Y):(t=Y(t))in n?[t]:t.match(V)||[]).length;for(;r--;)delete n[t[r]]}(void 0===t||j.isEmptyObject(n))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!j.isEmptyObject(t)}};var J=new X,K=new X,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function re(e,t,r){var n;if(void 0===r&&1===e.nodeType)if(n="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(r=e.getAttribute(n))){try{r=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(r)}catch(e){}K.set(e,t,r)}else r=void 0;return r}j.extend({hasData:function(e){return K.hasData(e)||J.hasData(e)},data:function(e,t,r){return K.access(e,t,r)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,r){return J.access(e,t,r)},_removeData:function(e,t){J.remove(e,t)}}),j.fn.extend({data:function(e,t){var r,n,i,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(i=K.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(r=s.length;r--;)s[r]&&0===(n=s[r].name).indexOf("data-")&&(n=Y(n.slice(5)),re(o,n,i[n]));J.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){K.set(this,e)}):q(this,function(t){var r;if(o&&void 0===t)return void 0!==(r=K.get(o,e))?r:void 0!==(r=re(o,e))?r:void 0;this.each(function(){K.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){K.remove(this,e)})}}),j.extend({queue:function(e,t,r){var n;if(e)return t=(t||"fx")+"queue",n=J.get(e,t),r&&(!n||Array.isArray(r)?n=J.access(e,t,j.makeArray(r)):n.push(r)),n||[]},dequeue:function(e,t){t=t||"fx";var r=j.queue(e,t),n=r.length,i=r.shift(),o=j._queueHooks(e,t);"inprogress"===i&&(i=r.shift(),n--),i&&("fx"===t&&r.unshift("inprogress"),delete o.stop,i.call(e,function(){j.dequeue(e,t)},o)),!n&&o&&o.empty.fire()},_queueHooks:function(e,t){var r=t+"queueHooks";return J.get(e,r)||J.access(e,r,{empty:j.Callbacks("once memory").add(function(){J.remove(e,[t+"queue",r])})})}}),j.fn.extend({queue:function(e,t){var r=2;return"string"!=typeof e&&(t=e,e="fx",r--),arguments.length<r?j.queue(this[0],e):void 0===t?this:this.each(function(){var r=j.queue(this,e,t);j._queueHooks(this,e),"fx"===e&&"inprogress"!==r[0]&&j.dequeue(this,e)})},dequeue:function(e){return this.each(function(){j.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var r,n=1,i=j.Deferred(),o=this,s=this.length,a=function(){--n||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(r=J.get(o[s],e+"queueHooks"))&&r.empty&&(n++,r.empty.add(a));return a(),i.promise(t)}});var ne=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+ne+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&j.contains(e.ownerDocument,e)&&"none"===j.css(e,"display")},ae=function(e,t,r,n){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];for(o in i=r.apply(e,n||[]),t)e.style[o]=s[o];return i};function ue(e,t,r,n){var i,o,s=20,a=n?function(){return n.cur()}:function(){return j.css(e,t,"")},u=a(),l=r&&r[3]||(j.cssNumber[t]?"":"px"),c=(j.cssNumber[t]||"px"!==l&&+u)&&ie.exec(j.css(e,t));if(c&&c[3]!==l){for(u/=2,l=l||c[3],c=+u||1;s--;)j.style(e,t,c+l),(1-o)*(1-(o=a()/u||.5))<=0&&(s=0),c/=o;c*=2,j.style(e,t,c+l),r=r||[]}return r&&(c=+c||+u||0,i=r[1]?c+(r[1]+1)*r[2]:+r[2],n&&(n.unit=l,n.start=c,n.end=i)),i}var le={};function ce(e){var t,r=e.ownerDocument,n=e.nodeName,i=le[n];return i||(t=r.body.appendChild(r.createElement(n)),i=j.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),le[n]=i,i)}function pe(e,t){for(var r,n,i=[],o=0,s=e.length;o<s;o++)(n=e[o]).style&&(r=n.style.display,t?("none"===r&&(i[o]=J.get(n,"display")||null,i[o]||(n.style.display="")),""===n.style.display&&se(n)&&(i[o]=ce(n))):"none"!==r&&(i[o]="none",J.set(n,"display",r)));for(o=0;o<s;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}j.fn.extend({show:function(){return pe(this,!0)},hide:function(){return pe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?j(this).show():j(this).hide()})}});var de=/^(?:checkbox|radio)$/i,he=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,fe=/^$|^module$|\/(?:java|ecma)script/i,me={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var r;return r=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&O(e,t)?j.merge([e],r):r}function ve(e,t){for(var r=0,n=e.length;r<n;r++)J.set(e[r],"globalEval",!t||J.get(t[r],"globalEval"))}me.optgroup=me.option,me.tbody=me.tfoot=me.colgroup=me.caption=me.thead,me.th=me.td;var be,ye,_e=/<|&#?\w+;/;function we(e,t,r,n,i){for(var o,s,a,u,l,c,p=t.createDocumentFragment(),d=[],h=0,f=e.length;h<f;h++)if((o=e[h])||0===o)if("object"===T(o))j.merge(d,o.nodeType?[o]:o);else if(_e.test(o)){for(s=s||p.appendChild(t.createElement("div")),a=(he.exec(o)||["",""])[1].toLowerCase(),u=me[a]||me._default,s.innerHTML=u[1]+j.htmlPrefilter(o)+u[2],c=u[0];c--;)s=s.lastChild;j.merge(d,s.childNodes),(s=p.firstChild).textContent=""}else d.push(t.createTextNode(o));for(p.textContent="",h=0;o=d[h++];)if(n&&j.inArray(o,n)>-1)i&&i.push(o);else if(l=j.contains(o.ownerDocument,o),s=ge(p.appendChild(o),"script"),l&&ve(s),r)for(c=0;o=s[c++];)fe.test(o.type||"")&&r.push(o);return p}be=s.createDocumentFragment().appendChild(s.createElement("div")),(ye=s.createElement("input")).setAttribute("type","radio"),ye.setAttribute("checked","checked"),ye.setAttribute("name","t"),be.appendChild(ye),v.checkClone=be.cloneNode(!0).cloneNode(!0).lastChild.checked,be.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!be.cloneNode(!0).lastChild.defaultValue;var Te=s.documentElement,je=/^key/,xe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ee=/^([^.]*)(?:\.(.+)|)/;function De(){return!0}function Ce(){return!1}function Ne(){try{return s.activeElement}catch(e){}}function Se(e,t,r,n,i,o){var s,a;if("object"==typeof t){for(a in"string"!=typeof r&&(n=n||r,r=void 0),t)Se(e,a,r,n,t[a],o);return e}if(null==n&&null==i?(i=r,n=r=void 0):null==i&&("string"==typeof r?(i=n,n=void 0):(i=n,n=r,r=void 0)),!1===i)i=Ce;else if(!i)return e;return 1===o&&(s=i,(i=function(e){return j().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=j.guid++)),e.each(function(){j.event.add(this,t,i,n,r)})}j.event={global:{},add:function(e,t,r,n,i){var o,s,a,u,l,c,p,d,h,f,m,g=J.get(e);if(g)for(r.handler&&(r=(o=r).handler,i=o.selector),i&&j.find.matchesSelector(Te,i),r.guid||(r.guid=j.guid++),(u=g.events)||(u=g.events={}),(s=g.handle)||(s=g.handle=function(t){return void 0!==j&&j.event.triggered!==t.type?j.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(V)||[""]).length;l--;)h=m=(a=Ee.exec(t[l])||[])[1],f=(a[2]||"").split(".").sort(),h&&(p=j.event.special[h]||{},h=(i?p.delegateType:p.bindType)||h,p=j.event.special[h]||{},c=j.extend({type:h,origType:m,data:n,handler:r,guid:r.guid,selector:i,needsContext:i&&j.expr.match.needsContext.test(i),namespace:f.join(".")},o),(d=u[h])||((d=u[h]=[]).delegateCount=0,p.setup&&!1!==p.setup.call(e,n,f,s)||e.addEventListener&&e.addEventListener(h,s)),p.add&&(p.add.call(e,c),c.handler.guid||(c.handler.guid=r.guid)),i?d.splice(d.delegateCount++,0,c):d.push(c),j.event.global[h]=!0)},remove:function(e,t,r,n,i){var o,s,a,u,l,c,p,d,h,f,m,g=J.hasData(e)&&J.get(e);if(g&&(u=g.events)){for(l=(t=(t||"").match(V)||[""]).length;l--;)if(h=m=(a=Ee.exec(t[l])||[])[1],f=(a[2]||"").split(".").sort(),h){for(p=j.event.special[h]||{},d=u[h=(n?p.delegateType:p.bindType)||h]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=d.length;o--;)c=d[o],!i&&m!==c.origType||r&&r.guid!==c.guid||a&&!a.test(c.namespace)||n&&n!==c.selector&&("**"!==n||!c.selector)||(d.splice(o,1),c.selector&&d.delegateCount--,p.remove&&p.remove.call(e,c));s&&!d.length&&(p.teardown&&!1!==p.teardown.call(e,f,g.handle)||j.removeEvent(e,h,g.handle),delete u[h])}else for(h in u)j.event.remove(e,h+t[l],r,n,!0);j.isEmptyObject(u)&&J.remove(e,"handle events")}},dispatch:function(e){var t,r,n,i,o,s,a=j.event.fix(e),u=new Array(arguments.length),l=(J.get(this,"events")||{})[a.type]||[],c=j.event.special[a.type]||{};for(u[0]=a,t=1;t<arguments.length;t++)u[t]=arguments[t];if(a.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,a)){for(s=j.event.handlers.call(this,a,l),t=0;(i=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=i.elem,r=0;(o=i.handlers[r++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(n=((j.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u))&&!1===(a.result=n)&&(a.preventDefault(),a.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,a),a.result}},handlers:function(e,t){var r,n,i,o,s,a=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],s={},r=0;r<u;r++)void 0===s[i=(n=t[r]).selector+" "]&&(s[i]=n.needsContext?j(i,this).index(l)>-1:j.find(i,this,null,[l]).length),s[i]&&o.push(n);o.length&&a.push({elem:l,handlers:o})}return l=this,u<t.length&&a.push({elem:l,handlers:t.slice(u)}),a},addProp:function(e,t){Object.defineProperty(j.Event.prototype,e,{enumerable:!0,configurable:!0,get:b(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[j.expando]?e:new j.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Ne()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Ne()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&O(this,"input"))return this.click(),!1},_default:function(e){return O(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},j.removeEvent=function(e,t,r){e.removeEventListener&&e.removeEventListener(t,r)},j.Event=function(e,t){if(!(this instanceof j.Event))return new j.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?De:Ce,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&j.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[j.expando]=!0},j.Event.prototype={constructor:j.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=De,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=De,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=De,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},j.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&je.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&xe.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},j.event.addProp),j.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){j.event.special[e]={delegateType:t,bindType:t,handle:function(e){var r,n=e.relatedTarget,i=e.handleObj;return n&&(n===this||j.contains(this,n))||(e.type=i.origType,r=i.handler.apply(this,arguments),e.type=t),r}}}),j.fn.extend({on:function(e,t,r,n){return Se(this,e,t,r,n)},one:function(e,t,r,n){return Se(this,e,t,r,n,1)},off:function(e,t,r){var n,i;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,j(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(r=t,t=void 0),!1===r&&(r=Ce),this.each(function(){j.event.remove(this,e,r,t)})}});var Oe=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ae=/<script|<style|<link/i,ke=/checked\s*(?:[^=]|=\s*.checked.)/i,Ie=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Me(e,t){return O(e,"table")&&O(11!==t.nodeType?t:t.firstChild,"tr")&&j(e).children("tbody")[0]||e}function Le(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Pe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function He(e,t){var r,n,i,o,s,a,u,l;if(1===t.nodeType){if(J.hasData(e)&&(o=J.access(e),s=J.set(t,o),l=o.events))for(i in delete s.handle,s.events={},l)for(r=0,n=l[i].length;r<n;r++)j.event.add(t,i,l[i][r]);K.hasData(e)&&(a=K.access(e),u=j.extend({},a),K.set(t,u))}}function Ve(e,t,r,n){t=l.apply([],t);var i,o,s,a,u,c,p=0,d=e.length,h=d-1,f=t[0],m=b(f);if(m||d>1&&"string"==typeof f&&!v.checkClone&&ke.test(f))return e.each(function(i){var o=e.eq(i);m&&(t[0]=f.call(this,i,o.html())),Ve(o,t,r,n)});if(d&&(o=(i=we(t,e[0].ownerDocument,!1,e,n)).firstChild,1===i.childNodes.length&&(i=o),o||n)){for(a=(s=j.map(ge(i,"script"),Le)).length;p<d;p++)u=i,p!==h&&(u=j.clone(u,!0,!0),a&&j.merge(s,ge(u,"script"))),r.call(e[p],u,p);if(a)for(c=s[s.length-1].ownerDocument,j.map(s,Pe),p=0;p<a;p++)u=s[p],fe.test(u.type||"")&&!J.access(u,"globalEval")&&j.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?j._evalUrl&&j._evalUrl(u.src):w(u.textContent.replace(Ie,""),c,u))}return e}function Re(e,t,r){for(var n,i=t?j.filter(t,e):e,o=0;null!=(n=i[o]);o++)r||1!==n.nodeType||j.cleanData(ge(n)),n.parentNode&&(r&&j.contains(n.ownerDocument,n)&&ve(ge(n,"script")),n.parentNode.removeChild(n));return e}j.extend({htmlPrefilter:function(e){return e.replace(Oe,"<$1></$2>")},clone:function(e,t,r){var n,i,o,s,a,u,l,c=e.cloneNode(!0),p=j.contains(e.ownerDocument,e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||j.isXMLDoc(e)))for(s=ge(c),n=0,i=(o=ge(e)).length;n<i;n++)a=o[n],u=s[n],void 0,"input"===(l=u.nodeName.toLowerCase())&&de.test(a.type)?u.checked=a.checked:"input"!==l&&"textarea"!==l||(u.defaultValue=a.defaultValue);if(t)if(r)for(o=o||ge(e),s=s||ge(c),n=0,i=o.length;n<i;n++)He(o[n],s[n]);else He(e,c);return(s=ge(c,"script")).length>0&&ve(s,!p&&ge(e,"script")),c},cleanData:function(e){for(var t,r,n,i=j.event.special,o=0;void 0!==(r=e[o]);o++)if(Q(r)){if(t=r[J.expando]){if(t.events)for(n in t.events)i[n]?j.event.remove(r,n):j.removeEvent(r,n,t.handle);r[J.expando]=void 0}r[K.expando]&&(r[K.expando]=void 0)}}}),j.fn.extend({detach:function(e){return Re(this,e,!0)},remove:function(e){return Re(this,e)},text:function(e){return q(this,function(e){return void 0===e?j.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Ve(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Me(this,e).appendChild(e)})},prepend:function(){return Ve(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Me(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Ve(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Ve(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(j.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return j.clone(this,e,t)})},html:function(e){return q(this,function(e){var t=this[0]||{},r=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ae.test(e)&&!me[(he.exec(e)||["",""])[1].toLowerCase()]){e=j.htmlPrefilter(e);try{for(;r<n;r++)1===(t=this[r]||{}).nodeType&&(j.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Ve(this,arguments,function(t){var r=this.parentNode;j.inArray(this,e)<0&&(j.cleanData(ge(this)),r&&r.replaceChild(t,this))},e)}}),j.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){j.fn[e]=function(e){for(var r,n=[],i=j(e),o=i.length-1,s=0;s<=o;s++)r=s===o?this:this.clone(!0),j(i[s])[t](r),c.apply(n,r.get());return this.pushStack(n)}});var Be=new RegExp("^("+ne+")(?!px)[a-z%]+$","i"),Fe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=r),t.getComputedStyle(e)},ze=new RegExp(oe.join("|"),"i");function We(e,t,r){var n,i,o,s,a=e.style;return(r=r||Fe(e))&&(""!==(s=r.getPropertyValue(t)||r[t])||j.contains(e.ownerDocument,e)||(s=j.style(e,t)),!v.pixelBoxStyles()&&Be.test(s)&&ze.test(t)&&(n=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=r.width,a.width=n,a.minWidth=i,a.maxWidth=o)),void 0!==s?s+"":s}function Ue(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",Te.appendChild(l).appendChild(c);var e=r.getComputedStyle(c);n="1%"!==e.top,u=12===t(e.marginLeft),c.style.right="60%",a=36===t(e.right),i=36===t(e.width),c.style.position="absolute",o=36===c.offsetWidth||"absolute",Te.removeChild(l),c=null}}function t(e){return Math.round(parseFloat(e))}var n,i,o,a,u,l=s.createElement("div"),c=s.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===c.style.backgroundClip,j.extend(v,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),o}}))}();var qe=/^(none|table(?!-c[ea]).+)/,Ge=/^--/,Ze={position:"absolute",visibility:"hidden",display:"block"},$e={letterSpacing:"0",fontWeight:"400"},Ye=["Webkit","Moz","ms"],Qe=s.createElement("div").style;function Xe(e){var t=j.cssProps[e];return t||(t=j.cssProps[e]=function(e){if(e in Qe)return e;for(var t=e[0].toUpperCase()+e.slice(1),r=Ye.length;r--;)if((e=Ye[r]+t)in Qe)return e}(e)||e),t}function Je(e,t,r){var n=ie.exec(t);return n?Math.max(0,n[2]-(r||0))+(n[3]||"px"):t}function Ke(e,t,r,n,i,o){var s="width"===t?1:0,a=0,u=0;if(r===(n?"border":"content"))return 0;for(;s<4;s+=2)"margin"===r&&(u+=j.css(e,r+oe[s],!0,i)),n?("content"===r&&(u-=j.css(e,"padding"+oe[s],!0,i)),"margin"!==r&&(u-=j.css(e,"border"+oe[s]+"Width",!0,i))):(u+=j.css(e,"padding"+oe[s],!0,i),"padding"!==r?u+=j.css(e,"border"+oe[s]+"Width",!0,i):a+=j.css(e,"border"+oe[s]+"Width",!0,i));return!n&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-a-.5))),u}function et(e,t,r){var n=Fe(e),i=We(e,t,n),o="border-box"===j.css(e,"boxSizing",!1,n),s=o;if(Be.test(i)){if(!r)return i;i="auto"}return s=s&&(v.boxSizingReliable()||i===e.style[t]),("auto"===i||!parseFloat(i)&&"inline"===j.css(e,"display",!1,n))&&(i=e["offset"+t[0].toUpperCase()+t.slice(1)],s=!0),(i=parseFloat(i)||0)+Ke(e,t,r||(o?"border":"content"),s,n,i)+"px"}function tt(e,t,r,n,i){return new tt.prototype.init(e,t,r,n,i)}j.extend({cssHooks:{opacity:{get:function(e,t){if(t){var r=We(e,"opacity");return""===r?"1":r}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,r,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=Y(t),u=Ge.test(t),l=e.style;if(u||(t=Xe(a)),s=j.cssHooks[t]||j.cssHooks[a],void 0===r)return s&&"get"in s&&void 0!==(i=s.get(e,!1,n))?i:l[t];"string"===(o=typeof r)&&(i=ie.exec(r))&&i[1]&&(r=ue(e,t,i),o="number"),null!=r&&r==r&&("number"===o&&(r+=i&&i[3]||(j.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==r||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(r=s.set(e,r,n))||(u?l.setProperty(t,r):l[t]=r))}},css:function(e,t,r,n){var i,o,s,a=Y(t);return Ge.test(t)||(t=Xe(a)),(s=j.cssHooks[t]||j.cssHooks[a])&&"get"in s&&(i=s.get(e,!0,r)),void 0===i&&(i=We(e,t,n)),"normal"===i&&t in $e&&(i=$e[t]),""===r||r?(o=parseFloat(i),!0===r||isFinite(o)?o||0:i):i}}),j.each(["height","width"],function(e,t){j.cssHooks[t]={get:function(e,r,n){if(r)return!qe.test(j.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,n):ae(e,Ze,function(){return et(e,t,n)})},set:function(e,r,n){var i,o=Fe(e),s="border-box"===j.css(e,"boxSizing",!1,o),a=n&&Ke(e,t,n,s,o);return s&&v.scrollboxSize()===o.position&&(a-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-Ke(e,t,"border",!1,o)-.5)),a&&(i=ie.exec(r))&&"px"!==(i[3]||"px")&&(e.style[t]=r,r=j.css(e,t)),Je(0,r,a)}}}),j.cssHooks.marginLeft=Ue(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(We(e,"marginLeft"))||e.getBoundingClientRect().left-ae(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),j.each({margin:"",padding:"",border:"Width"},function(e,t){j.cssHooks[e+t]={expand:function(r){for(var n=0,i={},o="string"==typeof r?r.split(" "):[r];n<4;n++)i[e+oe[n]+t]=o[n]||o[n-2]||o[0];return i}},"margin"!==e&&(j.cssHooks[e+t].set=Je)}),j.fn.extend({css:function(e,t){return q(this,function(e,t,r){var n,i,o={},s=0;if(Array.isArray(t)){for(n=Fe(e),i=t.length;s<i;s++)o[t[s]]=j.css(e,t[s],!1,n);return o}return void 0!==r?j.style(e,t,r):j.css(e,t)},e,t,arguments.length>1)}}),j.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,r,n,i,o){this.elem=e,this.prop=r,this.easing=i||j.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=o||(j.cssNumber[r]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,r=tt.propHooks[this.prop];return this.options.duration?this.pos=t=j.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),r&&r.set?r.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=j.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){j.fx.step[e.prop]?j.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[j.cssProps[e.prop]]&&!j.cssHooks[e.prop]?e.elem[e.prop]=e.now:j.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},j.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},j.fx=tt.prototype.init,j.fx.step={};var rt,nt,it=/^(?:toggle|show|hide)$/,ot=/queueHooks$/;function st(){nt&&(!1===s.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(st):r.setTimeout(st,j.fx.interval),j.fx.tick())}function at(){return r.setTimeout(function(){rt=void 0}),rt=Date.now()}function ut(e,t){var r,n=0,i={height:e};for(t=t?1:0;n<4;n+=2-t)i["margin"+(r=oe[n])]=i["padding"+r]=e;return t&&(i.opacity=i.width=e),i}function lt(e,t,r){for(var n,i=(ct.tweeners[t]||[]).concat(ct.tweeners["*"]),o=0,s=i.length;o<s;o++)if(n=i[o].call(r,t,e))return n}function ct(e,t,r){var n,i,o=0,s=ct.prefilters.length,a=j.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=rt||at(),r=Math.max(0,l.startTime+l.duration-t),n=1-(r/l.duration||0),o=0,s=l.tweens.length;o<s;o++)l.tweens[o].run(n);return a.notifyWith(e,[l,n,r]),n<1&&s?r:(s||a.notifyWith(e,[l,1,0]),a.resolveWith(e,[l]),!1)},l=a.promise({elem:e,props:j.extend({},t),opts:j.extend(!0,{specialEasing:{},easing:j.easing._default},r),originalProperties:t,originalOptions:r,startTime:rt||at(),duration:r.duration,tweens:[],createTween:function(t,r){var n=j.Tween(e,l.opts,t,r,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(n),n},stop:function(t){var r=0,n=t?l.tweens.length:0;if(i)return this;for(i=!0;r<n;r++)l.tweens[r].run(1);return t?(a.notifyWith(e,[l,1,0]),a.resolveWith(e,[l,t])):a.rejectWith(e,[l,t]),this}}),c=l.props;for(!function(e,t){var r,n,i,o,s;for(r in e)if(i=t[n=Y(r)],o=e[r],Array.isArray(o)&&(i=o[1],o=e[r]=o[0]),r!==n&&(e[n]=o,delete e[r]),(s=j.cssHooks[n])&&"expand"in s)for(r in o=s.expand(o),delete e[n],o)r in e||(e[r]=o[r],t[r]=i);else t[n]=i}(c,l.opts.specialEasing);o<s;o++)if(n=ct.prefilters[o].call(l,e,c,l.opts))return b(n.stop)&&(j._queueHooks(l.elem,l.opts.queue).stop=n.stop.bind(n)),n;return j.map(c,lt,l),b(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),j.fx.timer(j.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l}j.Animation=j.extend(ct,{tweeners:{"*":[function(e,t){var r=this.createTween(e,t);return ue(r.elem,e,ie.exec(t),r),r}]},tweener:function(e,t){b(e)?(t=e,e=["*"]):e=e.match(V);for(var r,n=0,i=e.length;n<i;n++)r=e[n],ct.tweeners[r]=ct.tweeners[r]||[],ct.tweeners[r].unshift(t)},prefilters:[function(e,t,r){var n,i,o,s,a,u,l,c,p="width"in t||"height"in t,d=this,h={},f=e.style,m=e.nodeType&&se(e),g=J.get(e,"fxshow");for(n in r.queue||(null==(s=j._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,j.queue(e,"fx").length||s.empty.fire()})})),t)if(i=t[n],it.test(i)){if(delete t[n],o=o||"toggle"===i,i===(m?"hide":"show")){if("show"!==i||!g||void 0===g[n])continue;m=!0}h[n]=g&&g[n]||j.style(e,n)}if((u=!j.isEmptyObject(t))||!j.isEmptyObject(h))for(n in p&&1===e.nodeType&&(r.overflow=[f.overflow,f.overflowX,f.overflowY],null==(l=g&&g.display)&&(l=J.get(e,"display")),"none"===(c=j.css(e,"display"))&&(l?c=l:(pe([e],!0),l=e.style.display||l,c=j.css(e,"display"),pe([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===j.css(e,"float")&&(u||(d.done(function(){f.display=l}),null==l&&(c=f.display,l="none"===c?"":c)),f.display="inline-block")),r.overflow&&(f.overflow="hidden",d.always(function(){f.overflow=r.overflow[0],f.overflowX=r.overflow[1],f.overflowY=r.overflow[2]})),u=!1,h)u||(g?"hidden"in g&&(m=g.hidden):g=J.access(e,"fxshow",{display:l}),o&&(g.hidden=!m),m&&pe([e],!0),d.done(function(){for(n in m||pe([e]),J.remove(e,"fxshow"),h)j.style(e,n,h[n])})),u=lt(m?g[n]:0,n,d),n in g||(g[n]=u.start,m&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?ct.prefilters.unshift(e):ct.prefilters.push(e)}}),j.speed=function(e,t,r){var n=e&&"object"==typeof e?j.extend({},e):{complete:r||!r&&t||b(e)&&e,duration:e,easing:r&&t||t&&!b(t)&&t};return j.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in j.fx.speeds?n.duration=j.fx.speeds[n.duration]:n.duration=j.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){b(n.old)&&n.old.call(this),n.queue&&j.dequeue(this,n.queue)},n},j.fn.extend({fadeTo:function(e,t,r,n){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,r,n)},animate:function(e,t,r,n){var i=j.isEmptyObject(e),o=j.speed(t,r,n),s=function(){var t=ct(this,j.extend({},e),o);(i||J.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,r){var n=function(e){var t=e.stop;delete e.stop,t(r)};return"string"!=typeof e&&(r=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=j.timers,s=J.get(this);if(i)s[i]&&s[i].stop&&n(s[i]);else for(i in s)s[i]&&s[i].stop&&ot.test(i)&&n(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(r),t=!1,o.splice(i,1));!t&&r||j.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,r=J.get(this),n=r[e+"queue"],i=r[e+"queueHooks"],o=j.timers,s=n?n.length:0;for(r.finish=!0,j.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete r.finish})}}),j.each(["toggle","show","hide"],function(e,t){var r=j.fn[t];j.fn[t]=function(e,n,i){return null==e||"boolean"==typeof e?r.apply(this,arguments):this.animate(ut(t,!0),e,n,i)}}),j.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){j.fn[e]=function(e,r,n){return this.animate(t,e,r,n)}}),j.timers=[],j.fx.tick=function(){var e,t=0,r=j.timers;for(rt=Date.now();t<r.length;t++)(e=r[t])()||r[t]!==e||r.splice(t--,1);r.length||j.fx.stop(),rt=void 0},j.fx.timer=function(e){j.timers.push(e),j.fx.start()},j.fx.interval=13,j.fx.start=function(){nt||(nt=!0,st())},j.fx.stop=function(){nt=null},j.fx.speeds={slow:600,fast:200,_default:400},j.fn.delay=function(e,t){return e=j.fx&&j.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,n){var i=r.setTimeout(t,e);n.stop=function(){r.clearTimeout(i)}})},function(){var e=s.createElement("input"),t=s.createElement("select").appendChild(s.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=s.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var pt,dt=j.expr.attrHandle;j.fn.extend({attr:function(e,t){return q(this,j.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){j.removeAttr(this,e)})}}),j.extend({attr:function(e,t,r){var n,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?j.prop(e,t,r):(1===o&&j.isXMLDoc(e)||(i=j.attrHooks[t.toLowerCase()]||(j.expr.match.bool.test(t)?pt:void 0)),void 0!==r?null===r?void j.removeAttr(e,t):i&&"set"in i&&void 0!==(n=i.set(e,r,t))?n:(e.setAttribute(t,r+""),r):i&&"get"in i&&null!==(n=i.get(e,t))?n:null==(n=j.find.attr(e,t))?void 0:n)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&O(e,"input")){var r=e.value;return e.setAttribute("type",t),r&&(e.value=r),t}}}},removeAttr:function(e,t){var r,n=0,i=t&&t.match(V);if(i&&1===e.nodeType)for(;r=i[n++];)e.removeAttribute(r)}}),pt={set:function(e,t,r){return!1===t?j.removeAttr(e,r):e.setAttribute(r,r),r}},j.each(j.expr.match.bool.source.match(/\w+/g),function(e,t){var r=dt[t]||j.find.attr;dt[t]=function(e,t,n){var i,o,s=t.toLowerCase();return n||(o=dt[s],dt[s]=i,i=null!=r(e,t,n)?s:null,dt[s]=o),i}});var ht=/^(?:input|select|textarea|button)$/i,ft=/^(?:a|area)$/i;function mt(e){return(e.match(V)||[]).join(" ")}function gt(e){return e.getAttribute&&e.getAttribute("class")||""}function vt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(V)||[]}j.fn.extend({prop:function(e,t){return q(this,j.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[j.propFix[e]||e]})}}),j.extend({prop:function(e,t,r){var n,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&j.isXMLDoc(e)||(t=j.propFix[t]||t,i=j.propHooks[t]),void 0!==r?i&&"set"in i&&void 0!==(n=i.set(e,r,t))?n:e[t]=r:i&&"get"in i&&null!==(n=i.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=j.find.attr(e,"tabindex");return t?parseInt(t,10):ht.test(e.nodeName)||ft.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(j.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),j.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){j.propFix[this.toLowerCase()]=this}),j.fn.extend({addClass:function(e){var t,r,n,i,o,s,a,u=0;if(b(e))return this.each(function(t){j(this).addClass(e.call(this,t,gt(this)))});if((t=vt(e)).length)for(;r=this[u++];)if(i=gt(r),n=1===r.nodeType&&" "+mt(i)+" "){for(s=0;o=t[s++];)n.indexOf(" "+o+" ")<0&&(n+=o+" ");i!==(a=mt(n))&&r.setAttribute("class",a)}return this},removeClass:function(e){var t,r,n,i,o,s,a,u=0;if(b(e))return this.each(function(t){j(this).removeClass(e.call(this,t,gt(this)))});if(!arguments.length)return this.attr("class","");if((t=vt(e)).length)for(;r=this[u++];)if(i=gt(r),n=1===r.nodeType&&" "+mt(i)+" "){for(s=0;o=t[s++];)for(;n.indexOf(" "+o+" ")>-1;)n=n.replace(" "+o+" "," ");i!==(a=mt(n))&&r.setAttribute("class",a)}return this},toggleClass:function(e,t){var r=typeof e,n="string"===r||Array.isArray(e);return"boolean"==typeof t&&n?t?this.addClass(e):this.removeClass(e):b(e)?this.each(function(r){j(this).toggleClass(e.call(this,r,gt(this),t),t)}):this.each(function(){var t,i,o,s;if(n)for(i=0,o=j(this),s=vt(e);t=s[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==r||((t=gt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))})},hasClass:function(e){var t,r,n=0;for(t=" "+e+" ";r=this[n++];)if(1===r.nodeType&&(" "+mt(gt(r))+" ").indexOf(t)>-1)return!0;return!1}});var bt=/\r/g;j.fn.extend({val:function(e){var t,r,n,i=this[0];return arguments.length?(n=b(e),this.each(function(r){var i;1===this.nodeType&&(null==(i=n?e.call(this,r,j(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=j.map(i,function(e){return null==e?"":e+""})),(t=j.valHooks[this.type]||j.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))})):i?(t=j.valHooks[i.type]||j.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(r=t.get(i,"value"))?r:"string"==typeof(r=i.value)?r.replace(bt,""):null==r?"":r:void 0}}),j.extend({valHooks:{option:{get:function(e){var t=j.find.attr(e,"value");return null!=t?t:mt(j.text(e))}},select:{get:function(e){var t,r,n,i=e.options,o=e.selectedIndex,s="select-one"===e.type,a=s?null:[],u=s?o+1:i.length;for(n=o<0?u:s?o:0;n<u;n++)if(((r=i[n]).selected||n===o)&&!r.disabled&&(!r.parentNode.disabled||!O(r.parentNode,"optgroup"))){if(t=j(r).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var r,n,i=e.options,o=j.makeArray(t),s=i.length;s--;)((n=i[s]).selected=j.inArray(j.valHooks.option.get(n),o)>-1)&&(r=!0);return r||(e.selectedIndex=-1),o}}}}),j.each(["radio","checkbox"],function(){j.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=j.inArray(j(e).val(),t)>-1}},v.checkOn||(j.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),v.focusin="onfocusin"in r;var yt=/^(?:focusinfocus|focusoutblur)$/,_t=function(e){e.stopPropagation()};j.extend(j.event,{trigger:function(e,t,n,i){var o,a,u,l,c,p,d,h,m=[n||s],g=f.call(e,"type")?e.type:e,v=f.call(e,"namespace")?e.namespace.split("."):[];if(a=h=u=n=n||s,3!==n.nodeType&&8!==n.nodeType&&!yt.test(g+j.event.triggered)&&(g.indexOf(".")>-1&&(g=(v=g.split(".")).shift(),v.sort()),c=g.indexOf(":")<0&&"on"+g,(e=e[j.expando]?e:new j.Event(g,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:j.makeArray(t,[e]),d=j.event.special[g]||{},i||!d.trigger||!1!==d.trigger.apply(n,t))){if(!i&&!d.noBubble&&!y(n)){for(l=d.delegateType||g,yt.test(l+g)||(a=a.parentNode);a;a=a.parentNode)m.push(a),u=a;u===(n.ownerDocument||s)&&m.push(u.defaultView||u.parentWindow||r)}for(o=0;(a=m[o++])&&!e.isPropagationStopped();)h=a,e.type=o>1?l:d.bindType||g,(p=(J.get(a,"events")||{})[e.type]&&J.get(a,"handle"))&&p.apply(a,t),(p=c&&a[c])&&p.apply&&Q(a)&&(e.result=p.apply(a,t),!1===e.result&&e.preventDefault());return e.type=g,i||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(m.pop(),t)||!Q(n)||c&&b(n[g])&&!y(n)&&((u=n[c])&&(n[c]=null),j.event.triggered=g,e.isPropagationStopped()&&h.addEventListener(g,_t),n[g](),e.isPropagationStopped()&&h.removeEventListener(g,_t),j.event.triggered=void 0,u&&(n[c]=u)),e.result}},simulate:function(e,t,r){var n=j.extend(new j.Event,r,{type:e,isSimulated:!0});j.event.trigger(n,null,t)}}),j.fn.extend({trigger:function(e,t){return this.each(function(){j.event.trigger(e,t,this)})},triggerHandler:function(e,t){var r=this[0];if(r)return j.event.trigger(e,t,r,!0)}}),v.focusin||j.each({focus:"focusin",blur:"focusout"},function(e,t){var r=function(e){j.event.simulate(t,e.target,j.event.fix(e))};j.event.special[t]={setup:function(){var n=this.ownerDocument||this,i=J.access(n,t);i||n.addEventListener(e,r,!0),J.access(n,t,(i||0)+1)},teardown:function(){var n=this.ownerDocument||this,i=J.access(n,t)-1;i?J.access(n,t,i):(n.removeEventListener(e,r,!0),J.remove(n,t))}}});var wt=r.location,Tt=Date.now(),jt=/\?/;j.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new r.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||j.error("Invalid XML: "+e),t};var xt=/\[\]$/,Et=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,Ct=/^(?:input|select|textarea|keygen)/i;function Nt(e,t,r,n){var i;if(Array.isArray(t))j.each(t,function(t,i){r||xt.test(e)?n(e,i):Nt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,r,n)});else if(r||"object"!==T(t))n(e,t);else for(i in t)Nt(e+"["+i+"]",t[i],r,n)}j.param=function(e,t){var r,n=[],i=function(e,t){var r=b(t)?t():t;n[n.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==r?"":r)};if(Array.isArray(e)||e.jquery&&!j.isPlainObject(e))j.each(e,function(){i(this.name,this.value)});else for(r in e)Nt(r,e[r],t,i);return n.join("&")},j.fn.extend({serialize:function(){return j.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=j.prop(this,"elements");return e?j.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!j(this).is(":disabled")&&Ct.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!de.test(e))}).map(function(e,t){var r=j(this).val();return null==r?null:Array.isArray(r)?j.map(r,function(e){return{name:t.name,value:e.replace(Et,"\r\n")}}):{name:t.name,value:r.replace(Et,"\r\n")}}).get()}});var St=/%20/g,Ot=/#.*$/,At=/([?&])_=[^&]*/,kt=/^(.*?):[ \t]*([^\r\n]*)$/gm,It=/^(?:GET|HEAD)$/,Mt=/^\/\//,Lt={},Pt={},Ht="*/".concat("*"),Vt=s.createElement("a");function Rt(e){return function(t,r){"string"!=typeof t&&(r=t,t="*");var n,i=0,o=t.toLowerCase().match(V)||[];if(b(r))for(;n=o[i++];)"+"===n[0]?(n=n.slice(1)||"*",(e[n]=e[n]||[]).unshift(r)):(e[n]=e[n]||[]).push(r)}}function Bt(e,t,r,n){var i={},o=e===Pt;function s(a){var u;return i[a]=!0,j.each(e[a]||[],function(e,a){var l=a(t,r,n);return"string"!=typeof l||o||i[l]?o?!(u=l):void 0:(t.dataTypes.unshift(l),s(l),!1)}),u}return s(t.dataTypes[0])||!i["*"]&&s("*")}function Ft(e,t){var r,n,i=j.ajaxSettings.flatOptions||{};for(r in t)void 0!==t[r]&&((i[r]?e:n||(n={}))[r]=t[r]);return n&&j.extend(!0,e,n),e}Vt.href=wt.href,j.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:wt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(wt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ht,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":j.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ft(Ft(e,j.ajaxSettings),t):Ft(j.ajaxSettings,e)},ajaxPrefilter:Rt(Lt),ajaxTransport:Rt(Pt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,i,o,a,u,l,c,p,d,h,f=j.ajaxSetup({},t),m=f.context||f,g=f.context&&(m.nodeType||m.jquery)?j(m):j.event,v=j.Deferred(),b=j.Callbacks("once memory"),y=f.statusCode||{},_={},w={},T="canceled",x={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=kt.exec(o);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,_[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)x.always(e[x.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||T;return n&&n.abort(t),E(0,t),this}};if(v.promise(x),f.url=((e||f.url||wt.href)+"").replace(Mt,wt.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(V)||[""],null==f.crossDomain){l=s.createElement("a");try{l.href=f.url,l.href=l.href,f.crossDomain=Vt.protocol+"//"+Vt.host!=l.protocol+"//"+l.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=j.param(f.data,f.traditional)),Bt(Lt,f,t,x),c)return x;for(d in(p=j.event&&f.global)&&0==j.active++&&j.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!It.test(f.type),i=f.url.replace(Ot,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(St,"+")):(h=f.url.slice(i.length),f.data&&(f.processData||"string"==typeof f.data)&&(i+=(jt.test(i)?"&":"?")+f.data,delete f.data),!1===f.cache&&(i=i.replace(At,"$1"),h=(jt.test(i)?"&":"?")+"_="+Tt+++h),f.url=i+h),f.ifModified&&(j.lastModified[i]&&x.setRequestHeader("If-Modified-Since",j.lastModified[i]),j.etag[i]&&x.setRequestHeader("If-None-Match",j.etag[i])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&x.setRequestHeader("Content-Type",f.contentType),x.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Ht+"; q=0.01":""):f.accepts["*"]),f.headers)x.setRequestHeader(d,f.headers[d]);if(f.beforeSend&&(!1===f.beforeSend.call(m,x,f)||c))return x.abort();if(T="abort",b.add(f.complete),x.done(f.success),x.fail(f.error),n=Bt(Pt,f,t,x)){if(x.readyState=1,p&&g.trigger("ajaxSend",[x,f]),c)return x;f.async&&f.timeout>0&&(u=r.setTimeout(function(){x.abort("timeout")},f.timeout));try{c=!1,n.send(_,E)}catch(e){if(c)throw e;E(-1,e)}}else E(-1,"No Transport");function E(e,t,s,a){var l,d,h,_,w,T=t;c||(c=!0,u&&r.clearTimeout(u),n=void 0,o=a||"",x.readyState=e>0?4:0,l=e>=200&&e<300||304===e,s&&(_=function(e,t,r){for(var n,i,o,s,a=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(i in a)if(a[i]&&a[i].test(n)){u.unshift(i);break}if(u[0]in r)o=u[0];else{for(i in r){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}s||(s=i)}o=o||s}if(o)return o!==u[0]&&u.unshift(o),r[o]}(f,x,s)),_=function(e,t,r,n){var i,o,s,a,u,l={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(r[e.responseFields[o]]=t),!u&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(s=l[u+" "+o]||l["* "+o]))for(i in l)if((a=i.split(" "))[1]===o&&(s=l[u+" "+a[0]]||l["* "+a[0]])){!0===s?s=l[i]:!0!==l[i]&&(o=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(f,_,x,l),l?(f.ifModified&&((w=x.getResponseHeader("Last-Modified"))&&(j.lastModified[i]=w),(w=x.getResponseHeader("etag"))&&(j.etag[i]=w)),204===e||"HEAD"===f.type?T="nocontent":304===e?T="notmodified":(T=_.state,d=_.data,l=!(h=_.error))):(h=T,!e&&T||(T="error",e<0&&(e=0))),x.status=e,x.statusText=(t||T)+"",l?v.resolveWith(m,[d,T,x]):v.rejectWith(m,[x,T,h]),x.statusCode(y),y=void 0,p&&g.trigger(l?"ajaxSuccess":"ajaxError",[x,f,l?d:h]),b.fireWith(m,[x,T]),p&&(g.trigger("ajaxComplete",[x,f]),--j.active||j.event.trigger("ajaxStop")))}return x},getJSON:function(e,t,r){return j.get(e,t,r,"json")},getScript:function(e,t){return j.get(e,void 0,t,"script")}}),j.each(["get","post"],function(e,t){j[t]=function(e,r,n,i){return b(r)&&(i=i||n,n=r,r=void 0),j.ajax(j.extend({url:e,type:t,dataType:i,data:r,success:n},j.isPlainObject(e)&&e))}}),j._evalUrl=function(e){return j.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},j.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=j(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return b(e)?this.each(function(t){j(this).wrapInner(e.call(this,t))}):this.each(function(){var t=j(this),r=t.contents();r.length?r.wrapAll(e):t.append(e)})},wrap:function(e){var t=b(e);return this.each(function(r){j(this).wrapAll(t?e.call(this,r):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){j(this).replaceWith(this.childNodes)}),this}}),j.expr.pseudos.hidden=function(e){return!j.expr.pseudos.visible(e)},j.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},j.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(e){}};var zt={0:200,1223:204},Wt=j.ajaxSettings.xhr();v.cors=!!Wt&&"withCredentials"in Wt,v.ajax=Wt=!!Wt,j.ajaxTransport(function(e){var t,n;if(v.cors||Wt&&!e.crossDomain)return{send:function(i,o){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)a.setRequestHeader(s,i[s]);t=function(e){return function(){t&&(t=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(zt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),n=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&r.setTimeout(function(){t&&n()})},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),j.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),j.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return j.globalEval(e),e}}}),j.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),j.ajaxTransport("script",function(e){var t,r;if(e.crossDomain)return{send:function(n,i){t=j("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",r=function(e){t.remove(),r=null,e&&i("error"===e.type?404:200,e.type)}),s.head.appendChild(t[0])},abort:function(){r&&r()}}});var Ut,qt=[],Gt=/(=)\?(?=&|$)|\?\?/;j.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=qt.pop()||j.expando+"_"+Tt++;return this[e]=!0,e}}),j.ajaxPrefilter("json jsonp",function(e,t,n){var i,o,s,a=!1!==e.jsonp&&(Gt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=b(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Gt,"$1"+i):!1!==e.jsonp&&(e.url+=(jt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return s||j.error(i+" was not called"),s[0]},e.dataTypes[0]="json",o=r[i],r[i]=function(){s=arguments},n.always(function(){void 0===o?j(r).removeProp(i):r[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,qt.push(i)),s&&b(o)&&o(s[0]),s=o=void 0}),"script"}),v.createHTMLDocument=((Ut=s.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ut.childNodes.length),j.parseHTML=function(e,t,r){return"string"!=typeof e?[]:("boolean"==typeof t&&(r=t,t=!1),t||(v.createHTMLDocument?((n=(t=s.implementation.createHTMLDocument("")).createElement("base")).href=s.location.href,t.head.appendChild(n)):t=s),i=A.exec(e),o=!r&&[],i?[t.createElement(i[1])]:(i=we([e],t,o),o&&o.length&&j(o).remove(),j.merge([],i.childNodes)));var n,i,o},j.fn.load=function(e,t,r){var n,i,o,s=this,a=e.indexOf(" ");return a>-1&&(n=mt(e.slice(a)),e=e.slice(0,a)),b(t)?(r=t,t=void 0):t&&"object"==typeof t&&(i="POST"),s.length>0&&j.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(n?j("<div>").append(j.parseHTML(e)).find(n):e)}).always(r&&function(e,t){s.each(function(){r.apply(this,o||[e.responseText,t,e])})}),this},j.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){j.fn[t]=function(e){return this.on(t,e)}}),j.expr.pseudos.animated=function(e){return j.grep(j.timers,function(t){return e===t.elem}).length},j.offset={setOffset:function(e,t,r){var n,i,o,s,a,u,l=j.css(e,"position"),c=j(e),p={};"static"===l&&(e.style.position="relative"),a=c.offset(),o=j.css(e,"top"),u=j.css(e,"left"),("absolute"===l||"fixed"===l)&&(o+u).indexOf("auto")>-1?(s=(n=c.position()).top,i=n.left):(s=parseFloat(o)||0,i=parseFloat(u)||0),b(t)&&(t=t.call(e,r,j.extend({},a))),null!=t.top&&(p.top=t.top-a.top+s),null!=t.left&&(p.left=t.left-a.left+i),"using"in t?t.using.call(e,p):c.css(p)}},j.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){j.offset.setOffset(this,e,t)});var t,r,n=this[0];return n?n.getClientRects().length?(t=n.getBoundingClientRect(),r=n.ownerDocument.defaultView,{top:t.top+r.pageYOffset,left:t.left+r.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,r,n=this[0],i={top:0,left:0};if("fixed"===j.css(n,"position"))t=n.getBoundingClientRect();else{for(t=this.offset(),r=n.ownerDocument,e=n.offsetParent||r.documentElement;e&&(e===r.body||e===r.documentElement)&&"static"===j.css(e,"position");)e=e.parentNode;e&&e!==n&&1===e.nodeType&&((i=j(e).offset()).top+=j.css(e,"borderTopWidth",!0),i.left+=j.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-j.css(n,"marginTop",!0),left:t.left-i.left-j.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===j.css(e,"position");)e=e.offsetParent;return e||Te})}}),j.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var r="pageYOffset"===t;j.fn[e]=function(n){return q(this,function(e,n,i){var o;if(y(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[n];o?o.scrollTo(r?o.pageXOffset:i,r?i:o.pageYOffset):e[n]=i},e,n,arguments.length)}}),j.each(["top","left"],function(e,t){j.cssHooks[t]=Ue(v.pixelPosition,function(e,r){if(r)return r=We(e,t),Be.test(r)?j(e).position()[t]+"px":r})}),j.each({Height:"height",Width:"width"},function(e,t){j.each({padding:"inner"+e,content:t,"":"outer"+e},function(r,n){j.fn[n]=function(i,o){var s=arguments.length&&(r||"boolean"!=typeof i),a=r||(!0===i||!0===o?"margin":"border");return q(this,function(t,r,i){var o;return y(t)?0===n.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?j.css(t,r,a):j.style(t,r,i,a)},t,s?i:void 0,s)}})}),j.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){j.fn[t]=function(e,r){return arguments.length>0?this.on(t,null,e,r):this.trigger(t)}}),j.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),j.fn.extend({bind:function(e,t,r){return this.on(e,null,t,r)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,r,n){return this.on(t,e,r,n)},undelegate:function(e,t,r){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",r)}}),j.proxy=function(e,t){var r,n,i;if("string"==typeof t&&(r=e[t],t=e,e=r),b(e))return n=u.call(arguments,2),(i=function(){return e.apply(t||this,n.concat(u.call(arguments)))}).guid=e.guid=e.guid||j.guid++,i},j.holdReady=function(e){e?j.readyWait++:j.ready(!0)},j.isArray=Array.isArray,j.parseJSON=JSON.parse,j.nodeName=O,j.isFunction=b,j.isWindow=y,j.camelCase=Y,j.type=T,j.now=Date.now,j.isNumeric=function(e){var t=j.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(n=function(){return j}.apply(t,[]))||(e.exports=n);var Zt=r.jQuery,$t=r.$;return j.noConflict=function(e){return r.$===j&&(r.$=$t),e&&r.jQuery===j&&(r.jQuery=Zt),j},i||(r.jQuery=r.$=j),j})},function(e,t,r){(function(t){e.exports=t.$=r(9)}).call(this,r(1))},function(e,t,r){"use strict";(function(e){i(r(8));var t=i(r(3));r(2),r(7),r(6),r(5);var n=i(r(4));function i(e){return e&&e.__esModule?e:{default:e}}var o={version:"v1.2.2",downloads:{AppImage:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.2/baiji-manga-viewer-1.2.2-x86_64.AppImage",dmg:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.2/baiji-manga-viewer-1.2.2.dmg",exe:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.2/baiji-manga-viewer-setup-1.2.2.exe",deb:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.2/baiji-manga-viewer_1.2.2_amd64.deb",zip:"https://github.com/jmarioste/manga-viewer/releases/download/v1.2.2/baiji-manga-viewer-1.2.2-mac.zip"},getUrl:function(e,t){var r=e.map(function(e){return e.browser_download_url}).filter(function(e){return t.test(e)});return console.log(r),r[0]},getDownloadCount:function(e){var t=e.map(function(e){return e.download_count});return console.log(t),t}};e(document).ready(function(){e(".loading").delay(500).fadeOut(500),e(".do-magnifiy").magnificPopup({type:"image"});var r=n.default[0];o.version=r.name,o.downloads.dmg=o.getUrl(r.assets,/.dmg$/g),o.downloads.exe=o.getUrl(r.assets,/.exe$/g),o.downloads.deb=o.getUrl(r.assets,/.deb$/g),o.downloads.AppImage=o.getUrl(r.assets,/.AppImage$/g),o.downloads.zip=o.getUrl(r.assets,/.zip$/g),console.log(o.getDownloadCount(r.assets)),t.default.applyBindings(o,e("body")[0])})}).call(this,r(0))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,